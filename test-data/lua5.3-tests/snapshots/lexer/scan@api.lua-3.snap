---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/api.lua
---
[
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 4,
            column: 3,
            span: 99..101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 4,
            column: 5,
            span: 102..103,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 4,
            column: 7,
            span: 103..105,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 4,
            column: 10,
            span: 105..108,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 4,
            column: 0,
            span: 109..113,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 4,
            span: 116..117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        position: Position {
            line: 5,
            column: 11,
            span: 117..124,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 5,
            column: 14,
            span: 125..127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 5,
            column: 20,
            span: 128..133,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 21,
            span: 133..134,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 5,
            column: 22,
            span: 134..135,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping API tests <<<\\n'",
        ),
        position: Position {
            line: 5,
            column: 73,
            span: 135..186,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 5,
            column: 74,
            span: 186..187,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 6,
            column: 0,
            span: 190..196,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 7,
            column: 0,
            span: 197..200,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 9,
            column: 6,
            span: 202..207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 9,
            column: 12,
            span: 208..213,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 9,
            column: 14,
            span: 214..215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        position: Position {
            line: 9,
            column: 22,
            span: 216..223,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"debug\"",
        ),
        position: Position {
            line: 9,
            column: 30,
            span: 224..231,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 11,
            column: 6,
            span: 233..238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 11,
            column: 11,
            span: 239..243,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 11,
            column: 13,
            span: 244..245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 11,
            column: 19,
            span: 246..251,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 11,
            column: 20,
            span: 251..252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 11,
            column: 0,
            span: 252..256,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 14,
            column: 9,
            span: 259..267,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 14,
            column: 16,
            span: 268..274,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 14,
            column: 18,
            span: 275..276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 14,
            column: 20,
            span: 276..278,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 14,
            column: 21,
            span: 278..279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 14,
            column: 24,
            span: 280..282,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 14,
            column: 25,
            span: 282..283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 15,
            column: 9,
            span: 286..292,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 10,
            span: 292..293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 15,
            column: 12,
            span: 293..295,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 15,
            column: 13,
            span: 295..296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 15,
            column: 14,
            span: 296..297,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 15,
            column: 17,
            span: 298..300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 15,
            column: 19,
            span: 301..302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 15,
            column: 21,
            span: 302..304,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 15,
            column: 22,
            span: 304..305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 15,
            column: 23,
            span: 305..306,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 15,
            column: 26,
            span: 307..309,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 15,
            column: 28,
            span: 310..311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 15,
            column: 30,
            span: 311..313,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 31,
            span: 313..314,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 15,
            column: 33,
            span: 315..316,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 15,
            column: 35,
            span: 316..318,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 15,
            column: 36,
            span: 318..319,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 16,
            column: 6,
            span: 322..325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 16,
            column: 8,
            span: 326..327,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 16,
            column: 10,
            span: 328..329,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 12,
            span: 329..331,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 16,
            column: 13,
            span: 331..332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 16,
            column: 16,
            span: 333..335,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 16,
            column: 17,
            span: 335..336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 16,
            column: 18,
            span: 336..337,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 16,
            column: 21,
            span: 338..340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 16,
            column: 28,
            span: 341..347,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 16,
            column: 29,
            span: 347..348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 16,
            column: 31,
            span: 348..350,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 16,
            column: 32,
            span: 350..351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 16,
            column: 33,
            span: 351..352,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 16,
            column: 34,
            span: 352..353,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 16,
            column: 37,
            span: 354..356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        position: Position {
            line: 16,
            column: 40,
            span: 357..359,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 16,
            column: 41,
            span: 359..360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 16,
            column: 42,
            span: 360..361,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 16,
            column: 44,
            span: 362..363,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 16,
            column: 46,
            span: 363..365,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 16,
            column: 47,
            span: 365..366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 16,
            column: 48,
            span: 366..367,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 16,
            column: 0,
            span: 368..371,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 17,
            column: 0,
            span: 372..375,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 20,
            column: 6,
            span: 378..383,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 20,
            column: 15,
            span: 384..392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 20,
            column: 24,
            span: 393..401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 20,
            column: 26,
            span: 402..403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 20,
            column: 29,
            span: 403..406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 20,
            column: 30,
            span: 406..407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 20,
            column: 32,
            span: 408..409,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 20,
            column: 33,
            span: 409..410,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 20,
            column: 37,
            span: 411..414,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 20,
            column: 38,
            span: 414..415,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 21,
            column: 8,
            span: 418..423,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 21,
            column: 13,
            span: 424..428,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 14,
            span: 428..429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 21,
            column: 18,
            span: 430..433,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 21,
            column: 20,
            span: 434..435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 21,
            column: 26,
            span: 436..441,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 21,
            column: 27,
            span: 441..442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 21,
            column: 28,
            span: 442..443,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 21,
            column: 29,
            span: 443..444,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 21,
            column: 33,
            span: 445..448,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 21,
            column: 34,
            span: 448..449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 22,
            column: 9,
            span: 452..458,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 10,
            span: 458..459,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 22,
            column: 13,
            span: 459..462,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 22,
            column: 18,
            span: 463..467,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 22,
            column: 22,
            span: 468..471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 22,
            column: 29,
            span: 472..478,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 22,
            column: 30,
            span: 478..479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 22,
            column: 34,
            span: 479..483,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 22,
            column: 35,
            span: 483..484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 22,
            column: 38,
            span: 484..487,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 22,
            column: 39,
            span: 487..488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 22,
            column: 43,
            span: 489..492,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 44,
            span: 492..493,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 22,
            column: 45,
            span: 493..494,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 23,
            column: 0,
            span: 495..498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 26,
            column: 6,
            span: 501..506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 26,
            column: 7,
            span: 506..507,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing C API'",
        ),
        position: Position {
            line: 26,
            column: 22,
            span: 507..522,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 26,
            column: 23,
            span: 522..523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 28,
            column: 2,
            span: 525..526,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 28,
            column: 4,
            span: 527..528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 28,
            column: 6,
            span: 529..530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 28,
            column: 7,
            span: 530..531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 28,
            column: 12,
            span: 531..536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 28,
            column: 13,
            span: 536..537,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue R; return 1\"",
        ),
        position: Position {
            line: 28,
            column: 36,
            span: 537..560,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 28,
            column: 37,
            span: 560..561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 29,
            column: 7,
            span: 562..568,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 8,
            span: 568..569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 29,
            column: 9,
            span: 569..570,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 29,
            column: 12,
            span: 571..573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 29,
            column: 18,
            span: 574..579,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 29,
            column: 19,
            span: 579..580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        position: Position {
            line: 29,
            column: 30,
            span: 580..591,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 29,
            column: 31,
            span: 591..592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 32,
            span: 592..593,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 29,
            column: 33,
            span: 593..594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 33,
            column: 7,
            span: 609..615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 8,
            span: 615..616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 33,
            column: 9,
            span: 616..617,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 33,
            column: 10,
            span: 617..618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 33,
            column: 15,
            span: 618..623,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 33,
            column: 16,
            span: 623..624,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 10; absindex -1; return 1\"",
        ),
        position: Position {
            line: 33,
            column: 50,
            span: 624..658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 51,
            span: 658..659,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 33,
            column: 54,
            span: 660..662,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 33,
            column: 57,
            span: 662..665,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 33,
            column: 58,
            span: 665..666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 34,
            column: 7,
            span: 667..673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 8,
            span: 673..674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 34,
            column: 9,
            span: 674..675,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 34,
            column: 10,
            span: 675..676,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 34,
            column: 15,
            span: 676..681,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 34,
            column: 16,
            span: 681..682,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 5; absindex -5; return 1\"",
        ),
        position: Position {
            line: 34,
            column: 49,
            span: 682..715,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 50,
            span: 715..716,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 34,
            column: 53,
            span: 717..719,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 34,
            column: 55,
            span: 719..721,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 34,
            column: 56,
            span: 721..722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 35,
            column: 7,
            span: 723..729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 8,
            span: 729..730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 35,
            column: 9,
            span: 730..731,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 35,
            column: 10,
            span: 731..732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 35,
            column: 15,
            span: 732..737,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 35,
            column: 16,
            span: 737..738,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 10; absindex 1; return 1\"",
        ),
        position: Position {
            line: 35,
            column: 49,
            span: 738..771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 50,
            span: 771..772,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 35,
            column: 53,
            span: 773..775,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 35,
            column: 55,
            span: 775..777,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 35,
            column: 56,
            span: 777..778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 36,
            column: 7,
            span: 779..785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 8,
            span: 785..786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 36,
            column: 9,
            span: 786..787,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 36,
            column: 10,
            span: 787..788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 36,
            column: 15,
            span: 788..793,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 36,
            column: 16,
            span: 793..794,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 10; absindex R; return 1\"",
        ),
        position: Position {
            line: 36,
            column: 49,
            span: 794..827,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 50,
            span: 827..828,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 36,
            column: 52,
            span: 829..830,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 36,
            column: 54,
            span: 831..832,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 36,
            column: 56,
            span: 831..834,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 36,
            column: 57,
            span: 834..835,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 39,
            column: 2,
            span: 858..859,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 39,
            column: 4,
            span: 860..861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 39,
            column: 6,
            span: 862..863,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 39,
            column: 7,
            span: 863..864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d2s",
        ),
        position: Position {
            line: 39,
            column: 10,
            span: 864..867,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 39,
            column: 11,
            span: 867..868,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12458954321123",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 39,
            column: 27,
            span: 867..884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 39,
            column: 28,
            span: 884..885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 40,
            column: 7,
            span: 886..892,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 8,
            span: 892..893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 40,
            column: 9,
            span: 893..894,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 40,
            column: 12,
            span: 895..897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 40,
            column: 19,
            span: 898..904,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 40,
            column: 20,
            span: 904..905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 40,
            column: 24,
            span: 905..909,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 40,
            column: 25,
            span: 909..910,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"d\"",
        ),
        position: Position {
            line: 40,
            column: 28,
            span: 910..913,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 40,
            column: 29,
            span: 913..914,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12458954321123",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 40,
            column: 46,
            span: 914..931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 47,
            span: 931..932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 40,
            column: 48,
            span: 932..933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 41,
            column: 7,
            span: 934..940,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 8,
            span: 940..941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 41,
            column: 9,
            span: 941..942,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 41,
            column: 10,
            span: 942..943,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s2d",
        ),
        position: Position {
            line: 41,
            column: 13,
            span: 943..946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 41,
            column: 14,
            span: 946..947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 41,
            column: 15,
            span: 947..948,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 16,
            span: 948..949,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 41,
            column: 19,
            span: 950..952,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12458954321123",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 41,
            column: 36,
            span: 952..969,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 41,
            column: 37,
            span: 969..970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 43,
            column: 2,
            span: 972..973,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 3,
            span: 973..974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 43,
            column: 4,
            span: 974..975,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 43,
            column: 5,
            span: 975..976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 43,
            column: 6,
            span: 976..977,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 43,
            column: 8,
            span: 978..979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 43,
            column: 10,
            span: 980..981,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 43,
            column: 11,
            span: 981..982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 43,
            column: 16,
            span: 982..987,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 43,
            column: 17,
            span: 987..988,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 1; pushnum 2; pushnum 3; return 2\"",
        ),
        position: Position {
            line: 43,
            column: 60,
            span: 988..1031,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 43,
            column: 61,
            span: 1031..1032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 44,
            column: 7,
            span: 1033..1039,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 44,
            column: 8,
            span: 1039..1040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 44,
            column: 9,
            span: 1040..1041,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 12,
            span: 1042..1044,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 44,
            column: 14,
            span: 1044..1046,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 44,
            column: 18,
            span: 1047..1050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 44,
            column: 20,
            span: 1051..1052,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 44,
            column: 23,
            span: 1053..1055,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 44,
            column: 25,
            span: 1055..1057,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 44,
            column: 29,
            span: 1058..1061,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 44,
            column: 33,
            span: 1062..1065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 44,
            column: 35,
            span: 1066..1067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 44,
            column: 36,
            span: 1067..1068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 46,
            column: 2,
            span: 1070..1071,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 46,
            column: 4,
            span: 1072..1073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 46,
            column: 6,
            span: 1074..1075,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 46,
            column: 7,
            span: 1075..1076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 46,
            column: 16,
            span: 1076..1085,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 46,
            column: 17,
            span: 1085..1086,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 1; pushnum 2; pushnum 3; return 2\"",
        ),
        position: Position {
            line: 46,
            column: 60,
            span: 1086..1129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 46,
            column: 61,
            span: 1129..1130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 47,
            column: 2,
            span: 1131..1132,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 3,
            span: 1132..1133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 47,
            column: 4,
            span: 1133..1134,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 47,
            column: 5,
            span: 1134..1135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 47,
            column: 6,
            span: 1135..1136,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 47,
            column: 8,
            span: 1137..1138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 47,
            column: 10,
            span: 1139..1140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 47,
            column: 11,
            span: 1140..1141,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 47,
            column: 12,
            span: 1141..1142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 48,
            column: 7,
            span: 1143..1149,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 48,
            column: 8,
            span: 1149..1150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 48,
            column: 9,
            span: 1150..1151,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 48,
            column: 12,
            span: 1152..1154,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 14,
            span: 1154..1156,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 48,
            column: 18,
            span: 1157..1160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 48,
            column: 20,
            span: 1161..1162,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 48,
            column: 23,
            span: 1163..1165,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 48,
            column: 25,
            span: 1165..1167,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 48,
            column: 29,
            span: 1168..1171,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 48,
            column: 33,
            span: 1172..1175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 48,
            column: 35,
            span: 1176..1177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 48,
            column: 36,
            span: 1177..1178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 51,
            column: 2,
            span: 1213..1214,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 3,
            span: 1214..1215,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 51,
            column: 4,
            span: 1215..1216,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 51,
            column: 5,
            span: 1216..1217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 51,
            column: 6,
            span: 1217..1218,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 51,
            column: 8,
            span: 1219..1220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 51,
            column: 10,
            span: 1221..1222,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 51,
            column: 11,
            span: 1222..1223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 51,
            column: 16,
            span: 1223..1228,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 51,
            column: 17,
            span: 1228..1229,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushbool 1; pushbool 2; pushbool 0; return 3\"",
        ),
        position: Position {
            line: 51,
            column: 63,
            span: 1229..1275,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 51,
            column: 64,
            span: 1275..1276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 52,
            column: 7,
            span: 1277..1283,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 52,
            column: 8,
            span: 1283..1284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 9,
            span: 1284..1285,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 52,
            column: 12,
            span: 1286..1288,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 52,
            column: 14,
            span: 1289..1290,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 52,
            column: 18,
            span: 1291..1294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 52,
            column: 20,
            span: 1295..1296,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 52,
            column: 23,
            span: 1297..1299,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 52,
            column: 28,
            span: 1300..1304,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 52,
            column: 32,
            span: 1305..1308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 52,
            column: 34,
            span: 1309..1310,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 52,
            column: 37,
            span: 1311..1313,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 52,
            column: 43,
            span: 1314..1319,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 52,
            column: 44,
            span: 1319..1320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 53,
            column: 2,
            span: 1321..1322,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 3,
            span: 1322..1323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 53,
            column: 4,
            span: 1323..1324,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 53,
            column: 5,
            span: 1324..1325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 53,
            column: 6,
            span: 1325..1326,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 53,
            column: 8,
            span: 1327..1328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 53,
            column: 10,
            span: 1329..1330,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 53,
            column: 11,
            span: 1330..1331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 53,
            column: 16,
            span: 1331..1336,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushbool 0; pushbool 10; pushnil;\\\n                      tobool -3; tobool -3; tobool -3; return 3\"",
        ),
        position: Position {
            line: 54,
            column: 65,
            span: 1336..1436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 55,
            column: 7,
            span: 1437..1443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 55,
            column: 8,
            span: 1443..1444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 55,
            column: 9,
            span: 1444..1445,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 11,
            span: 1445..1447,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 55,
            column: 16,
            span: 1447..1452,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 55,
            column: 20,
            span: 1453..1456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 55,
            column: 22,
            span: 1457..1458,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 24,
            span: 1458..1460,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 55,
            column: 28,
            span: 1460..1464,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 55,
            column: 32,
            span: 1465..1468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 55,
            column: 34,
            span: 1469..1470,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 55,
            column: 36,
            span: 1470..1472,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 55,
            column: 41,
            span: 1472..1477,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 55,
            column: 42,
            span: 1477..1478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 58,
            column: 2,
            span: 1481..1482,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 3,
            span: 1482..1483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 58,
            column: 4,
            span: 1483..1484,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 5,
            span: 1484..1485,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 58,
            column: 6,
            span: 1485..1486,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 58,
            column: 8,
            span: 1487..1488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 58,
            column: 10,
            span: 1489..1490,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 58,
            column: 11,
            span: 1490..1491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 58,
            column: 16,
            span: 1491..1496,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 58,
            column: 17,
            span: 1496..1497,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettop; return 2\"",
        ),
        position: Position {
            line: 58,
            column: 35,
            span: 1497..1515,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 36,
            span: 1515..1516,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 39,
            span: 1516..1519,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 40,
            span: 1519..1520,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 43,
            span: 1520..1523,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 44,
            span: 1523..1524,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 47,
            span: 1524..1527,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 58,
            column: 48,
            span: 1527..1528,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 58,
            column: 51,
            span: 1528..1531,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 58,
            column: 52,
            span: 1531..1532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 59,
            column: 7,
            span: 1533..1539,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 59,
            column: 8,
            span: 1539..1540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 59,
            column: 9,
            span: 1540..1541,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 59,
            column: 12,
            span: 1542..1544,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 59,
            column: 15,
            span: 1544..1547,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 59,
            column: 19,
            span: 1548..1551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 59,
            column: 21,
            span: 1552..1553,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 59,
            column: 24,
            span: 1554..1556,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 59,
            column: 26,
            span: 1556..1558,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 59,
            column: 30,
            span: 1559..1562,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 59,
            column: 34,
            span: 1563..1566,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 59,
            column: 36,
            span: 1567..1568,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 59,
            column: 37,
            span: 1568..1569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 61,
            column: 2,
            span: 1571..1572,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 61,
            column: 4,
            span: 1573..1574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 61,
            column: 9,
            span: 1575..1579,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 10,
            span: 1579..1580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 61,
            column: 11,
            span: 1580..1581,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 61,
            column: 12,
            span: 1581..1582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 61,
            column: 17,
            span: 1582..1587,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 61,
            column: 18,
            span: 1587..1588,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 5; return *\"",
        ),
        position: Position {
            line: 61,
            column: 38,
            span: 1588..1608,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 39,
            span: 1608..1609,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 41,
            span: 1609..1611,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 61,
            column: 42,
            span: 1611..1612,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 61,
            column: 44,
            span: 1612..1614,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 45,
            span: 1614..1615,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 61,
            column: 46,
            span: 1615..1616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 62,
            column: 7,
            span: 1617..1623,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 62,
            column: 8,
            span: 1623..1624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 62,
            column: 9,
            span: 1624..1625,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 10,
            span: 1625..1626,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 62,
            column: 12,
            span: 1627..1628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 62,
            column: 13,
            span: 1628..1629,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 62,
            column: 14,
            span: 1629..1630,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 15,
            span: 1629..1631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 16,
            span: 1631..1632,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 17,
            span: 1631..1633,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 62,
            column: 18,
            span: 1633..1634,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 62,
            column: 19,
            span: 1633..1635,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 62,
            column: 20,
            span: 1635..1636,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 62,
            column: 21,
            span: 1636..1637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 64,
            column: 2,
            span: 1639..1640,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 64,
            column: 4,
            span: 1641..1642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 64,
            column: 9,
            span: 1643..1647,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 10,
            span: 1647..1648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 64,
            column: 11,
            span: 1648..1649,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 64,
            column: 12,
            span: 1649..1650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 64,
            column: 17,
            span: 1650..1655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 64,
            column: 18,
            span: 1655..1656,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settop 0; settop 15; return 10\"",
        ),
        position: Position {
            line: 64,
            column: 50,
            span: 1656..1688,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 51,
            span: 1688..1689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 53,
            span: 1689..1691,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 54,
            span: 1691..1692,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 56,
            span: 1692..1694,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 64,
            column: 57,
            span: 1694..1695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 64,
            column: 60,
            span: 1695..1698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 61,
            span: 1698..1699,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 64,
            column: 62,
            span: 1699..1700,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 65,
            column: 7,
            span: 1701..1707,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 65,
            column: 8,
            span: 1707..1708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 65,
            column: 9,
            span: 1708..1709,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 65,
            column: 10,
            span: 1709..1710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 65,
            column: 11,
            span: 1710..1711,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 14,
            span: 1712..1714,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 17,
            span: 1714..1717,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 65,
            column: 21,
            span: 1718..1721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 65,
            column: 23,
            span: 1722..1723,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 65,
            column: 24,
            span: 1723..1724,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 25,
            span: 1723..1725,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 65,
            column: 26,
            span: 1725..1726,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 29,
            span: 1727..1729,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 65,
            column: 33,
            span: 1730..1733,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 65,
            column: 37,
            span: 1734..1737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 65,
            column: 39,
            span: 1738..1739,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 65,
            column: 40,
            span: 1739..1740,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 65,
            column: 42,
            span: 1739..1742,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 65,
            column: 43,
            span: 1742..1743,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 65,
            column: 46,
            span: 1744..1746,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 65,
            column: 50,
            span: 1747..1750,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 65,
            column: 51,
            span: 1750..1751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 67,
            column: 2,
            span: 1753..1754,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 67,
            column: 4,
            span: 1755..1756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 67,
            column: 9,
            span: 1757..1761,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 10,
            span: 1761..1762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 67,
            column: 11,
            span: 1762..1763,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 67,
            column: 12,
            span: 1763..1764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 67,
            column: 17,
            span: 1764..1769,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 67,
            column: 18,
            span: 1769..1770,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"remove -2; return *\"",
        ),
        position: Position {
            line: 67,
            column: 39,
            span: 1770..1791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 40,
            span: 1791..1792,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 42,
            span: 1792..1794,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 43,
            span: 1794..1795,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 45,
            span: 1795..1797,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 67,
            column: 46,
            span: 1797..1798,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 67,
            column: 48,
            span: 1798..1800,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 49,
            span: 1800..1801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 67,
            column: 50,
            span: 1801..1802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 68,
            column: 7,
            span: 1803..1809,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 68,
            column: 8,
            span: 1809..1810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 68,
            column: 9,
            span: 1810..1811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 10,
            span: 1811..1812,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 68,
            column: 12,
            span: 1813..1814,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 68,
            column: 13,
            span: 1814..1815,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 68,
            column: 14,
            span: 1815..1816,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 15,
            span: 1815..1817,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 16,
            span: 1817..1818,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 17,
            span: 1817..1819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 68,
            column: 18,
            span: 1819..1820,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 68,
            column: 19,
            span: 1819..1821,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 68,
            column: 20,
            span: 1821..1822,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 68,
            column: 21,
            span: 1822..1823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 70,
            column: 2,
            span: 1825..1826,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 70,
            column: 4,
            span: 1827..1828,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 70,
            column: 9,
            span: 1829..1833,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 10,
            span: 1833..1834,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 70,
            column: 11,
            span: 1834..1835,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 70,
            column: 12,
            span: 1835..1836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 70,
            column: 17,
            span: 1836..1841,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 70,
            column: 18,
            span: 1841..1842,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert -1; return *\"",
        ),
        position: Position {
            line: 70,
            column: 39,
            span: 1842..1863,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 40,
            span: 1863..1864,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 42,
            span: 1864..1866,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 70,
            column: 43,
            span: 1866..1867,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 70,
            column: 45,
            span: 1867..1869,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 46,
            span: 1869..1870,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 70,
            column: 47,
            span: 1870..1871,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 71,
            column: 7,
            span: 1872..1878,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 71,
            column: 8,
            span: 1878..1879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 71,
            column: 9,
            span: 1879..1880,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 10,
            span: 1880..1881,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 71,
            column: 12,
            span: 1882..1883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 71,
            column: 13,
            span: 1883..1884,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 71,
            column: 14,
            span: 1884..1885,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 71,
            column: 15,
            span: 1884..1886,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 16,
            span: 1886..1887,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 71,
            column: 17,
            span: 1886..1888,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 71,
            column: 18,
            span: 1888..1889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 71,
            column: 19,
            span: 1888..1890,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 71,
            column: 20,
            span: 1890..1891,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 71,
            column: 21,
            span: 1891..1892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 73,
            column: 2,
            span: 1894..1895,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 73,
            column: 4,
            span: 1896..1897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 73,
            column: 9,
            span: 1898..1902,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 10,
            span: 1902..1903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 73,
            column: 11,
            span: 1903..1904,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 73,
            column: 12,
            span: 1904..1905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 73,
            column: 17,
            span: 1905..1910,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 73,
            column: 18,
            span: 1910..1911,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 3; return *\"",
        ),
        position: Position {
            line: 73,
            column: 38,
            span: 1911..1931,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 39,
            span: 1931..1932,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 41,
            span: 1932..1934,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 42,
            span: 1934..1935,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 44,
            span: 1935..1937,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 45,
            span: 1937..1938,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 47,
            span: 1938..1940,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 73,
            column: 48,
            span: 1940..1941,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 73,
            column: 50,
            span: 1941..1943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 51,
            span: 1943..1944,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 73,
            column: 52,
            span: 1944..1945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 74,
            column: 7,
            span: 1946..1952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 74,
            column: 8,
            span: 1952..1953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 74,
            column: 9,
            span: 1953..1954,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 10,
            span: 1954..1955,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 74,
            column: 12,
            span: 1956..1957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 74,
            column: 13,
            span: 1957..1958,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 74,
            column: 14,
            span: 1958..1959,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 15,
            span: 1958..1960,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 16,
            span: 1960..1961,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 17,
            span: 1960..1962,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 18,
            span: 1962..1963,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 19,
            span: 1962..1964,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 20,
            span: 1964..1965,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 21,
            span: 1964..1966,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 74,
            column: 22,
            span: 1966..1967,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 74,
            column: 23,
            span: 1966..1968,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 74,
            column: 24,
            span: 1968..1969,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 74,
            column: 25,
            span: 1969..1970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 76,
            column: 2,
            span: 1972..1973,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 76,
            column: 4,
            span: 1974..1975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 76,
            column: 9,
            span: 1976..1980,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 10,
            span: 1980..1981,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 76,
            column: 11,
            span: 1981..1982,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 76,
            column: 12,
            span: 1982..1983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 76,
            column: 17,
            span: 1983..1988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 76,
            column: 18,
            span: 1988..1989,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"replace 2; return *\"",
        ),
        position: Position {
            line: 76,
            column: 39,
            span: 1989..2010,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 40,
            span: 2010..2011,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 42,
            span: 2011..2013,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 43,
            span: 2013..2014,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 45,
            span: 2014..2016,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 46,
            span: 2016..2017,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 48,
            span: 2017..2019,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 76,
            column: 49,
            span: 2019..2020,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 76,
            column: 51,
            span: 2020..2022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 52,
            span: 2022..2023,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 76,
            column: 53,
            span: 2023..2024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 77,
            column: 7,
            span: 2025..2031,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 77,
            column: 8,
            span: 2031..2032,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 77,
            column: 9,
            span: 2032..2033,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 10,
            span: 2033..2034,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 77,
            column: 12,
            span: 2035..2036,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 77,
            column: 13,
            span: 2036..2037,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 77,
            column: 14,
            span: 2037..2038,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 15,
            span: 2037..2039,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 16,
            span: 2039..2040,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 17,
            span: 2039..2041,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 18,
            span: 2041..2042,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 19,
            span: 2041..2043,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 77,
            column: 20,
            span: 2043..2044,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 77,
            column: 21,
            span: 2043..2045,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 77,
            column: 22,
            span: 2045..2046,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 77,
            column: 23,
            span: 2046..2047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 79,
            column: 2,
            span: 2049..2050,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 79,
            column: 4,
            span: 2051..2052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 79,
            column: 9,
            span: 2053..2057,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 10,
            span: 2057..2058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 79,
            column: 11,
            span: 2058..2059,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 79,
            column: 12,
            span: 2059..2060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 79,
            column: 17,
            span: 2060..2065,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 79,
            column: 18,
            span: 2065..2066,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"replace -2; return *\"",
        ),
        position: Position {
            line: 79,
            column: 40,
            span: 2066..2088,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 41,
            span: 2088..2089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 43,
            span: 2089..2091,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 44,
            span: 2091..2092,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 46,
            span: 2092..2094,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 47,
            span: 2094..2095,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 49,
            span: 2095..2097,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 79,
            column: 50,
            span: 2097..2098,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 79,
            column: 52,
            span: 2098..2100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 53,
            span: 2100..2101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 79,
            column: 54,
            span: 2101..2102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 80,
            column: 7,
            span: 2103..2109,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 80,
            column: 8,
            span: 2109..2110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 80,
            column: 9,
            span: 2110..2111,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 10,
            span: 2111..2112,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 80,
            column: 12,
            span: 2113..2114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 80,
            column: 13,
            span: 2114..2115,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 80,
            column: 14,
            span: 2115..2116,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 15,
            span: 2115..2117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 16,
            span: 2117..2118,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 17,
            span: 2117..2119,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 18,
            span: 2119..2120,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 19,
            span: 2119..2121,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 80,
            column: 20,
            span: 2121..2122,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 80,
            column: 21,
            span: 2121..2123,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 80,
            column: 22,
            span: 2123..2124,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 80,
            column: 23,
            span: 2124..2125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 82,
            column: 2,
            span: 2127..2128,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 82,
            column: 4,
            span: 2129..2130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 82,
            column: 9,
            span: 2131..2135,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 10,
            span: 2135..2136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 82,
            column: 11,
            span: 2136..2137,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 82,
            column: 12,
            span: 2137..2138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 82,
            column: 17,
            span: 2138..2143,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 82,
            column: 18,
            span: 2143..2144,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"remove 3; return *\"",
        ),
        position: Position {
            line: 82,
            column: 38,
            span: 2144..2164,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 39,
            span: 2164..2165,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 41,
            span: 2165..2167,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 42,
            span: 2167..2168,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 44,
            span: 2168..2170,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 45,
            span: 2170..2171,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 47,
            span: 2171..2173,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 82,
            column: 48,
            span: 2173..2174,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 82,
            column: 50,
            span: 2174..2176,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 51,
            span: 2176..2177,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 82,
            column: 52,
            span: 2177..2178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 83,
            column: 7,
            span: 2179..2185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 83,
            column: 8,
            span: 2185..2186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 83,
            column: 9,
            span: 2186..2187,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 10,
            span: 2187..2188,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 83,
            column: 12,
            span: 2189..2190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 83,
            column: 13,
            span: 2190..2191,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 83,
            column: 14,
            span: 2191..2192,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 15,
            span: 2191..2193,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 16,
            span: 2193..2194,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 17,
            span: 2193..2195,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 18,
            span: 2195..2196,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 19,
            span: 2195..2197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 83,
            column: 20,
            span: 2197..2198,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 83,
            column: 21,
            span: 2197..2199,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 83,
            column: 22,
            span: 2199..2200,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 83,
            column: 23,
            span: 2200..2201,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 85,
            column: 2,
            span: 2203..2204,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 85,
            column: 4,
            span: 2205..2206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 85,
            column: 9,
            span: 2207..2211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 10,
            span: 2211..2212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 85,
            column: 11,
            span: 2212..2213,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 85,
            column: 12,
            span: 2213..2214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 85,
            column: 17,
            span: 2214..2219,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 85,
            column: 18,
            span: 2219..2220,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"copy 3 4; return *\"",
        ),
        position: Position {
            line: 85,
            column: 38,
            span: 2220..2240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 39,
            span: 2240..2241,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 41,
            span: 2241..2243,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 42,
            span: 2243..2244,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 44,
            span: 2244..2246,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 45,
            span: 2246..2247,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 47,
            span: 2247..2249,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 85,
            column: 48,
            span: 2249..2250,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 85,
            column: 50,
            span: 2250..2252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 51,
            span: 2252..2253,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 85,
            column: 52,
            span: 2253..2254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 86,
            column: 7,
            span: 2255..2261,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 86,
            column: 8,
            span: 2261..2262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 86,
            column: 9,
            span: 2262..2263,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 10,
            span: 2263..2264,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 86,
            column: 12,
            span: 2265..2266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 86,
            column: 13,
            span: 2266..2267,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 86,
            column: 14,
            span: 2267..2268,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 15,
            span: 2267..2269,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 16,
            span: 2269..2270,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 17,
            span: 2269..2271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 18,
            span: 2271..2272,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 19,
            span: 2271..2273,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 20,
            span: 2273..2274,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 21,
            span: 2273..2275,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 86,
            column: 22,
            span: 2275..2276,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 86,
            column: 23,
            span: 2275..2277,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 86,
            column: 24,
            span: 2277..2278,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 86,
            column: 25,
            span: 2278..2279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 88,
            column: 2,
            span: 2281..2282,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 88,
            column: 4,
            span: 2283..2284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 88,
            column: 9,
            span: 2285..2289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 10,
            span: 2289..2290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 88,
            column: 11,
            span: 2290..2291,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 88,
            column: 12,
            span: 2291..2292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 88,
            column: 17,
            span: 2292..2297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 88,
            column: 18,
            span: 2297..2298,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"copy -3 -1; return *\"",
        ),
        position: Position {
            line: 88,
            column: 40,
            span: 2298..2320,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 41,
            span: 2320..2321,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 43,
            span: 2321..2323,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 44,
            span: 2323..2324,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 46,
            span: 2324..2326,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 47,
            span: 2326..2327,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 49,
            span: 2327..2329,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 88,
            column: 50,
            span: 2329..2330,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 88,
            column: 52,
            span: 2330..2332,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 53,
            span: 2332..2333,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 88,
            column: 54,
            span: 2333..2334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 89,
            column: 7,
            span: 2335..2341,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 89,
            column: 8,
            span: 2341..2342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 89,
            column: 9,
            span: 2342..2343,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 10,
            span: 2343..2344,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 89,
            column: 12,
            span: 2345..2346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 89,
            column: 13,
            span: 2346..2347,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 89,
            column: 14,
            span: 2347..2348,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 15,
            span: 2347..2349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 16,
            span: 2349..2350,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 17,
            span: 2349..2351,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 18,
            span: 2351..2352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 19,
            span: 2351..2353,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 20,
            span: 2353..2354,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 21,
            span: 2353..2355,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 89,
            column: 22,
            span: 2355..2356,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 89,
            column: 23,
            span: 2355..2357,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 89,
            column: 24,
            span: 2357..2358,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 89,
            column: 25,
            span: 2358..2359,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 91,
            column: 3,
            span: 2361..2363,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 92,
            column: 8,
            span: 2388..2393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 92,
            column: 10,
            span: 2394..2395,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 92,
            column: 12,
            span: 2396..2397,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 92,
            column: 14,
            span: 2398..2399,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 16,
            span: 2398..2401,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 17,
            span: 2401..2402,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 20,
            span: 2402..2405,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 21,
            span: 2405..2406,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 24,
            span: 2406..2409,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 25,
            span: 2409..2410,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 28,
            span: 2410..2413,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 29,
            span: 2413..2414,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 32,
            span: 2414..2417,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 92,
            column: 33,
            span: 2417..2418,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 92,
            column: 36,
            span: 2418..2421,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 92,
            column: 37,
            span: 2421..2422,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 93,
            column: 6,
            span: 2425..2428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 93,
            column: 8,
            span: 2429..2430,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 93,
            column: 10,
            span: 2431..2432,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 93,
            column: 12,
            span: 2433..2434,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 13,
            span: 2433..2435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 93,
            column: 14,
            span: 2435..2436,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 93,
            column: 16,
            span: 2436..2438,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 93,
            column: 0,
            span: 2439..2441,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 94,
            column: 10,
            span: 2446..2451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 94,
            column: 12,
            span: 2452..2453,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 94,
            column: 14,
            span: 2454..2455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 94,
            column: 21,
            span: 2456..2462,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 94,
            column: 22,
            span: 2462..2463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 94,
            column: 28,
            span: 2463..2469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 94,
            column: 29,
            span: 2469..2470,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate 2 %d; return 7\"",
        ),
        position: Position {
            line: 94,
            column: 52,
            span: 2470..2493,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 94,
            column: 53,
            span: 2493..2494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 94,
            column: 55,
            span: 2495..2496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 94,
            column: 56,
            span: 2496..2497,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 95,
            column: 10,
            span: 2502..2507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 95,
            column: 13,
            span: 2508..2510,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 95,
            column: 15,
            span: 2511..2512,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 95,
            column: 20,
            span: 2513..2517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 21,
            span: 2517..2518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 95,
            column: 22,
            span: 2518..2519,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 95,
            column: 23,
            span: 2519..2520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 95,
            column: 28,
            span: 2520..2525,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 95,
            column: 29,
            span: 2525..2526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 95,
            column: 30,
            span: 2526..2527,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 31,
            span: 2527..2528,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 34,
            span: 2528..2531,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 35,
            span: 2531..2532,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 38,
            span: 2532..2535,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 39,
            span: 2535..2536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 42,
            span: 2536..2539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 43,
            span: 2539..2540,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 46,
            span: 2540..2543,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 47,
            span: 2543..2544,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 50,
            span: 2544..2547,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 95,
            column: 51,
            span: 2547..2548,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "60",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 95,
            column: 54,
            span: 2548..2551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 55,
            span: 2551..2552,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 95,
            column: 56,
            span: 2552..2553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 96,
            column: 11,
            span: 2558..2564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 96,
            column: 12,
            span: 2564..2565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        position: Position {
            line: 96,
            column: 14,
            span: 2565..2567,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 96,
            column: 15,
            span: 2567..2568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 96,
            column: 17,
            span: 2569..2570,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 96,
            column: 18,
            span: 2570..2571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 97,
            column: 10,
            span: 2576..2581,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 11,
            span: 2581..2582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 97,
            column: 17,
            span: 2582..2588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 18,
            span: 2588..2589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 97,
            column: 19,
            span: 2589..2590,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 20,
            span: 2590..2591,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 97,
            column: 22,
            span: 2591..2593,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 97,
            column: 23,
            span: 2593..2594,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 97,
            column: 29,
            span: 2595..2600,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 97,
            column: 30,
            span: 2600..2601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 97,
            column: 36,
            span: 2601..2607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 97,
            column: 37,
            span: 2607..2608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 97,
            column: 38,
            span: 2608..2609,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 39,
            span: 2609..2610,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 97,
            column: 40,
            span: 2610..2611,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 98,
            column: 0,
            span: 2614..2617,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 100,
            column: 4,
            span: 2621..2622,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 100,
            column: 6,
            span: 2623..2624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 100,
            column: 11,
            span: 2625..2629,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 12,
            span: 2629..2630,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 100,
            column: 13,
            span: 2630..2631,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 100,
            column: 14,
            span: 2631..2632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 100,
            column: 19,
            span: 2632..2637,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 100,
            column: 20,
            span: 2637..2638,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate -2 1; return *\"",
        ),
        position: Position {
            line: 100,
            column: 43,
            span: 2638..2661,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 44,
            span: 2661..2662,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 47,
            span: 2662..2665,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 48,
            span: 2665..2666,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 51,
            span: 2666..2669,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 52,
            span: 2669..2670,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 55,
            span: 2670..2673,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 100,
            column: 56,
            span: 2673..2674,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 100,
            column: 59,
            span: 2674..2677,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 60,
            span: 2677..2678,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 100,
            column: 61,
            span: 2678..2679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 101,
            column: 9,
            span: 2682..2688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 101,
            column: 10,
            span: 2688..2689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 101,
            column: 11,
            span: 2689..2690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 12,
            span: 2690..2691,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 101,
            column: 14,
            span: 2692..2693,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 16,
            span: 2692..2695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 17,
            span: 2695..2696,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 20,
            span: 2696..2699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 21,
            span: 2699..2700,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 24,
            span: 2700..2703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 101,
            column: 25,
            span: 2703..2704,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 101,
            column: 28,
            span: 2704..2707,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 101,
            column: 29,
            span: 2707..2708,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 101,
            column: 30,
            span: 2708..2709,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 102,
            column: 4,
            span: 2712..2713,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 102,
            column: 6,
            span: 2714..2715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 102,
            column: 11,
            span: 2716..2720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 12,
            span: 2720..2721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 102,
            column: 13,
            span: 2721..2722,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 102,
            column: 14,
            span: 2722..2723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 102,
            column: 19,
            span: 2723..2728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 102,
            column: 20,
            span: 2728..2729,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate -2 -1; return *\"",
        ),
        position: Position {
            line: 102,
            column: 44,
            span: 2729..2753,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 45,
            span: 2753..2754,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 48,
            span: 2754..2757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 49,
            span: 2757..2758,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 52,
            span: 2758..2761,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 53,
            span: 2761..2762,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 56,
            span: 2762..2765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 102,
            column: 57,
            span: 2765..2766,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 102,
            column: 60,
            span: 2766..2769,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 61,
            span: 2769..2770,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 102,
            column: 62,
            span: 2770..2771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 103,
            column: 9,
            span: 2774..2780,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 103,
            column: 10,
            span: 2780..2781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 103,
            column: 11,
            span: 2781..2782,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 12,
            span: 2782..2783,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 103,
            column: 14,
            span: 2784..2785,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 16,
            span: 2784..2787,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 17,
            span: 2787..2788,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 20,
            span: 2788..2791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 21,
            span: 2791..2792,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 24,
            span: 2792..2795,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 103,
            column: 25,
            span: 2795..2796,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 103,
            column: 28,
            span: 2796..2799,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 103,
            column: 29,
            span: 2799..2800,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 103,
            column: 30,
            span: 2800..2801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 106,
            column: 4,
            span: 2828..2829,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 106,
            column: 6,
            span: 2830..2831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 106,
            column: 11,
            span: 2832..2836,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 12,
            span: 2836..2837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 106,
            column: 13,
            span: 2837..2838,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 106,
            column: 14,
            span: 2838..2839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 106,
            column: 19,
            span: 2839..2844,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 106,
            column: 20,
            span: 2844..2845,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate -1 0; return *\"",
        ),
        position: Position {
            line: 106,
            column: 43,
            span: 2845..2868,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 44,
            span: 2868..2869,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 47,
            span: 2869..2872,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 48,
            span: 2872..2873,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 51,
            span: 2873..2876,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 52,
            span: 2876..2877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 55,
            span: 2877..2880,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 106,
            column: 56,
            span: 2880..2881,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 106,
            column: 59,
            span: 2881..2884,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 60,
            span: 2884..2885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 106,
            column: 61,
            span: 2885..2886,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 107,
            column: 9,
            span: 2889..2895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 107,
            column: 10,
            span: 2895..2896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 107,
            column: 11,
            span: 2896..2897,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 12,
            span: 2897..2898,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 107,
            column: 14,
            span: 2899..2900,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 16,
            span: 2899..2902,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 17,
            span: 2902..2903,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 20,
            span: 2903..2906,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 21,
            span: 2906..2907,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 24,
            span: 2907..2910,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 107,
            column: 25,
            span: 2910..2911,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 107,
            column: 28,
            span: 2911..2914,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 107,
            column: 29,
            span: 2914..2915,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 107,
            column: 30,
            span: 2915..2916,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 108,
            column: 4,
            span: 2919..2920,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 108,
            column: 6,
            span: 2921..2922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 108,
            column: 11,
            span: 2923..2927,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 12,
            span: 2927..2928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 108,
            column: 13,
            span: 2928..2929,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 108,
            column: 14,
            span: 2929..2930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 108,
            column: 19,
            span: 2930..2935,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 108,
            column: 20,
            span: 2935..2936,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate -1 1; return *\"",
        ),
        position: Position {
            line: 108,
            column: 43,
            span: 2936..2959,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 44,
            span: 2959..2960,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 47,
            span: 2960..2963,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 48,
            span: 2963..2964,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 51,
            span: 2964..2967,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 52,
            span: 2967..2968,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 55,
            span: 2968..2971,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 108,
            column: 56,
            span: 2971..2972,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 108,
            column: 59,
            span: 2972..2975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 60,
            span: 2975..2976,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 108,
            column: 61,
            span: 2976..2977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 109,
            column: 9,
            span: 2980..2986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 109,
            column: 10,
            span: 2986..2987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 109,
            column: 11,
            span: 2987..2988,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 12,
            span: 2988..2989,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 109,
            column: 14,
            span: 2990..2991,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 16,
            span: 2990..2993,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 17,
            span: 2993..2994,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 20,
            span: 2994..2997,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 21,
            span: 2997..2998,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 24,
            span: 2998..3001,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 109,
            column: 25,
            span: 3001..3002,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 109,
            column: 28,
            span: 3002..3005,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 109,
            column: 29,
            span: 3005..3006,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 109,
            column: 30,
            span: 3006..3007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 110,
            column: 4,
            span: 3010..3011,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 110,
            column: 6,
            span: 3012..3013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 110,
            column: 11,
            span: 3014..3018,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 12,
            span: 3018..3019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 110,
            column: 13,
            span: 3019..3020,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 110,
            column: 14,
            span: 3020..3021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 110,
            column: 19,
            span: 3021..3026,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 110,
            column: 20,
            span: 3026..3027,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rotate 5 -1; return *\"",
        ),
        position: Position {
            line: 110,
            column: 43,
            span: 3027..3050,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 44,
            span: 3050..3051,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 47,
            span: 3051..3054,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 48,
            span: 3054..3055,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 51,
            span: 3055..3058,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 52,
            span: 3058..3059,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 55,
            span: 3059..3062,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 110,
            column: 56,
            span: 3062..3063,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 110,
            column: 59,
            span: 3063..3066,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 60,
            span: 3066..3067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 110,
            column: 61,
            span: 3067..3068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 111,
            column: 9,
            span: 3071..3077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 111,
            column: 10,
            span: 3077..3078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 111,
            column: 11,
            span: 3078..3079,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 12,
            span: 3079..3080,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 111,
            column: 14,
            span: 3081..3082,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 16,
            span: 3081..3084,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 17,
            span: 3084..3085,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 20,
            span: 3085..3088,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 21,
            span: 3088..3089,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 24,
            span: 3089..3092,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 111,
            column: 25,
            span: 3092..3093,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 111,
            column: 28,
            span: 3093..3096,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 111,
            column: 29,
            span: 3096..3097,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 111,
            column: 30,
            span: 3097..3098,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 112,
            column: 0,
            span: 3099..3102,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 115,
            column: 0,
            span: 3145..3147,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 116,
            column: 8,
            span: 3150..3155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 116,
            column: 10,
            span: 3156..3157,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 116,
            column: 12,
            span: 3158..3159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 116,
            column: 14,
            span: 3160..3161,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 116,
            column: 15,
            span: 3161..3162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 116,
            column: 24,
            span: 3162..3171,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    getglobal error\n    pushstring bola\n    pcall 1 1 1   # call 'error' with given handler\n    pushstatus\n    return 2     # return error message and status\n  ]]",
        ),
        position: Position {
            line: 122,
            column: 5,
            span: 3171..3336,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 124,
            column: 8,
            span: 3340..3345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 124,
            column: 12,
            span: 3346..3349,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 124,
            column: 13,
            span: 3349..3350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 124,
            column: 16,
            span: 3351..3353,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 124,
            column: 18,
            span: 3354..3355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 124,
            column: 20,
            span: 3356..3357,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 124,
            column: 21,
            span: 3357..3358,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 124,
            column: 22,
            span: 3358..3359,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 124,
            column: 23,
            span: 3359..3360,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 124,
            column: 24,
            span: 3360..3361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 125,
            column: 9,
            span: 3387..3393,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 10,
            span: 3393..3394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 125,
            column: 12,
            span: 3394..3396,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 125,
            column: 15,
            span: 3397..3399,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ERRERR\"",
        ),
        position: Position {
            line: 125,
            column: 24,
            span: 3400..3408,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 125,
            column: 28,
            span: 3409..3412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 125,
            column: 35,
            span: 3413..3419,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 125,
            column: 36,
            span: 3419..3420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 125,
            column: 40,
            span: 3420..3424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 125,
            column: 41,
            span: 3424..3425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 125,
            column: 44,
            span: 3425..3428,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 125,
            column: 45,
            span: 3428..3429,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error handling\"",
        ),
        position: Position {
            line: 125,
            column: 62,
            span: 3430..3446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 63,
            span: 3446..3447,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 125,
            column: 64,
            span: 3447..3448,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 126,
            column: 8,
            span: 3451..3456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 126,
            column: 12,
            span: 3457..3460,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 126,
            column: 13,
            span: 3460..3461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 126,
            column: 16,
            span: 3462..3464,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 126,
            column: 18,
            span: 3465..3466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 126,
            column: 20,
            span: 3467..3468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 126,
            column: 21,
            span: 3468..3469,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 126,
            column: 24,
            span: 3469..3472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 126,
            column: 25,
            span: 3472..3473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 127,
            column: 9,
            span: 3499..3505,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 10,
            span: 3505..3506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 127,
            column: 12,
            span: 3506..3508,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 127,
            column: 15,
            span: 3509..3511,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ERRERR\"",
        ),
        position: Position {
            line: 127,
            column: 24,
            span: 3512..3520,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 127,
            column: 28,
            span: 3521..3524,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 127,
            column: 35,
            span: 3525..3531,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 127,
            column: 36,
            span: 3531..3532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 127,
            column: 40,
            span: 3532..3536,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 127,
            column: 41,
            span: 3536..3537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 127,
            column: 44,
            span: 3537..3540,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 127,
            column: 45,
            span: 3540..3541,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error handling\"",
        ),
        position: Position {
            line: 127,
            column: 62,
            span: 3542..3558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 63,
            span: 3558..3559,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 127,
            column: 64,
            span: 3559..3560,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 129,
            column: 8,
            span: 3564..3569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 129,
            column: 10,
            span: 3570..3571,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 12,
            span: 3572..3573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 129,
            column: 25,
            span: 3574..3586,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 26,
            span: 3586..3587,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 129,
            column: 27,
            span: 3587..3588,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 129,
            column: 28,
            span: 3588..3589,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 29,
            span: 3589..3590,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 129,
            column: 31,
            span: 3591..3592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        position: Position {
            line: 129,
            column: 37,
            span: 3592..3598,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 129,
            column: 39,
            span: 3599..3600,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 129,
            column: 48,
            span: 3601..3609,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 50,
            span: 3610..3611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 129,
            column: 51,
            span: 3611..3612,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 129,
            column: 52,
            span: 3612..3613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 129,
            column: 54,
            span: 3614..3615,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 55,
            span: 3615..3616,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 129,
            column: 62,
            span: 3617..3623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 129,
            column: 64,
            span: 3624..3625,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 129,
            column: 65,
            span: 3625..3626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upper",
        ),
        position: Position {
            line: 129,
            column: 70,
            span: 3626..3631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 129,
            column: 71,
            span: 3631..3632,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 72,
            span: 3632..3633,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 129,
            column: 76,
            span: 3634..3637,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 129,
            column: 77,
            span: 3637..3638,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 129,
            column: 78,
            span: 3638..3639,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 130,
            column: 8,
            span: 3642..3647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 130,
            column: 12,
            span: 3648..3651,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 130,
            column: 13,
            span: 3651..3652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 130,
            column: 16,
            span: 3653..3655,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 130,
            column: 18,
            span: 3656..3657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 130,
            column: 20,
            span: 3658..3659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 130,
            column: 21,
            span: 3659..3660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 130,
            column: 22,
            span: 3660..3661,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 130,
            column: 23,
            span: 3661..3662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 131,
            column: 9,
            span: 3687..3693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 131,
            column: 10,
            span: 3693..3694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        position: Position {
            line: 131,
            column: 12,
            span: 3694..3696,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 131,
            column: 15,
            span: 3697..3699,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ERRRUN\"",
        ),
        position: Position {
            line: 131,
            column: 24,
            span: 3700..3708,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 131,
            column: 28,
            span: 3709..3712,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 131,
            column: 32,
            span: 3713..3716,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 131,
            column: 35,
            span: 3717..3719,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"BOLA\"",
        ),
        position: Position {
            line: 131,
            column: 42,
            span: 3720..3726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 131,
            column: 43,
            span: 3726..3727,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 132,
            column: 0,
            span: 3728..3731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 134,
            column: 2,
            span: 3733..3734,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 134,
            column: 4,
            span: 3735..3736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 134,
            column: 9,
            span: 3737..3741,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 10,
            span: 3741..3742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 134,
            column: 11,
            span: 3742..3743,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 134,
            column: 12,
            span: 3743..3744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 134,
            column: 17,
            span: 3744..3749,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 134,
            column: 18,
            span: 3749..3750,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 3; pushvalue 3; remove 3; pushvalue 2; remove 2; \\\n                  insert 2; pushvalue 1; remove 1; insert 1; \\\n      insert -2; pushvalue -2; remove -3; return *\"",
        ),
        position: Position {
            line: 136,
            column: 52,
            span: 3750..3923,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 136,
            column: 53,
            span: 3923..3924,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 8,
            span: 3930..3932,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 9,
            span: 3932..3933,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 11,
            span: 3933..3935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 12,
            span: 3935..3936,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 14,
            span: 3936..3938,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 15,
            span: 3938..3939,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 17,
            span: 3939..3941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 18,
            span: 3941..3942,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 21,
            span: 3942..3945,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 22,
            span: 3945..3946,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 25,
            span: 3946..3949,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 137,
            column: 26,
            span: 3949..3950,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 137,
            column: 29,
            span: 3950..3953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 30,
            span: 3953..3954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 137,
            column: 31,
            span: 3954..3955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 138,
            column: 7,
            span: 3956..3962,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 138,
            column: 8,
            span: 3962..3963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 138,
            column: 9,
            span: 3963..3964,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 10,
            span: 3964..3965,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 138,
            column: 12,
            span: 3966..3967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 138,
            column: 13,
            span: 3967..3968,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 138,
            column: 14,
            span: 3968..3969,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 15,
            span: 3968..3970,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 16,
            span: 3970..3971,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 17,
            span: 3970..3972,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 18,
            span: 3972..3973,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 19,
            span: 3972..3974,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 20,
            span: 3974..3975,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 21,
            span: 3974..3976,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 22,
            span: 3976..3977,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 23,
            span: 3976..3978,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 24,
            span: 3978..3979,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 26,
            span: 3978..3981,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 27,
            span: 3981..3982,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 29,
            span: 3981..3984,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 138,
            column: 30,
            span: 3984..3985,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 138,
            column: 32,
            span: 3984..3987,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 138,
            column: 33,
            span: 3987..3988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 138,
            column: 34,
            span: 3988..3989,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 140,
            column: 2,
            span: 3991..3992,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 140,
            column: 4,
            span: 3993..3994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 140,
            column: 9,
            span: 3995..3999,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 10,
            span: 3999..4000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 140,
            column: 11,
            span: 4000..4001,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 140,
            column: 12,
            span: 4001..4002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 140,
            column: 17,
            span: 4002..4007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 140,
            column: 18,
            span: 4007..4008,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat 5; return *\"",
        ),
        position: Position {
            line: 140,
            column: 38,
            span: 4008..4028,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 39,
            span: 4028..4029,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 140,
            column: 45,
            span: 4030..4035,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 46,
            span: 4035..4036,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 48,
            span: 4036..4038,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 49,
            span: 4038..4039,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 51,
            span: 4039..4041,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 52,
            span: 4041..4042,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        position: Position {
            line: 140,
            column: 59,
            span: 4043..4049,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 140,
            column: 60,
            span: 4049..4050,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 140,
            column: 63,
            span: 4050..4053,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 64,
            span: 4053..4054,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 140,
            column: 65,
            span: 4054..4055,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 141,
            column: 7,
            span: 4056..4062,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 141,
            column: 8,
            span: 4062..4063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 141,
            column: 9,
            span: 4063..4064,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 10,
            span: 4064..4065,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 141,
            column: 12,
            span: 4066..4067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 141,
            column: 13,
            span: 4067..4068,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 141,
            column: 14,
            span: 4068..4069,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 141,
            column: 15,
            span: 4068..4070,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 141,
            column: 16,
            span: 4070..4071,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo23joao12\"",
        ),
        position: Position {
            line: 141,
            column: 29,
            span: 4071..4084,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 141,
            column: 30,
            span: 4084..4085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 141,
            column: 31,
            span: 4085..4086,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 144,
            column: 2,
            span: 4107..4108,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 144,
            column: 4,
            span: 4109..4110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 144,
            column: 9,
            span: 4111..4115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 10,
            span: 4115..4116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 144,
            column: 11,
            span: 4116..4117,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 144,
            column: 12,
            span: 4117..4118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 144,
            column: 17,
            span: 4118..4123,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 144,
            column: 18,
            span: 4123..4124,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"call 2,-1; return *\"",
        ),
        position: Position {
            line: 144,
            column: 39,
            span: 4124..4145,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 144,
            column: 40,
            span: 4145..4146,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 145,
            column: 14,
            span: 4152..4160,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 145,
            column: 16,
            span: 4161..4162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 145,
            column: 17,
            span: 4162..4163,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 18,
            span: 4163..4164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 145,
            column: 19,
            span: 4164..4165,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 20,
            span: 4165..4166,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 145,
            column: 27,
            span: 4167..4173,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 29,
            span: 4173..4175,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 30,
            span: 4175..4176,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 31,
            span: 4175..4177,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 32,
            span: 4177..4178,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 33,
            span: 4177..4179,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 34,
            span: 4179..4180,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 145,
            column: 35,
            span: 4179..4181,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 36,
            span: 4181..4182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 145,
            column: 37,
            span: 4182..4183,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 38,
            span: 4183..4184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 145,
            column: 39,
            span: 4184..4185,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 145,
            column: 43,
            span: 4186..4189,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 44,
            span: 4189..4190,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 145,
            column: 50,
            span: 4191..4196,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 145,
            column: 51,
            span: 4196..4197,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        position: Position {
            line: 145,
            column: 58,
            span: 4198..4204,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 59,
            span: 4204..4205,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 145,
            column: 60,
            span: 4205..4206,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 146,
            column: 7,
            span: 4207..4213,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 146,
            column: 8,
            span: 4213..4214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 146,
            column: 9,
            span: 4214..4215,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 10,
            span: 4215..4216,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 146,
            column: 12,
            span: 4217..4218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 146,
            column: 13,
            span: 4218..4219,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 146,
            column: 14,
            span: 4219..4220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 15,
            span: 4219..4221,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 16,
            span: 4221..4222,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 17,
            span: 4221..4223,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 18,
            span: 4223..4224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 19,
            span: 4223..4225,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 20,
            span: 4225..4226,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 21,
            span: 4225..4227,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 22,
            span: 4227..4228,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 146,
            column: 23,
            span: 4227..4229,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 24,
            span: 4229..4230,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 146,
            column: 29,
            span: 4230..4235,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 146,
            column: 30,
            span: 4235..4236,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"joao\"",
        ),
        position: Position {
            line: 146,
            column: 37,
            span: 4237..4243,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 146,
            column: 38,
            span: 4243..4244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 146,
            column: 39,
            span: 4244..4245,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 148,
            column: 3,
            span: 4247..4249,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 149,
            column: 8,
            span: 4313..4318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 149,
            column: 10,
            span: 4319..4320,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 149,
            column: 12,
            span: 4321..4322,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 149,
            column: 14,
            span: 4323..4324,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 149,
            column: 15,
            span: 4324..4325,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 150,
            column: 6,
            span: 4328..4331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 150,
            column: 8,
            span: 4332..4333,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 9,
            span: 4333..4334,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 10,
            span: 4333..4335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 150,
            column: 11,
            span: 4335..4336,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 15,
            span: 4335..4340,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 150,
            column: 18,
            span: 4341..4343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 150,
            column: 20,
            span: 4344..4345,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 150,
            column: 21,
            span: 4345..4346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 150,
            column: 22,
            span: 4346..4347,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 150,
            column: 23,
            span: 4347..4348,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 25,
            span: 4349..4350,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 150,
            column: 30,
            span: 4351..4355,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 150,
            column: 34,
            span: 4356..4359,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 150,
            column: 35,
            span: 4359..4360,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 150,
            column: 37,
            span: 4361..4362,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 150,
            column: 38,
            span: 4362..4363,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "999",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 41,
            span: 4362..4366,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 150,
            column: 42,
            span: 4366..4367,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 150,
            column: 44,
            span: 4368..4369,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 150,
            column: 0,
            span: 4369..4372,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 151,
            column: 8,
            span: 4375..4380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 151,
            column: 10,
            span: 4381..4382,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 151,
            column: 12,
            span: 4383..4384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 151,
            column: 14,
            span: 4385..4386,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 151,
            column: 15,
            span: 4386..4387,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 151,
            column: 20,
            span: 4387..4392,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 151,
            column: 21,
            span: 4392..4393,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pcall 1 -1 0; pop 1; tostring -1; return 1]]",
        ),
        position: Position {
            line: 151,
            column: 67,
            span: 4393..4439,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 151,
            column: 68,
            span: 4439..4440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 152,
            column: 26,
            span: 4461..4466,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 152,
            column: 27,
            span: 4466..4467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        position: Position {
            line: 152,
            column: 33,
            span: 4467..4473,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 152,
            column: 34,
            span: 4473..4474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 152,
            column: 36,
            span: 4475..4476,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 152,
            column: 37,
            span: 4476..4477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 153,
            column: 9,
            span: 4480..4486,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 153,
            column: 10,
            span: 4486..4487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 153,
            column: 11,
            span: 4487..4488,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 153,
            column: 14,
            span: 4489..4491,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        position: Position {
            line: 153,
            column: 19,
            span: 4492..4496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 153,
            column: 20,
            span: 4496..4497,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 154,
            column: 0,
            span: 4498..4501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 158,
            column: 3,
            span: 4523..4525,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 4,
            span: 4525..4526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 158,
            column: 5,
            span: 4526..4527,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 158,
            column: 7,
            span: 4528..4529,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 158,
            column: 10,
            span: 4529..4532,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 158,
            column: 11,
            span: 4532..4533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 158,
            column: 14,
            span: 4534..4536,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 158,
            column: 15,
            span: 4536..4537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 158,
            column: 16,
            span: 4537..4538,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 158,
            column: 18,
            span: 4539..4540,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a31\"",
        ),
        position: Position {
            line: 158,
            column: 24,
            span: 4541..4546,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 159,
            column: 6,
            span: 4547..4552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 159,
            column: 8,
            span: 4553..4554,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 159,
            column: 10,
            span: 4555..4556,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 159,
            column: 12,
            span: 4557..4558,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 159,
            column: 13,
            span: 4558..4559,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 159,
            column: 14,
            span: 4559..4560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 159,
            column: 19,
            span: 4560..4565,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  getglobal a;\n  getglobal b;\n  getglobal b;\n  setglobal a;\n  return *\n]]",
        ),
        position: Position {
            line: 165,
            column: 3,
            span: 4565..4641,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 165,
            column: 4,
            span: 4641..4642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 166,
            column: 7,
            span: 4643..4649,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 166,
            column: 8,
            span: 4649..4650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 166,
            column: 9,
            span: 4650..4651,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 166,
            column: 10,
            span: 4651..4652,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 11,
            span: 4651..4653,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 166,
            column: 12,
            span: 4653..4654,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 166,
            column: 15,
            span: 4655..4657,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 18,
            span: 4657..4660,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 166,
            column: 22,
            span: 4661..4664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 166,
            column: 24,
            span: 4665..4666,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 166,
            column: 25,
            span: 4666..4667,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 26,
            span: 4666..4668,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 166,
            column: 27,
            span: 4668..4669,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 166,
            column: 30,
            span: 4670..4672,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a31\"",
        ),
        position: Position {
            line: 166,
            column: 36,
            span: 4673..4678,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 166,
            column: 40,
            span: 4679..4682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 166,
            column: 42,
            span: 4683..4684,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 166,
            column: 43,
            span: 4684..4685,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 166,
            column: 44,
            span: 4684..4686,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 166,
            column: 45,
            span: 4686..4687,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 166,
            column: 48,
            span: 4688..4690,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 166,
            column: 52,
            span: 4691..4694,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 166,
            column: 56,
            span: 4695..4698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 166,
            column: 59,
            span: 4699..4701,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 166,
            column: 60,
            span: 4701..4702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 166,
            column: 61,
            span: 4702..4703,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 166,
            column: 64,
            span: 4704..4706,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a31\"",
        ),
        position: Position {
            line: 166,
            column: 70,
            span: 4707..4712,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 166,
            column: 71,
            span: 4712..4713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 170,
            column: 7,
            span: 4733..4739,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 8,
            span: 4739..4740,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 170,
            column: 9,
            span: 4740..4741,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 170,
            column: 10,
            span: 4741..4742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 170,
            column: 15,
            span: 4742..4747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 170,
            column: 16,
            span: 4747..4748,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum 20; arith /; return 1\"",
        ),
        position: Position {
            line: 170,
            column: 59,
            span: 4748..4791,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 60,
            span: 4791..4792,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 170,
            column: 63,
            span: 4793..4795,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 170,
            column: 67,
            span: 4795..4799,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 170,
            column: 68,
            span: 4799..4800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 171,
            column: 7,
            span: 4801..4807,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 8,
            span: 4807..4808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 171,
            column: 9,
            span: 4808..4809,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 171,
            column: 10,
            span: 4809..4810,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 171,
            column: 15,
            span: 4810..4815,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 171,
            column: 16,
            span: 4815..4816,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum 20; arith -; return 1\"",
        ),
        position: Position {
            line: 171,
            column: 59,
            span: 4816..4859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 60,
            span: 4859..4860,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 171,
            column: 63,
            span: 4861..4863,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 171,
            column: 65,
            span: 4864..4865,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 171,
            column: 67,
            span: 4864..4867,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 171,
            column: 68,
            span: 4867..4868,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 172,
            column: 7,
            span: 4869..4875,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 8,
            span: 4875..4876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 172,
            column: 9,
            span: 4876..4877,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 172,
            column: 10,
            span: 4877..4878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 172,
            column: 15,
            span: 4878..4883,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 172,
            column: 16,
            span: 4883..4884,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum -20; arith *; return 1\"",
        ),
        position: Position {
            line: 172,
            column: 60,
            span: 4884..4928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 61,
            span: 4928..4929,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 172,
            column: 64,
            span: 4930..4932,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 172,
            column: 66,
            span: 4933..4934,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 172,
            column: 69,
            span: 4933..4937,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 172,
            column: 70,
            span: 4937..4938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 173,
            column: 7,
            span: 4939..4945,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 8,
            span: 4945..4946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 173,
            column: 9,
            span: 4946..4947,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 173,
            column: 10,
            span: 4947..4948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 173,
            column: 15,
            span: 4948..4953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 173,
            column: 16,
            span: 4953..4954,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushnum 3; arith ^; return 1\"",
        ),
        position: Position {
            line: 173,
            column: 58,
            span: 4954..4996,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 59,
            span: 4996..4997,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 173,
            column: 62,
            span: 4998..5000,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 173,
            column: 67,
            span: 5000..5005,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 173,
            column: 68,
            span: 5005..5006,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 174,
            column: 7,
            span: 5007..5013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 8,
            span: 5013..5014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 174,
            column: 9,
            span: 5014..5015,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 174,
            column: 10,
            span: 5015..5016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 174,
            column: 15,
            span: 5016..5021,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 174,
            column: 16,
            span: 5021..5022,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushstring 20; arith /; return 1\"",
        ),
        position: Position {
            line: 174,
            column: 62,
            span: 5022..5068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 63,
            span: 5068..5069,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 174,
            column: 66,
            span: 5070..5072,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        position: Position {
            line: 174,
            column: 70,
            span: 5072..5076,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 174,
            column: 71,
            span: 5076..5077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 175,
            column: 7,
            span: 5078..5084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 8,
            span: 5084..5085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 175,
            column: 9,
            span: 5085..5086,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 175,
            column: 10,
            span: 5086..5087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 175,
            column: 15,
            span: 5087..5092,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 175,
            column: 16,
            span: 5092..5093,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring 10; pushnum 20; arith -; return 1\"",
        ),
        position: Position {
            line: 175,
            column: 62,
            span: 5093..5139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 63,
            span: 5139..5140,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 175,
            column: 66,
            span: 5141..5143,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 175,
            column: 68,
            span: 5144..5145,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 175,
            column: 70,
            span: 5144..5147,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 175,
            column: 71,
            span: 5147..5148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 176,
            column: 7,
            span: 5149..5155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 8,
            span: 5155..5156,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 176,
            column: 9,
            span: 5156..5157,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 176,
            column: 10,
            span: 5157..5158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 176,
            column: 15,
            span: 5158..5163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 176,
            column: 16,
            span: 5163..5164,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring 10; pushstring -20; arith *; return 1\"",
        ),
        position: Position {
            line: 176,
            column: 66,
            span: 5164..5214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 67,
            span: 5214..5215,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 176,
            column: 70,
            span: 5216..5218,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 176,
            column: 72,
            span: 5219..5220,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 176,
            column: 75,
            span: 5219..5223,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 176,
            column: 76,
            span: 5223..5224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 177,
            column: 7,
            span: 5225..5231,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 8,
            span: 5231..5232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 177,
            column: 9,
            span: 5232..5233,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 177,
            column: 10,
            span: 5233..5234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 177,
            column: 15,
            span: 5234..5239,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 177,
            column: 16,
            span: 5239..5240,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring 10; pushstring 3; arith ^; return 1\"",
        ),
        position: Position {
            line: 177,
            column: 64,
            span: 5240..5288,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 65,
            span: 5288..5289,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 177,
            column: 68,
            span: 5290..5292,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 177,
            column: 73,
            span: 5292..5297,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 177,
            column: 74,
            span: 5297..5298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 178,
            column: 7,
            span: 5299..5305,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 8,
            span: 5305..5306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 178,
            column: 9,
            span: 5306..5307,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 178,
            column: 10,
            span: 5307..5308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 178,
            column: 15,
            span: 5308..5313,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 178,
            column: 16,
            span: 5313..5314,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith /; return 1\"",
        ),
        position: Position {
            line: 178,
            column: 35,
            span: 5314..5333,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 36,
            span: 5333..5334,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 38,
            span: 5334..5336,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 178,
            column: 39,
            span: 5336..5337,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 41,
            span: 5337..5339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 178,
            column: 42,
            span: 5339..5340,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 178,
            column: 45,
            span: 5341..5343,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 50,
            span: 5343..5348,
        },
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        position: Position {
            line: 178,
            column: 51,
            span: 5348..5349,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 178,
            column: 52,
            span: 5348..5350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 178,
            column: 53,
            span: 5350..5351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 179,
            column: 2,
            span: 5352..5353,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 179,
            column: 4,
            span: 5354..5355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 179,
            column: 6,
            span: 5356..5357,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 179,
            column: 7,
            span: 5357..5358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 179,
            column: 12,
            span: 5358..5363,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 179,
            column: 13,
            span: 5363..5364,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushint 3; arith \\\\; return 1\"",
        ),
        position: Position {
            line: 179,
            column: 56,
            span: 5364..5407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 179,
            column: 57,
            span: 5407..5408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 180,
            column: 7,
            span: 5409..5415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 8,
            span: 5415..5416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 180,
            column: 9,
            span: 5416..5417,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 12,
            span: 5418..5420,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".0",
                },
            ),
        ),
        position: Position {
            line: 180,
            column: 16,
            span: 5420..5424,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 180,
            column: 20,
            span: 5425..5428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 180,
            column: 25,
            span: 5429..5433,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 180,
            column: 26,
            span: 5433..5434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 180,
            column: 30,
            span: 5434..5438,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 180,
            column: 31,
            span: 5438..5439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 180,
            column: 32,
            span: 5439..5440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 33,
            span: 5440..5441,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 180,
            column: 36,
            span: 5442..5444,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float\"",
        ),
        position: Position {
            line: 180,
            column: 44,
            span: 5445..5452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 180,
            column: 45,
            span: 5452..5453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 181,
            column: 2,
            span: 5454..5455,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 181,
            column: 4,
            span: 5456..5457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 181,
            column: 6,
            span: 5458..5459,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 181,
            column: 7,
            span: 5459..5460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 181,
            column: 12,
            span: 5460..5465,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 181,
            column: 13,
            span: 5465..5466,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushint 10; pushint 3; arith \\\\; return 1\"",
        ),
        position: Position {
            line: 181,
            column: 56,
            span: 5466..5509,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 181,
            column: 57,
            span: 5509..5510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 182,
            column: 7,
            span: 5511..5517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 8,
            span: 5517..5518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 182,
            column: 9,
            span: 5518..5519,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 182,
            column: 12,
            span: 5520..5522,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 182,
            column: 14,
            span: 5522..5524,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 182,
            column: 18,
            span: 5525..5528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 182,
            column: 23,
            span: 5529..5533,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 182,
            column: 24,
            span: 5533..5534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 182,
            column: 28,
            span: 5534..5538,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 182,
            column: 29,
            span: 5538..5539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 182,
            column: 30,
            span: 5539..5540,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 31,
            span: 5540..5541,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 182,
            column: 34,
            span: 5542..5544,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"integer\"",
        ),
        position: Position {
            line: 182,
            column: 44,
            span: 5545..5554,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 182,
            column: 45,
            span: 5554..5555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 183,
            column: 2,
            span: 5556..5557,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 183,
            column: 4,
            span: 5558..5559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 183,
            column: 11,
            span: 5560..5566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 12,
            span: 5566..5567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 183,
            column: 13,
            span: 5567..5568,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 183,
            column: 14,
            span: 5568..5569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 183,
            column: 19,
            span: 5569..5574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 183,
            column: 20,
            span: 5574..5575,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushint 10; pushint 3; arith +; return 1\"",
        ),
        position: Position {
            line: 183,
            column: 62,
            span: 5575..5617,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 63,
            span: 5617..5618,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 183,
            column: 64,
            span: 5618..5619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 184,
            column: 7,
            span: 5620..5626,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 8,
            span: 5626..5627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 184,
            column: 9,
            span: 5627..5628,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 184,
            column: 12,
            span: 5629..5631,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 184,
            column: 15,
            span: 5631..5634,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 184,
            column: 19,
            span: 5635..5638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 184,
            column: 24,
            span: 5639..5643,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 184,
            column: 25,
            span: 5643..5644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 184,
            column: 29,
            span: 5644..5648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 184,
            column: 30,
            span: 5648..5649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 184,
            column: 31,
            span: 5649..5650,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 32,
            span: 5650..5651,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 184,
            column: 35,
            span: 5652..5654,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"integer\"",
        ),
        position: Position {
            line: 184,
            column: 45,
            span: 5655..5664,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 184,
            column: 46,
            span: 5664..5665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 185,
            column: 2,
            span: 5666..5667,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 185,
            column: 4,
            span: 5668..5669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 185,
            column: 11,
            span: 5670..5676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 12,
            span: 5676..5677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 185,
            column: 13,
            span: 5677..5678,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 185,
            column: 14,
            span: 5678..5679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 185,
            column: 19,
            span: 5679..5684,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 185,
            column: 20,
            span: 5684..5685,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10; pushint 3; arith +; return 1\"",
        ),
        position: Position {
            line: 185,
            column: 62,
            span: 5685..5727,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 63,
            span: 5727..5728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 185,
            column: 64,
            span: 5728..5729,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 186,
            column: 7,
            span: 5730..5736,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 8,
            span: 5736..5737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 186,
            column: 9,
            span: 5737..5738,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 186,
            column: 12,
            span: 5739..5741,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 186,
            column: 15,
            span: 5741..5744,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 186,
            column: 19,
            span: 5745..5748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 186,
            column: 24,
            span: 5749..5753,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 186,
            column: 25,
            span: 5753..5754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 186,
            column: 29,
            span: 5754..5758,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 186,
            column: 30,
            span: 5758..5759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 186,
            column: 31,
            span: 5759..5760,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 32,
            span: 5760..5761,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 186,
            column: 35,
            span: 5762..5764,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float\"",
        ),
        position: Position {
            line: 186,
            column: 43,
            span: 5765..5772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 186,
            column: 44,
            span: 5772..5773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 187,
            column: 2,
            span: 5774..5775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 3,
            span: 5775..5776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 187,
            column: 4,
            span: 5776..5777,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 187,
            column: 5,
            span: 5777..5778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 187,
            column: 6,
            span: 5778..5779,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 187,
            column: 8,
            span: 5780..5781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 187,
            column: 10,
            span: 5782..5783,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 187,
            column: 11,
            span: 5783..5784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 187,
            column: 16,
            span: 5784..5789,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 187,
            column: 17,
            span: 5789..5790,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushnum 1;\n                  pushstring 10; arith _;\n                  pushstring 5; return 3]]",
        ),
        position: Position {
            line: 189,
            column: 43,
            span: 5790..5887,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 189,
            column: 44,
            span: 5887..5888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 190,
            column: 7,
            span: 5889..5895,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 190,
            column: 8,
            span: 5895..5896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 190,
            column: 9,
            span: 5896..5897,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 190,
            column: 12,
            span: 5898..5900,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 190,
            column: 14,
            span: 5900..5902,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 190,
            column: 18,
            span: 5903..5906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 190,
            column: 20,
            span: 5907..5908,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 190,
            column: 23,
            span: 5909..5911,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 190,
            column: 25,
            span: 5912..5913,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 190,
            column: 27,
            span: 5912..5915,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 190,
            column: 31,
            span: 5916..5919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 190,
            column: 33,
            span: 5920..5921,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 190,
            column: 36,
            span: 5922..5924,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"5\"",
        ),
        position: Position {
            line: 190,
            column: 40,
            span: 5925..5928,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 190,
            column: 41,
            span: 5928..5929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 191,
            column: 3,
            span: 5930..5932,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 191,
            column: 5,
            span: 5933..5934,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 191,
            column: 7,
            span: 5935..5936,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        position: Position {
            line: 191,
            column: 12,
            span: 5936..5941,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 191,
            column: 14,
            span: 5942..5943,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 191,
            column: 23,
            span: 5944..5952,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 25,
            span: 5953..5954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 191,
            column: 26,
            span: 5954..5955,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 27,
            span: 5955..5956,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 191,
            column: 28,
            span: 5956..5957,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 29,
            span: 5957..5958,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 191,
            column: 36,
            span: 5959..5965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 191,
            column: 49,
            span: 5966..5978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 191,
            column: 50,
            span: 5978..5979,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 191,
            column: 51,
            span: 5979..5980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 191,
            column: 52,
            span: 5980..5981,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 191,
            column: 53,
            span: 5981..5982,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 54,
            span: 5981..5983,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 191,
            column: 55,
            span: 5983..5984,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 191,
            column: 57,
            span: 5985..5986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 191,
            column: 59,
            span: 5987..5988,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 191,
            column: 60,
            span: 5988..5989,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 191,
            column: 61,
            span: 5988..5990,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 191,
            column: 62,
            span: 5990..5991,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 191,
            column: 63,
            span: 5991..5992,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 64,
            span: 5992..5993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 191,
            column: 67,
            span: 5994..5996,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 191,
            column: 68,
            span: 5996..5997,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 191,
            column: 72,
            span: 5998..6001,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 191,
            column: 73,
            span: 6001..6002,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mod",
        ),
        position: Position {
            line: 192,
            column: 12,
            span: 6009..6014,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 192,
            column: 14,
            span: 6015..6016,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 192,
            column: 23,
            span: 6017..6025,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 25,
            span: 6026..6027,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 192,
            column: 26,
            span: 6027..6028,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 192,
            column: 27,
            span: 6028..6029,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 192,
            column: 28,
            span: 6029..6030,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 29,
            span: 6030..6031,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 192,
            column: 36,
            span: 6032..6038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 192,
            column: 49,
            span: 6039..6051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 192,
            column: 50,
            span: 6051..6052,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 192,
            column: 51,
            span: 6052..6053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 192,
            column: 52,
            span: 6053..6054,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 192,
            column: 53,
            span: 6054..6055,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 192,
            column: 54,
            span: 6054..6056,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 192,
            column: 55,
            span: 6056..6057,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 192,
            column: 57,
            span: 6058..6059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 192,
            column: 59,
            span: 6060..6061,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 192,
            column: 60,
            span: 6061..6062,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 192,
            column: 61,
            span: 6061..6063,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 192,
            column: 62,
            span: 6063..6064,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 192,
            column: 63,
            span: 6064..6065,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 192,
            column: 64,
            span: 6065..6066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 192,
            column: 67,
            span: 6067..6069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 192,
            column: 68,
            span: 6069..6070,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 192,
            column: 72,
            span: 6071..6074,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 192,
            column: 73,
            span: 6074..6075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        position: Position {
            line: 193,
            column: 12,
            span: 6082..6087,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 193,
            column: 14,
            span: 6088..6089,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 193,
            column: 23,
            span: 6090..6098,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 25,
            span: 6099..6100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 193,
            column: 26,
            span: 6100..6101,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 27,
            span: 6101..6102,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 193,
            column: 34,
            span: 6103..6109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 193,
            column: 47,
            span: 6110..6122,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 193,
            column: 48,
            span: 6122..6123,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 193,
            column: 49,
            span: 6123..6124,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 193,
            column: 50,
            span: 6124..6125,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 193,
            column: 51,
            span: 6125..6126,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 193,
            column: 52,
            span: 6125..6127,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 193,
            column: 53,
            span: 6127..6128,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 193,
            column: 54,
            span: 6128..6129,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 193,
            column: 56,
            span: 6129..6131,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 193,
            column: 57,
            span: 6131..6132,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 193,
            column: 58,
            span: 6132..6133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 193,
            column: 61,
            span: 6134..6136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 193,
            column: 62,
            span: 6136..6137,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 193,
            column: 66,
            span: 6138..6141,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 193,
            column: 67,
            span: 6141..6142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 194,
            column: 2,
            span: 6143..6144,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 3,
            span: 6144..6145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 194,
            column: 4,
            span: 6145..6146,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 5,
            span: 6146..6147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 194,
            column: 6,
            span: 6147..6148,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 194,
            column: 8,
            span: 6149..6150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 194,
            column: 21,
            span: 6151..6163,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 194,
            column: 22,
            span: 6163..6164,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 194,
            column: 23,
            span: 6164..6165,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 194,
            column: 24,
            span: 6164..6166,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 194,
            column: 25,
            span: 6166..6167,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 26,
            span: 6167..6168,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 194,
            column: 29,
            span: 6169..6171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 194,
            column: 30,
            span: 6171..6172,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 194,
            column: 31,
            span: 6172..6173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 195,
            column: 21,
            span: 6182..6194,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 195,
            column: 22,
            span: 6194..6195,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 195,
            column: 23,
            span: 6195..6196,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 195,
            column: 24,
            span: 6195..6197,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 195,
            column: 25,
            span: 6197..6198,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 26,
            span: 6198..6199,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 195,
            column: 29,
            span: 6200..6202,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 195,
            column: 30,
            span: 6202..6203,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 195,
            column: 31,
            span: 6203..6204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 196,
            column: 21,
            span: 6213..6225,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 196,
            column: 22,
            span: 6225..6226,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 196,
            column: 23,
            span: 6226..6227,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 196,
            column: 24,
            span: 6227..6228,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 196,
            column: 25,
            span: 6227..6229,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 196,
            column: 26,
            span: 6229..6230,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 196,
            column: 27,
            span: 6230..6231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 196,
            column: 30,
            span: 6232..6234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 196,
            column: 31,
            span: 6234..6235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 197,
            column: 2,
            span: 6236..6237,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 3,
            span: 6237..6238,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 197,
            column: 4,
            span: 6238..6239,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 5,
            span: 6239..6240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 197,
            column: 6,
            span: 6240..6241,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 197,
            column: 8,
            span: 6242..6243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 197,
            column: 10,
            span: 6244..6245,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 197,
            column: 11,
            span: 6245..6246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 197,
            column: 16,
            span: 6246..6251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 197,
            column: 17,
            span: 6251..6252,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith +; return 2\"",
        ),
        position: Position {
            line: 197,
            column: 36,
            span: 6252..6271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 37,
            span: 6271..6272,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 197,
            column: 40,
            span: 6272..6275,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 41,
            span: 6275..6276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 197,
            column: 43,
            span: 6277..6278,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 197,
            column: 44,
            span: 6278..6279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 197,
            column: 46,
            span: 6280..6281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 197,
            column: 47,
            span: 6281..6282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 198,
            column: 7,
            span: 6283..6289,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 198,
            column: 8,
            span: 6289..6290,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 198,
            column: 9,
            span: 6290..6291,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 12,
            span: 6292..6294,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 15,
            span: 6294..6297,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 198,
            column: 19,
            span: 6298..6301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 198,
            column: 21,
            span: 6302..6303,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 198,
            column: 22,
            span: 6303..6304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 23,
            span: 6303..6305,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 198,
            column: 24,
            span: 6305..6306,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 27,
            span: 6307..6309,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 198,
            column: 30,
            span: 6309..6312,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 198,
            column: 34,
            span: 6313..6316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        position: Position {
            line: 198,
            column: 36,
            span: 6317..6318,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 198,
            column: 39,
            span: 6319..6321,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 198,
            column: 43,
            span: 6322..6325,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 198,
            column: 44,
            span: 6325..6326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 199,
            column: 7,
            span: 6327..6333,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 8,
            span: 6333..6334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 199,
            column: 9,
            span: 6334..6335,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 199,
            column: 10,
            span: 6335..6336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 199,
            column: 15,
            span: 6336..6341,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 199,
            column: 16,
            span: 6341..6342,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith %; return 1\"",
        ),
        position: Position {
            line: 199,
            column: 35,
            span: 6342..6361,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 199,
            column: 36,
            span: 6361..6362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 199,
            column: 38,
            span: 6363..6364,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 199,
            column: 39,
            span: 6364..6365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 199,
            column: 41,
            span: 6366..6367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 42,
            span: 6367..6368,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 199,
            column: 43,
            span: 6368..6369,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 199,
            column: 44,
            span: 6368..6370,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 199,
            column: 45,
            span: 6370..6371,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 199,
            column: 48,
            span: 6372..6374,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 199,
            column: 50,
            span: 6374..6376,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 199,
            column: 51,
            span: 6376..6377,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 199,
            column: 52,
            span: 6377..6378,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 199,
            column: 53,
            span: 6377..6379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 199,
            column: 54,
            span: 6379..6380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 200,
            column: 7,
            span: 6381..6387,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 8,
            span: 6387..6388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 200,
            column: 9,
            span: 6388..6389,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 200,
            column: 10,
            span: 6389..6390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 200,
            column: 15,
            span: 6390..6395,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 200,
            column: 16,
            span: 6395..6396,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith _; arith +; arith %; return 1\"",
        ),
        position: Position {
            line: 200,
            column: 53,
            span: 6396..6433,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 54,
            span: 6433..6434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 200,
            column: 56,
            span: 6435..6436,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 57,
            span: 6436..6437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 200,
            column: 59,
            span: 6438..6439,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 200,
            column: 60,
            span: 6439..6440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 200,
            column: 62,
            span: 6441..6442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 200,
            column: 63,
            span: 6442..6443,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 200,
            column: 64,
            span: 6443..6444,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 200,
            column: 65,
            span: 6443..6445,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 200,
            column: 66,
            span: 6445..6446,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 200,
            column: 69,
            span: 6447..6449,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 201,
            column: 17,
            span: 6464..6466,
        },
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        position: Position {
            line: 201,
            column: 19,
            span: 6467..6468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 21,
            span: 6469..6470,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 201,
            column: 22,
            span: 6469..6471,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 201,
            column: 24,
            span: 6472..6473,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 201,
            column: 26,
            span: 6474..6475,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 201,
            column: 27,
            span: 6475..6476,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 201,
            column: 28,
            span: 6475..6477,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 29,
            span: 6477..6478,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 201,
            column: 30,
            span: 6478..6479,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 201,
            column: 31,
            span: 6478..6480,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 32,
            span: 6480..6481,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 201,
            column: 33,
            span: 6481..6482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 204,
            column: 9,
            span: 6508..6516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 204,
            column: 10,
            span: 6516..6517,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"divide by zero\"",
        ),
        position: Position {
            line: 204,
            column: 26,
            span: 6517..6533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 27,
            span: 6533..6534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 204,
            column: 29,
            span: 6535..6536,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 204,
            column: 30,
            span: 6536..6537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 204,
            column: 35,
            span: 6537..6542,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 36,
            span: 6542..6543,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith \\\\\"",
        ),
        position: Position {
            line: 204,
            column: 47,
            span: 6544..6554,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 48,
            span: 6554..6555,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 51,
            span: 6555..6558,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 204,
            column: 52,
            span: 6558..6559,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 204,
            column: 54,
            span: 6559..6561,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 204,
            column: 55,
            span: 6561..6562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 205,
            column: 9,
            span: 6563..6571,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 205,
            column: 10,
            span: 6571..6572,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%%0\"",
        ),
        position: Position {
            line: 205,
            column: 15,
            span: 6572..6577,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 16,
            span: 6577..6578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 205,
            column: 18,
            span: 6579..6580,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 205,
            column: 19,
            span: 6580..6581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 205,
            column: 24,
            span: 6581..6586,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 25,
            span: 6586..6587,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arith %\"",
        ),
        position: Position {
            line: 205,
            column: 35,
            span: 6588..6597,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 36,
            span: 6597..6598,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 205,
            column: 39,
            span: 6598..6601,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 205,
            column: 40,
            span: 6601..6602,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 205,
            column: 42,
            span: 6602..6604,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 205,
            column: 43,
            span: 6604..6605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 209,
            column: 7,
            span: 6642..6648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 8,
            span: 6648..6649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 209,
            column: 9,
            span: 6649..6650,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 209,
            column: 10,
            span: 6650..6651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 209,
            column: 15,
            span: 6651..6656,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 209,
            column: 16,
            span: 6656..6657,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 2 5, return 1\"",
        ),
        position: Position {
            line: 209,
            column: 42,
            span: 6657..6683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 43,
            span: 6683..6684,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 45,
            span: 6684..6686,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 46,
            span: 6686..6687,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 48,
            span: 6687..6689,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 49,
            span: 6689..6690,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 51,
            span: 6690..6692,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 52,
            span: 6692..6693,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 54,
            span: 6693..6695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 55,
            span: 6695..6696,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 57,
            span: 6696..6698,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 209,
            column: 58,
            span: 6698..6699,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 209,
            column: 60,
            span: 6699..6701,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 61,
            span: 6701..6702,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 209,
            column: 62,
            span: 6702..6703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 210,
            column: 7,
            span: 6704..6710,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 8,
            span: 6710..6711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 210,
            column: 9,
            span: 6711..6712,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 210,
            column: 10,
            span: 6712..6713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 210,
            column: 15,
            span: 6713..6718,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 210,
            column: 16,
            span: 6718..6719,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 2 5, return 1\"",
        ),
        position: Position {
            line: 210,
            column: 42,
            span: 6719..6745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 43,
            span: 6745..6746,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 45,
            span: 6746..6748,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 46,
            span: 6748..6749,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 48,
            span: 6749..6751,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 49,
            span: 6751..6752,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 51,
            span: 6752..6754,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 52,
            span: 6754..6755,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 54,
            span: 6755..6757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 55,
            span: 6757..6758,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 57,
            span: 6758..6760,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 210,
            column: 58,
            span: 6760..6761,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 210,
            column: 60,
            span: 6761..6763,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 61,
            span: 6763..6764,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 210,
            column: 62,
            span: 6764..6765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 211,
            column: 7,
            span: 6766..6772,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 8,
            span: 6772..6773,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 211,
            column: 11,
            span: 6773..6776,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 211,
            column: 13,
            span: 6777..6778,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 211,
            column: 14,
            span: 6778..6779,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 211,
            column: 19,
            span: 6779..6784,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 211,
            column: 20,
            span: 6784..6785,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 3 4, return 1\"",
        ),
        position: Position {
            line: 211,
            column: 46,
            span: 6785..6811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 47,
            span: 6811..6812,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 49,
            span: 6812..6814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 50,
            span: 6814..6815,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 52,
            span: 6815..6817,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 53,
            span: 6817..6818,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 55,
            span: 6818..6820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 56,
            span: 6820..6821,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 58,
            span: 6821..6823,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 59,
            span: 6823..6824,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 61,
            span: 6824..6826,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 211,
            column: 62,
            span: 6826..6827,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 211,
            column: 64,
            span: 6827..6829,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 65,
            span: 6829..6830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 211,
            column: 66,
            span: 6830..6831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 212,
            column: 7,
            span: 6832..6838,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 8,
            span: 6838..6839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 212,
            column: 9,
            span: 6839..6840,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 212,
            column: 10,
            span: 6840..6841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 212,
            column: 15,
            span: 6841..6846,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 212,
            column: 16,
            span: 6846..6847,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 3 4, return 1\"",
        ),
        position: Position {
            line: 212,
            column: 42,
            span: 6847..6873,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 43,
            span: 6873..6874,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 45,
            span: 6874..6876,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 46,
            span: 6876..6877,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 48,
            span: 6877..6879,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 49,
            span: 6879..6880,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 51,
            span: 6880..6882,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 52,
            span: 6882..6883,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 54,
            span: 6883..6885,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 55,
            span: 6885..6886,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 57,
            span: 6886..6888,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 212,
            column: 58,
            span: 6888..6889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 212,
            column: 60,
            span: 6889..6891,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 61,
            span: 6891..6892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 212,
            column: 62,
            span: 6892..6893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 213,
            column: 7,
            span: 6894..6900,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 213,
            column: 8,
            span: 6900..6901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 213,
            column: 9,
            span: 6901..6902,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 213,
            column: 10,
            span: 6902..6903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 213,
            column: 15,
            span: 6903..6908,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 213,
            column: 16,
            span: 6908..6909,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 5 2, return 1\"",
        ),
        position: Position {
            line: 213,
            column: 42,
            span: 6909..6935,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 43,
            span: 6935..6936,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 213,
            column: 45,
            span: 6936..6938,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 46,
            span: 6938..6939,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 213,
            column: 48,
            span: 6939..6941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 49,
            span: 6941..6942,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 213,
            column: 51,
            span: 6942..6944,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 52,
            span: 6944..6945,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 213,
            column: 54,
            span: 6945..6947,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 55,
            span: 6947..6948,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 213,
            column: 57,
            span: 6948..6950,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 213,
            column: 58,
            span: 6950..6951,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 213,
            column: 60,
            span: 6951..6953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 213,
            column: 61,
            span: 6953..6954,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 213,
            column: 62,
            span: 6954..6955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 214,
            column: 7,
            span: 6956..6962,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 214,
            column: 8,
            span: 6962..6963,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 214,
            column: 11,
            span: 6963..6966,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 214,
            column: 13,
            span: 6967..6968,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 214,
            column: 14,
            span: 6968..6969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 214,
            column: 19,
            span: 6969..6974,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 214,
            column: 20,
            span: 6974..6975,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 2 -3, return 1\"",
        ),
        position: Position {
            line: 214,
            column: 47,
            span: 6975..7002,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 48,
            span: 7002..7003,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4\"",
        ),
        position: Position {
            line: 214,
            column: 52,
            span: 7004..7007,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 53,
            span: 7007..7008,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 214,
            column: 57,
            span: 7009..7012,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 58,
            span: 7012..7013,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 214,
            column: 62,
            span: 7014..7017,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 63,
            span: 7017..7018,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        position: Position {
            line: 214,
            column: 67,
            span: 7019..7022,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 68,
            span: 7022..7023,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 214,
            column: 72,
            span: 7024..7027,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 214,
            column: 73,
            span: 7027..7028,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 214,
            column: 77,
            span: 7029..7032,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 214,
            column: 78,
            span: 7032..7033,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 214,
            column: 79,
            span: 7033..7034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 215,
            column: 7,
            span: 7035..7041,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 8,
            span: 7041..7042,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 215,
            column: 11,
            span: 7042..7045,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 215,
            column: 13,
            span: 7046..7047,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 215,
            column: 14,
            span: 7047..7048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 215,
            column: 19,
            span: 7048..7053,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 215,
            column: 20,
            span: 7053..7054,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT -3 2, return 1\"",
        ),
        position: Position {
            line: 215,
            column: 47,
            span: 7054..7081,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 48,
            span: 7081..7082,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        position: Position {
            line: 215,
            column: 52,
            span: 7083..7086,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 53,
            span: 7086..7087,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 215,
            column: 57,
            span: 7088..7091,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 58,
            span: 7091..7092,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 215,
            column: 62,
            span: 7093..7096,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 63,
            span: 7096..7097,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"4\"",
        ),
        position: Position {
            line: 215,
            column: 67,
            span: 7098..7101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 68,
            span: 7101..7102,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 215,
            column: 72,
            span: 7103..7106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 215,
            column: 73,
            span: 7106..7107,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"2\"",
        ),
        position: Position {
            line: 215,
            column: 77,
            span: 7108..7111,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 78,
            span: 7111..7112,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 215,
            column: 79,
            span: 7112..7113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 218,
            column: 7,
            span: 7150..7156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 8,
            span: 7156..7157,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 218,
            column: 11,
            span: 7157..7160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 218,
            column: 13,
            span: 7161..7162,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 218,
            column: 14,
            span: 7162..7163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 218,
            column: 19,
            span: 7163..7168,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 218,
            column: 20,
            span: 7168..7169,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 1 4, return 1\"",
        ),
        position: Position {
            line: 218,
            column: 46,
            span: 7169..7195,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 47,
            span: 7195..7196,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 218,
            column: 48,
            span: 7196..7197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 219,
            column: 7,
            span: 7198..7204,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 8,
            span: 7204..7205,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 219,
            column: 11,
            span: 7205..7208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 219,
            column: 13,
            span: 7209..7210,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 219,
            column: 14,
            span: 7210..7211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 219,
            column: 19,
            span: 7211..7216,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 219,
            column: 20,
            span: 7216..7217,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 9 1, return 1\"",
        ),
        position: Position {
            line: 219,
            column: 46,
            span: 7217..7243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 47,
            span: 7243..7244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 219,
            column: 48,
            span: 7244..7245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 220,
            column: 7,
            span: 7246..7252,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 8,
            span: 7252..7253,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 220,
            column: 11,
            span: 7253..7256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 220,
            column: 13,
            span: 7257..7258,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 220,
            column: 14,
            span: 7258..7259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 220,
            column: 19,
            span: 7259..7264,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 220,
            column: 20,
            span: 7264..7265,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 9 9, return 1\"",
        ),
        position: Position {
            line: 220,
            column: 46,
            span: 7265..7291,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 47,
            span: 7291..7292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 220,
            column: 48,
            span: 7292..7293,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 222,
            column: 6,
            span: 7295..7300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 222,
            column: 8,
            span: 7301..7302,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 222,
            column: 10,
            span: 7303..7304,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 222,
            column: 12,
            span: 7305..7306,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        position: Position {
            line: 222,
            column: 16,
            span: 7306..7310,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 222,
            column: 18,
            span: 7311..7312,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 222,
            column: 27,
            span: 7313..7321,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 222,
            column: 29,
            span: 7322..7323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 222,
            column: 30,
            span: 7323..7324,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 222,
            column: 31,
            span: 7324..7325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 222,
            column: 32,
            span: 7325..7326,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 222,
            column: 33,
            span: 7326..7327,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 222,
            column: 40,
            span: 7328..7334,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 222,
            column: 42,
            span: 7335..7336,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 222,
            column: 43,
            span: 7336..7337,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 44,
            span: 7336..7338,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 222,
            column: 45,
            span: 7338..7339,
        },
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        position: Position {
            line: 222,
            column: 47,
            span: 7340..7341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 222,
            column: 49,
            span: 7342..7343,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 222,
            column: 50,
            span: 7343..7344,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 222,
            column: 51,
            span: 7343..7345,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 222,
            column: 52,
            span: 7345..7346,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 222,
            column: 56,
            span: 7347..7350,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 222,
            column: 57,
            span: 7350..7351,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 223,
            column: 6,
            span: 7352..7357,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 223,
            column: 9,
            span: 7358..7360,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 10,
            span: 7360..7361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 223,
            column: 12,
            span: 7361..7363,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 13,
            span: 7363..7364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 223,
            column: 15,
            span: 7364..7366,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 223,
            column: 17,
            span: 7367..7368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 223,
            column: 30,
            span: 7369..7381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 223,
            column: 31,
            span: 7381..7382,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 223,
            column: 32,
            span: 7382..7383,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 223,
            column: 33,
            span: 7382..7384,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 223,
            column: 34,
            span: 7384..7385,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 35,
            span: 7385..7386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 223,
            column: 37,
            span: 7387..7388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 223,
            column: 38,
            span: 7388..7389,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 223,
            column: 39,
            span: 7389..7390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 224,
            column: 30,
            span: 7408..7420,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 224,
            column: 31,
            span: 7420..7421,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 224,
            column: 32,
            span: 7421..7422,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 224,
            column: 33,
            span: 7421..7423,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 224,
            column: 34,
            span: 7423..7424,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 35,
            span: 7424..7425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 224,
            column: 37,
            span: 7426..7427,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 224,
            column: 38,
            span: 7427..7428,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 224,
            column: 39,
            span: 7428..7429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 225,
            column: 30,
            span: 7447..7459,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 225,
            column: 31,
            span: 7459..7460,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 225,
            column: 32,
            span: 7460..7461,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 225,
            column: 33,
            span: 7460..7462,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 225,
            column: 34,
            span: 7462..7463,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 225,
            column: 35,
            span: 7463..7464,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 225,
            column: 37,
            span: 7465..7466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 225,
            column: 38,
            span: 7466..7467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 226,
            column: 7,
            span: 7468..7474,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 8,
            span: 7474..7475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 226,
            column: 9,
            span: 7475..7476,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 226,
            column: 10,
            span: 7476..7477,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 226,
            column: 15,
            span: 7477..7482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 226,
            column: 16,
            span: 7482..7483,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 2 5, return 1\"",
        ),
        position: Position {
            line: 226,
            column: 42,
            span: 7483..7509,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 43,
            span: 7509..7510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 226,
            column: 46,
            span: 7511..7513,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 47,
            span: 7513..7514,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 226,
            column: 49,
            span: 7514..7516,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 50,
            span: 7516..7517,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 226,
            column: 52,
            span: 7517..7519,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 53,
            span: 7519..7520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 226,
            column: 56,
            span: 7521..7523,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 57,
            span: 7523..7524,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 226,
            column: 59,
            span: 7524..7526,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 226,
            column: 60,
            span: 7526..7527,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 226,
            column: 62,
            span: 7527..7529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 63,
            span: 7529..7530,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 226,
            column: 64,
            span: 7530..7531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 227,
            column: 7,
            span: 7532..7538,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 8,
            span: 7538..7539,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 227,
            column: 9,
            span: 7539..7540,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 227,
            column: 10,
            span: 7540..7541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 227,
            column: 15,
            span: 7541..7546,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 227,
            column: 16,
            span: 7546..7547,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 2 5, return 1\"",
        ),
        position: Position {
            line: 227,
            column: 42,
            span: 7547..7573,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 227,
            column: 43,
            span: 7573..7574,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 227,
            column: 46,
            span: 7575..7577,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 227,
            column: 47,
            span: 7577..7578,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 227,
            column: 49,
            span: 7578..7580,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 227,
            column: 50,
            span: 7580..7581,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 227,
            column: 52,
            span: 7581..7583,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 227,
            column: 53,
            span: 7583..7584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 227,
            column: 56,
            span: 7585..7587,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 227,
            column: 57,
            span: 7587..7588,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 227,
            column: 59,
            span: 7588..7590,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 227,
            column: 60,
            span: 7590..7591,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 227,
            column: 62,
            span: 7591..7593,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 63,
            span: 7593..7594,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 227,
            column: 64,
            span: 7594..7595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 228,
            column: 7,
            span: 7596..7602,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 8,
            span: 7602..7603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 228,
            column: 9,
            span: 7603..7604,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 228,
            column: 10,
            span: 7604..7605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 228,
            column: 15,
            span: 7605..7610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 228,
            column: 16,
            span: 7610..7611,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 5 -6, return 1\"",
        ),
        position: Position {
            line: 228,
            column: 43,
            span: 7611..7638,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 44,
            span: 7638..7639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a4",
        ),
        position: Position {
            line: 228,
            column: 47,
            span: 7640..7642,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 48,
            span: 7642..7643,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 228,
            column: 50,
            span: 7643..7645,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 51,
            span: 7645..7646,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 228,
            column: 53,
            span: 7646..7648,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 54,
            span: 7648..7649,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 228,
            column: 57,
            span: 7650..7652,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 58,
            span: 7652..7653,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 228,
            column: 60,
            span: 7653..7655,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 228,
            column: 61,
            span: 7655..7656,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 228,
            column: 63,
            span: 7656..7658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 64,
            span: 7658..7659,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 228,
            column: 65,
            span: 7659..7660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 229,
            column: 2,
            span: 7661..7662,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 3,
            span: 7662..7663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 229,
            column: 4,
            span: 7663..7664,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 229,
            column: 6,
            span: 7665..7666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 229,
            column: 8,
            span: 7667..7668,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 229,
            column: 9,
            span: 7668..7669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 229,
            column: 14,
            span: 7669..7674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 229,
            column: 15,
            span: 7674..7675,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LT 5 -6, return 2\"",
        ),
        position: Position {
            line: 229,
            column: 42,
            span: 7675..7702,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 43,
            span: 7702..7703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 229,
            column: 46,
            span: 7704..7706,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 47,
            span: 7706..7707,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 49,
            span: 7707..7709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 50,
            span: 7709..7710,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 52,
            span: 7710..7712,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 53,
            span: 7712..7713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 229,
            column: 56,
            span: 7714..7716,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 57,
            span: 7716..7717,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 59,
            span: 7717..7719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 229,
            column: 60,
            span: 7719..7720,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 229,
            column: 63,
            span: 7720..7723,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 229,
            column: 64,
            span: 7723..7724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 230,
            column: 7,
            span: 7725..7731,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 230,
            column: 8,
            span: 7731..7732,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 230,
            column: 9,
            span: 7732..7733,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 230,
            column: 12,
            span: 7734..7736,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 230,
            column: 15,
            span: 7736..7739,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 230,
            column: 19,
            span: 7740..7743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 230,
            column: 21,
            span: 7744..7745,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 230,
            column: 24,
            span: 7746..7748,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 230,
            column: 30,
            span: 7749..7754,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 230,
            column: 31,
            span: 7754..7755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 231,
            column: 2,
            span: 7756..7757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 3,
            span: 7757..7758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 231,
            column: 4,
            span: 7758..7759,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 231,
            column: 6,
            span: 7760..7761,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 231,
            column: 8,
            span: 7762..7763,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 231,
            column: 9,
            span: 7763..7764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 231,
            column: 14,
            span: 7764..7769,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 231,
            column: 15,
            span: 7769..7770,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 5 -6, return 2\"",
        ),
        position: Position {
            line: 231,
            column: 42,
            span: 7770..7797,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 43,
            span: 7797..7798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 231,
            column: 46,
            span: 7799..7801,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 47,
            span: 7801..7802,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 231,
            column: 49,
            span: 7802..7804,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 50,
            span: 7804..7805,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 231,
            column: 52,
            span: 7805..7807,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 53,
            span: 7807..7808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a3",
        ),
        position: Position {
            line: 231,
            column: 56,
            span: 7809..7811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 57,
            span: 7811..7812,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 231,
            column: 59,
            span: 7812..7814,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 231,
            column: 60,
            span: 7814..7815,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 231,
            column: 63,
            span: 7815..7818,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 231,
            column: 64,
            span: 7818..7819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 232,
            column: 7,
            span: 7820..7826,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 232,
            column: 8,
            span: 7826..7827,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 232,
            column: 9,
            span: 7827..7828,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 232,
            column: 12,
            span: 7829..7831,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 232,
            column: 15,
            span: 7831..7834,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 232,
            column: 19,
            span: 7835..7838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 232,
            column: 21,
            span: 7839..7840,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 232,
            column: 24,
            span: 7841..7843,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 232,
            column: 30,
            span: 7844..7849,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 232,
            column: 31,
            span: 7849..7850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 233,
            column: 2,
            span: 7851..7852,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 3,
            span: 7852..7853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 233,
            column: 4,
            span: 7853..7854,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 233,
            column: 6,
            span: 7855..7856,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 233,
            column: 8,
            span: 7857..7858,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 233,
            column: 9,
            span: 7858..7859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 233,
            column: 14,
            span: 7859..7864,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 233,
            column: 15,
            span: 7864..7865,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare LE 5 -6, return 2\"",
        ),
        position: Position {
            line: 233,
            column: 42,
            span: 7865..7892,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 43,
            span: 7892..7893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 233,
            column: 46,
            span: 7894..7896,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 47,
            span: 7896..7897,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 49,
            span: 7897..7899,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 50,
            span: 7899..7900,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 52,
            span: 7900..7902,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 53,
            span: 7902..7903,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a1",
        ),
        position: Position {
            line: 233,
            column: 56,
            span: 7904..7906,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 57,
            span: 7906..7907,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 59,
            span: 7907..7909,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 233,
            column: 60,
            span: 7909..7910,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 233,
            column: 63,
            span: 7910..7913,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 233,
            column: 64,
            span: 7913..7914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 234,
            column: 7,
            span: 7915..7921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 234,
            column: 8,
            span: 7921..7922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 234,
            column: 9,
            span: 7922..7923,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 234,
            column: 12,
            span: 7924..7926,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 234,
            column: 15,
            span: 7926..7929,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 234,
            column: 19,
            span: 7930..7933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 234,
            column: 21,
            span: 7934..7935,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 234,
            column: 24,
            span: 7936..7938,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 234,
            column: 29,
            span: 7939..7943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 234,
            column: 30,
            span: 7943..7944,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 237,
            column: 6,
            span: 7964..7969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 237,
            column: 8,
            span: 7970..7971,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 237,
            column: 10,
            span: 7972..7973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 237,
            column: 23,
            span: 7974..7986,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 237,
            column: 24,
            span: 7986..7987,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 237,
            column: 25,
            span: 7987..7988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 237,
            column: 26,
            span: 7988..7989,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 237,
            column: 28,
            span: 7990..7991,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 237,
            column: 31,
            span: 7991..7994,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 237,
            column: 32,
            span: 7994..7995,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 237,
            column: 33,
            span: 7995..7996,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 237,
            column: 35,
            span: 7997..7998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        position: Position {
            line: 237,
            column: 40,
            span: 7998..8003,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 237,
            column: 42,
            span: 8004..8005,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 237,
            column: 51,
            span: 8006..8014,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 237,
            column: 53,
            span: 8015..8016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 237,
            column: 54,
            span: 8016..8017,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 55,
            span: 8017..8018,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 237,
            column: 62,
            span: 8019..8025,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 237,
            column: 64,
            span: 8026..8027,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 237,
            column: 65,
            span: 8027..8028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 237,
            column: 66,
            span: 8028..8029,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 237,
            column: 70,
            span: 8030..8033,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 237,
            column: 71,
            span: 8033..8034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 237,
            column: 72,
            span: 8034..8035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 238,
            column: 2,
            span: 8036..8037,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 3,
            span: 8037..8038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 238,
            column: 4,
            span: 8038..8039,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 238,
            column: 5,
            span: 8039..8040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 238,
            column: 6,
            span: 8040..8041,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 238,
            column: 8,
            span: 8042..8043,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 238,
            column: 10,
            span: 8044..8045,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 238,
            column: 11,
            span: 8045..8046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 238,
            column: 16,
            span: 8046..8051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 238,
            column: 17,
            span: 8051..8052,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n   len 2;\n   Llen 2;\n   objsize 2;\n   return 3\n]]",
        ),
        position: Position {
            line: 243,
            column: 3,
            span: 8052..8104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 243,
            column: 4,
            span: 8104..8105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 243,
            column: 6,
            span: 8106..8107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 243,
            column: 7,
            span: 8107..8108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 244,
            column: 7,
            span: 8109..8115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 244,
            column: 8,
            span: 8115..8116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 244,
            column: 9,
            span: 8116..8117,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 244,
            column: 12,
            span: 8118..8120,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 15,
            span: 8120..8123,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 244,
            column: 19,
            span: 8124..8127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 244,
            column: 21,
            span: 8128..8129,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 244,
            column: 24,
            span: 8130..8132,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 27,
            span: 8132..8135,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 244,
            column: 31,
            span: 8136..8139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 244,
            column: 33,
            span: 8140..8141,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 244,
            column: 36,
            span: 8142..8144,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 244,
            column: 38,
            span: 8144..8146,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 244,
            column: 39,
            span: 8146..8147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 246,
            column: 2,
            span: 8149..8150,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 246,
            column: 3,
            span: 8150..8151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 246,
            column: 4,
            span: 8151..8152,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 246,
            column: 6,
            span: 8153..8154,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"234\"",
        ),
        position: Position {
            line: 246,
            column: 12,
            span: 8155..8160,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 246,
            column: 13,
            span: 8160..8161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 246,
            column: 15,
            span: 8162..8163,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 246,
            column: 16,
            span: 8163..8164,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 17,
            span: 8163..8165,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 246,
            column: 18,
            span: 8165..8166,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 246,
            column: 20,
            span: 8167..8168,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 246,
            column: 0,
            span: 8168..8171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 247,
            column: 2,
            span: 8172..8173,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 3,
            span: 8173..8174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 247,
            column: 4,
            span: 8174..8175,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 247,
            column: 5,
            span: 8175..8176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 247,
            column: 6,
            span: 8176..8177,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 247,
            column: 8,
            span: 8178..8179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 247,
            column: 10,
            span: 8180..8181,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 247,
            column: 11,
            span: 8181..8182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 247,
            column: 16,
            span: 8182..8187,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 247,
            column: 17,
            span: 8187..8188,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n   len 2;\n   Llen 2;\n   objsize 2;\n   return 3\n]]",
        ),
        position: Position {
            line: 252,
            column: 3,
            span: 8188..8240,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 252,
            column: 4,
            span: 8240..8241,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 252,
            column: 6,
            span: 8242..8243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 252,
            column: 7,
            span: 8243..8244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 253,
            column: 7,
            span: 8245..8251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 253,
            column: 8,
            span: 8251..8252,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 253,
            column: 9,
            span: 8252..8253,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 253,
            column: 12,
            span: 8254..8256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"234\"",
        ),
        position: Position {
            line: 253,
            column: 18,
            span: 8257..8262,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 253,
            column: 22,
            span: 8263..8266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 253,
            column: 24,
            span: 8267..8268,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 253,
            column: 27,
            span: 8269..8271,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "234",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 253,
            column: 31,
            span: 8271..8275,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 253,
            column: 35,
            span: 8276..8279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 253,
            column: 37,
            span: 8280..8281,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 253,
            column: 40,
            span: 8282..8284,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 253,
            column: 42,
            span: 8284..8286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 253,
            column: 43,
            span: 8286..8287,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 255,
            column: 2,
            span: 8289..8290,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 255,
            column: 3,
            span: 8290..8291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 255,
            column: 4,
            span: 8291..8292,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 255,
            column: 6,
            span: 8293..8294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 255,
            column: 12,
            span: 8295..8300,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 255,
            column: 13,
            span: 8300..8301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 255,
            column: 15,
            span: 8302..8303,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 255,
            column: 16,
            span: 8303..8304,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 17,
            span: 8303..8305,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 255,
            column: 18,
            span: 8305..8306,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 255,
            column: 20,
            span: 8307..8308,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 255,
            column: 0,
            span: 8308..8311,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 256,
            column: 2,
            span: 8312..8313,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 256,
            column: 3,
            span: 8313..8314,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 256,
            column: 4,
            span: 8314..8315,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 256,
            column: 6,
            span: 8316..8317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 256,
            column: 8,
            span: 8318..8319,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 256,
            column: 9,
            span: 8319..8320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 256,
            column: 14,
            span: 8320..8325,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 256,
            column: 15,
            span: 8325..8326,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n   len 2;\n   objsize 2;\n   return 2\n]]",
        ),
        position: Position {
            line: 260,
            column: 3,
            span: 8326..8367,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 260,
            column: 4,
            span: 8367..8368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 260,
            column: 6,
            span: 8369..8370,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 260,
            column: 7,
            span: 8370..8371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 261,
            column: 7,
            span: 8372..8378,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 261,
            column: 8,
            span: 8378..8379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 261,
            column: 9,
            span: 8379..8380,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 12,
            span: 8381..8383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 261,
            column: 18,
            span: 8384..8389,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 261,
            column: 22,
            span: 8390..8393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 261,
            column: 24,
            span: 8394..8395,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 261,
            column: 27,
            span: 8396..8398,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 261,
            column: 29,
            span: 8398..8400,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 261,
            column: 30,
            span: 8400..8401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 266,
            column: 2,
            span: 8425..8426,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 266,
            column: 4,
            span: 8427..8428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 266,
            column: 17,
            span: 8429..8441,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 18,
            span: 8441..8442,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 266,
            column: 19,
            span: 8442..8443,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 266,
            column: 20,
            span: 8443..8444,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 266,
            column: 21,
            span: 8444..8445,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"u\"",
        ),
        position: Position {
            line: 266,
            column: 24,
            span: 8445..8448,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 266,
            column: 25,
            span: 8448..8449,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 266,
            column: 26,
            span: 8449..8450,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 266,
            column: 28,
            span: 8451..8452,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        position: Position {
            line: 266,
            column: 36,
            span: 8452..8460,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 266,
            column: 38,
            span: 8461..8462,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 266,
            column: 47,
            span: 8463..8471,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 266,
            column: 49,
            span: 8472..8473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 266,
            column: 50,
            span: 8473..8474,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 266,
            column: 51,
            span: 8474..8475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 266,
            column: 52,
            span: 8475..8476,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 53,
            span: 8476..8477,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 266,
            column: 60,
            span: 8478..8484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 266,
            column: 62,
            span: 8485..8486,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 266,
            column: 63,
            span: 8486..8487,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 266,
            column: 64,
            span: 8487..8488,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 266,
            column: 66,
            span: 8488..8490,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'.'",
        ),
        position: Position {
            line: 266,
            column: 69,
            span: 8490..8493,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 266,
            column: 71,
            span: 8493..8495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 266,
            column: 72,
            span: 8495..8496,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 266,
            column: 73,
            span: 8496..8497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 266,
            column: 74,
            span: 8497..8498,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 266,
            column: 78,
            span: 8499..8502,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 266,
            column: 79,
            span: 8502..8503,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 266,
            column: 80,
            span: 8503..8504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 267,
            column: 2,
            span: 8505..8506,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 267,
            column: 3,
            span: 8506..8507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 267,
            column: 4,
            span: 8507..8508,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 267,
            column: 6,
            span: 8509..8510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 267,
            column: 8,
            span: 8511..8512,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 267,
            column: 9,
            span: 8512..8513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 267,
            column: 14,
            span: 8513..8518,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 267,
            column: 15,
            span: 8518..8519,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  pushnum 5\n  pushvalue 2;\n  pushvalue 2;\n  concat 2;\n  pushvalue -2;\n  return 2;\n]]",
        ),
        position: Position {
            line: 274,
            column: 3,
            span: 8519..8606,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 4,
            span: 8606..8607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 274,
            column: 6,
            span: 8608..8609,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 274,
            column: 7,
            span: 8609..8610,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 274,
            column: 9,
            span: 8611..8612,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 274,
            column: 10,
            span: 8612..8613,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 275,
            column: 7,
            span: 8614..8620,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 275,
            column: 8,
            span: 8620..8621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 275,
            column: 9,
            span: 8621..8622,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 275,
            column: 12,
            span: 8623..8625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 275,
            column: 14,
            span: 8626..8627,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 275,
            column: 16,
            span: 8627..8629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 275,
            column: 17,
            span: 8629..8630,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 275,
            column: 21,
            span: 8631..8634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 275,
            column: 23,
            span: 8635..8636,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 275,
            column: 26,
            span: 8637..8639,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 275,
            column: 28,
            span: 8639..8641,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 275,
            column: 29,
            span: 8641..8642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 278,
            column: 7,
            span: 8670..8676,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 8,
            span: 8676..8677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 278,
            column: 9,
            span: 8677..8678,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 278,
            column: 10,
            span: 8678..8679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 278,
            column: 15,
            span: 8679..8684,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 278,
            column: 16,
            span: 8684..8685,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat 0; return 1\"",
        ),
        position: Position {
            line: 278,
            column: 36,
            span: 8685..8705,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 37,
            span: 8705..8706,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 278,
            column: 40,
            span: 8707..8709,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 278,
            column: 43,
            span: 8710..8712,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 278,
            column: 44,
            span: 8712..8713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 281,
            column: 7,
            span: 8740..8746,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 8,
            span: 8746..8747,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 281,
            column: 9,
            span: 8747..8748,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 281,
            column: 10,
            span: 8748..8749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 281,
            column: 15,
            span: 8749..8754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 281,
            column: 16,
            span: 8754..8755,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"concat 1; return 1\"",
        ),
        position: Position {
            line: 281,
            column: 36,
            span: 8755..8775,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 281,
            column: 37,
            span: 8775..8776,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 281,
            column: 44,
            span: 8777..8783,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 45,
            span: 8783..8784,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 281,
            column: 48,
            span: 8785..8787,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 281,
            column: 55,
            span: 8788..8794,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 281,
            column: 56,
            span: 8794..8795,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 287,
            column: 9,
            span: 8818..8826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 287,
            column: 11,
            span: 8827..8828,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 287,
            column: 12,
            span: 8828..8829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 287,
            column: 13,
            span: 8829..8830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 287,
            column: 14,
            span: 8830..8831,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 287,
            column: 21,
            span: 8832..8838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 287,
            column: 23,
            span: 8839..8840,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 287,
            column: 27,
            span: 8841..8844,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 287,
            column: 29,
            span: 8844..8846,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 287,
            column: 32,
            span: 8847..8849,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 287,
            column: 34,
            span: 8849..8851,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 287,
            column: 0,
            span: 8852..8855,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 289,
            column: 9,
            span: 8857..8865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 289,
            column: 15,
            span: 8866..8871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 289,
            column: 17,
            span: 8872..8873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 289,
            column: 18,
            span: 8873..8874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 289,
            column: 19,
            span: 8874..8875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 289,
            column: 21,
            span: 8876..8877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 289,
            column: 22,
            span: 8877..8878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 290,
            column: 4,
            span: 8881..8882,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 290,
            column: 6,
            span: 8883..8884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 290,
            column: 8,
            span: 8885..8886,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 290,
            column: 11,
            span: 8887..8889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 290,
            column: 0,
            span: 8889..8891,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 291,
            column: 8,
            span: 8894..8899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 291,
            column: 13,
            span: 8900..8904,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 291,
            column: 15,
            span: 8905..8906,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    isnumber %d;\n    isstring %d;\n    isfunction %d;\n    iscfunction %d;\n    istable %d;\n    isuserdata %d;\n    isnil %d;\n    isnull %d;\n    return 8\n  ]]",
        ),
        position: Position {
            line: 301,
            column: 5,
            span: 8907..9064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 302,
            column: 7,
            span: 9067..9071,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 302,
            column: 9,
            span: 9072..9073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 302,
            column: 16,
            span: 9074..9080,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 302,
            column: 17,
            span: 9080..9081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 302,
            column: 23,
            span: 9081..9087,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 302,
            column: 24,
            span: 9087..9088,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 302,
            column: 28,
            span: 9088..9092,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 29,
            span: 9092..9093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 302,
            column: 31,
            span: 9094..9095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 32,
            span: 9095..9096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 302,
            column: 34,
            span: 9097..9098,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 35,
            span: 9098..9099,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 302,
            column: 37,
            span: 9100..9101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 38,
            span: 9101..9102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 302,
            column: 40,
            span: 9103..9104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 41,
            span: 9104..9105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 302,
            column: 43,
            span: 9106..9107,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 44,
            span: 9107..9108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 302,
            column: 46,
            span: 9109..9110,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 47,
            span: 9110..9111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 302,
            column: 49,
            span: 9112..9113,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 302,
            column: 50,
            span: 9113..9114,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 302,
            column: 52,
            span: 9115..9116,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 302,
            column: 53,
            span: 9116..9117,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 303,
            column: 8,
            span: 9120..9125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 303,
            column: 10,
            span: 9126..9127,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 11,
            span: 9127..9128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 303,
            column: 12,
            span: 9128..9129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 13,
            span: 9129..9130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 303,
            column: 14,
            span: 9130..9131,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 15,
            span: 9131..9132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 303,
            column: 16,
            span: 9132..9133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 17,
            span: 9133..9134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 303,
            column: 18,
            span: 9134..9135,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 19,
            span: 9135..9136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 303,
            column: 20,
            span: 9136..9137,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 21,
            span: 9137..9138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 303,
            column: 22,
            span: 9138..9139,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 23,
            span: 9139..9140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 303,
            column: 24,
            span: 9140..9141,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 303,
            column: 26,
            span: 9142..9143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 303,
            column: 28,
            span: 9144..9145,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 303,
            column: 29,
            span: 9145..9146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 303,
            column: 34,
            span: 9146..9151,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 303,
            column: 35,
            span: 9151..9152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 303,
            column: 39,
            span: 9152..9156,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 303,
            column: 40,
            span: 9156..9157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 303,
            column: 42,
            span: 9158..9159,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 303,
            column: 43,
            span: 9159..9160,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 304,
            column: 9,
            span: 9163..9169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 304,
            column: 11,
            span: 9170..9171,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 12,
            span: 9171..9172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 304,
            column: 13,
            span: 9172..9173,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 14,
            span: 9173..9174,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 304,
            column: 15,
            span: 9174..9175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 304,
            column: 16,
            span: 9175..9176,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 17,
            span: 9176..9177,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 304,
            column: 18,
            span: 9177..9178,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 19,
            span: 9178..9179,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 304,
            column: 20,
            span: 9179..9180,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 304,
            column: 21,
            span: 9180..9181,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 22,
            span: 9181..9182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 304,
            column: 23,
            span: 9182..9183,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 24,
            span: 9183..9184,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 304,
            column: 25,
            span: 9184..9185,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 304,
            column: 26,
            span: 9185..9186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 27,
            span: 9186..9187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 304,
            column: 28,
            span: 9187..9188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 29,
            span: 9188..9189,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 304,
            column: 30,
            span: 9189..9190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 304,
            column: 31,
            span: 9190..9191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 32,
            span: 9191..9192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 304,
            column: 33,
            span: 9192..9193,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 34,
            span: 9193..9194,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 304,
            column: 35,
            span: 9194..9195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 304,
            column: 36,
            span: 9195..9196,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 37,
            span: 9196..9197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 304,
            column: 38,
            span: 9197..9198,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 39,
            span: 9198..9199,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 304,
            column: 40,
            span: 9199..9200,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 304,
            column: 41,
            span: 9200..9201,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 42,
            span: 9201..9202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 304,
            column: 43,
            span: 9202..9203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 44,
            span: 9203..9204,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 304,
            column: 45,
            span: 9204..9205,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 46,
            span: 9205..9206,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 304,
            column: 49,
            span: 9205..9209,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 304,
            column: 50,
            span: 9209..9210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 304,
            column: 51,
            span: 9210..9211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 304,
            column: 52,
            span: 9211..9212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "h",
        ),
        position: Position {
            line: 304,
            column: 53,
            span: 9212..9213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 54,
            span: 9213..9214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 304,
            column: 55,
            span: 9214..9215,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 305,
            column: 0,
            span: 9216..9219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 307,
            column: 7,
            span: 9221..9227,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 8,
            span: 9227..9228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 307,
            column: 13,
            span: 9228..9233,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 307,
            column: 14,
            span: 9233..9234,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 307,
            column: 15,
            span: 9233..9235,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 16,
            span: 9235..9236,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 307,
            column: 19,
            span: 9237..9239,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 307,
            column: 21,
            span: 9239..9241,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 307,
            column: 22,
            span: 9241..9242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 308,
            column: 7,
            span: 9243..9249,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 8,
            span: 9249..9250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 308,
            column: 13,
            span: 9250..9255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 308,
            column: 14,
            span: 9255..9256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 308,
            column: 19,
            span: 9256..9261,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 20,
            span: 9261..9262,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 308,
            column: 23,
            span: 9263..9265,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 308,
            column: 25,
            span: 9265..9267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 308,
            column: 26,
            span: 9267..9268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 309,
            column: 7,
            span: 9269..9275,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 8,
            span: 9275..9276,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 309,
            column: 13,
            span: 9276..9281,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 309,
            column: 14,
            span: 9281..9282,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'32'",
        ),
        position: Position {
            line: 309,
            column: 18,
            span: 9282..9286,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 19,
            span: 9286..9287,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 309,
            column: 22,
            span: 9288..9290,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 309,
            column: 24,
            span: 9290..9292,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 309,
            column: 25,
            span: 9292..9293,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 310,
            column: 7,
            span: 9294..9300,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 310,
            column: 8,
            span: 9300..9301,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 310,
            column: 13,
            span: 9301..9306,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 310,
            column: 14,
            span: 9306..9307,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 310,
            column: 15,
            span: 9307..9308,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 310,
            column: 16,
            span: 9308..9309,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 310,
            column: 17,
            span: 9309..9310,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 310,
            column: 20,
            span: 9311..9313,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 310,
            column: 22,
            span: 9313..9315,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 310,
            column: 23,
            span: 9315..9316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 311,
            column: 7,
            span: 9317..9323,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 311,
            column: 8,
            span: 9323..9324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 311,
            column: 13,
            span: 9324..9329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 311,
            column: 14,
            span: 9329..9330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 311,
            column: 19,
            span: 9330..9335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 311,
            column: 20,
            span: 9335..9336,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 311,
            column: 23,
            span: 9337..9339,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 311,
            column: 25,
            span: 9339..9341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 311,
            column: 26,
            span: 9341..9342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 312,
            column: 7,
            span: 9343..9349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 8,
            span: 9349..9350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 312,
            column: 13,
            span: 9350..9355,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 14,
            span: 9355..9356,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 312,
            column: 22,
            span: 9356..9364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 312,
            column: 24,
            span: 9365..9366,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 312,
            column: 25,
            span: 9366..9367,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 312,
            column: 29,
            span: 9368..9371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 312,
            column: 30,
            span: 9371..9372,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 312,
            column: 33,
            span: 9373..9375,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 312,
            column: 35,
            span: 9375..9377,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 312,
            column: 36,
            span: 9377..9378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 313,
            column: 7,
            span: 9379..9385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 313,
            column: 8,
            span: 9385..9386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 313,
            column: 13,
            span: 9386..9391,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 313,
            column: 14,
            span: 9391..9392,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 313,
            column: 17,
            span: 9392..9395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 18,
            span: 9395..9396,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 313,
            column: 21,
            span: 9397..9399,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 313,
            column: 23,
            span: 9399..9401,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 313,
            column: 24,
            span: 9401..9402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 314,
            column: 7,
            span: 9403..9409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 314,
            column: 8,
            span: 9409..9410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 314,
            column: 13,
            span: 9410..9415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 314,
            column: 14,
            span: 9415..9416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 314,
            column: 16,
            span: 9416..9418,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 314,
            column: 17,
            span: 9418..9419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 314,
            column: 22,
            span: 9419..9424,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 314,
            column: 23,
            span: 9424..9425,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 314,
            column: 26,
            span: 9426..9428,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 314,
            column: 28,
            span: 9428..9430,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 314,
            column: 29,
            span: 9430..9431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 315,
            column: 7,
            span: 9432..9438,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 8,
            span: 9438..9439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "count",
        ),
        position: Position {
            line: 315,
            column: 13,
            span: 9439..9444,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 315,
            column: 14,
            span: 9444..9445,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 315,
            column: 17,
            span: 9445..9448,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 315,
            column: 18,
            span: 9448..9449,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 21,
            span: 9449..9452,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 22,
            span: 9452..9453,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 315,
            column: 25,
            span: 9454..9456,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 315,
            column: 29,
            span: 9456..9460,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 315,
            column: 30,
            span: 9460..9461,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 320,
            column: 9,
            span: 9486..9494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 320,
            column: 12,
            span: 9495..9497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 320,
            column: 14,
            span: 9498..9499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 320,
            column: 15,
            span: 9499..9500,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 320,
            column: 16,
            span: 9500..9501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 320,
            column: 18,
            span: 9502..9503,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 320,
            column: 19,
            span: 9503..9504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 320,
            column: 21,
            span: 9505..9506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 320,
            column: 22,
            span: 9506..9507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 321,
            column: 4,
            span: 9510..9511,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 321,
            column: 6,
            span: 9512..9513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 321,
            column: 8,
            span: 9514..9515,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 321,
            column: 11,
            span: 9516..9518,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 321,
            column: 0,
            span: 9518..9520,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 322,
            column: 9,
            span: 9523..9529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 322,
            column: 11,
            span: 9530..9531,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 322,
            column: 12,
            span: 9531..9532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 322,
            column: 17,
            span: 9532..9537,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 18,
            span: 9537..9538,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 322,
            column: 24,
            span: 9538..9544,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 322,
            column: 25,
            span: 9544..9545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 322,
            column: 31,
            span: 9545..9551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 322,
            column: 32,
            span: 9551..9552,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%s %d; return 1\"",
        ),
        position: Position {
            line: 322,
            column: 49,
            span: 9552..9569,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 322,
            column: 50,
            span: 9569..9570,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 322,
            column: 52,
            span: 9571..9572,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 322,
            column: 53,
            span: 9572..9573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 322,
            column: 55,
            span: 9574..9575,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 56,
            span: 9575..9576,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 322,
            column: 57,
            span: 9576..9577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 322,
            column: 59,
            span: 9578..9579,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 322,
            column: 60,
            span: 9579..9580,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 323,
            column: 0,
            span: 9581..9584,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 325,
            column: 6,
            span: 9586..9591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hfunc",
        ),
        position: Position {
            line: 325,
            column: 12,
            span: 9592..9597,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 325,
            column: 14,
            span: 9598..9599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 325,
            column: 21,
            span: 9600..9606,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 325,
            column: 22,
            span: 9606..9607,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        position: Position {
            line: 325,
            column: 28,
            span: 9607..9613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 325,
            column: 29,
            span: 9613..9614,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 325,
            column: 31,
            span: 9614..9616,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 325,
            column: 32,
            span: 9616..9617,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 325,
            column: 35,
            span: 9618..9620,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 325,
            column: 36,
            span: 9620..9621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 326,
            column: 7,
            span: 9665..9671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 326,
            column: 8,
            span: 9671..9672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 326,
            column: 13,
            span: 9672..9677,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 326,
            column: 14,
            span: 9677..9678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getupvalue",
        ),
        position: Position {
            line: 326,
            column: 24,
            span: 9678..9688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 326,
            column: 25,
            span: 9688..9689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hfunc",
        ),
        position: Position {
            line: 326,
            column: 30,
            span: 9689..9694,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 326,
            column: 31,
            span: 9694..9695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 326,
            column: 33,
            span: 9695..9697,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 34,
            span: 9697..9698,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 326,
            column: 35,
            span: 9698..9699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 327,
            column: 7,
            span: 9700..9706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 327,
            column: 8,
            span: 9706..9707,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 327,
            column: 10,
            span: 9707..9709,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 327,
            column: 11,
            span: 9709..9710,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 327,
            column: 21,
            span: 9710..9720,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 327,
            column: 22,
            span: 9720..9721,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 327,
            column: 24,
            span: 9722..9723,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 327,
            column: 25,
            span: 9723..9724,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 327,
            column: 26,
            span: 9724..9725,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 327,
            column: 29,
            span: 9726..9728,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 327,
            column: 33,
            span: 9729..9732,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 327,
            column: 34,
            span: 9732..9733,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 328,
            column: 7,
            span: 9734..9740,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 328,
            column: 8,
            span: 9740..9741,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 328,
            column: 10,
            span: 9741..9743,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 328,
            column: 11,
            span: 9743..9744,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 328,
            column: 21,
            span: 9744..9754,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 328,
            column: 22,
            span: 9754..9755,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 328,
            column: 28,
            span: 9756..9761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 328,
            column: 29,
            span: 9761..9762,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 328,
            column: 32,
            span: 9763..9765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 328,
            column: 38,
            span: 9766..9771,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 328,
            column: 39,
            span: 9771..9772,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 329,
            column: 7,
            span: 9773..9779,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 8,
            span: 9779..9780,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 329,
            column: 10,
            span: 9780..9782,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 329,
            column: 11,
            span: 9782..9783,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 329,
            column: 21,
            span: 9783..9793,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 329,
            column: 22,
            span: 9793..9794,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 329,
            column: 25,
            span: 9794..9797,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 26,
            span: 9797..9798,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 329,
            column: 29,
            span: 9799..9801,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        position: Position {
            line: 329,
            column: 34,
            span: 9802..9806,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 329,
            column: 35,
            span: 9806..9807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 330,
            column: 7,
            span: 9808..9814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 8,
            span: 9814..9815,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 330,
            column: 10,
            span: 9815..9817,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 330,
            column: 11,
            span: 9817..9818,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tostring\"",
        ),
        position: Position {
            line: 330,
            column: 21,
            span: 9818..9828,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 22,
            span: 9828..9829,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 330,
            column: 25,
            span: 9829..9832,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 330,
            column: 26,
            span: 9832..9833,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 330,
            column: 28,
            span: 9833..9835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 29,
            span: 9835..9836,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 330,
            column: 32,
            span: 9837..9839,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 330,
            column: 36,
            span: 9840..9843,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 330,
            column: 37,
            span: 9843..9844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 331,
            column: 7,
            span: 9845..9851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 8,
            span: 9851..9852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 331,
            column: 10,
            span: 9852..9854,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 331,
            column: 11,
            span: 9854..9855,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 331,
            column: 20,
            span: 9855..9864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 331,
            column: 21,
            span: 9864..9865,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 331,
            column: 23,
            span: 9866..9867,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 331,
            column: 24,
            span: 9867..9868,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 25,
            span: 9868..9869,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 331,
            column: 28,
            span: 9870..9872,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 331,
            column: 30,
            span: 9872..9874,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 331,
            column: 31,
            span: 9874..9875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 332,
            column: 7,
            span: 9876..9882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 8,
            span: 9882..9883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 332,
            column: 10,
            span: 9883..9885,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 332,
            column: 11,
            span: 9885..9886,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 332,
            column: 20,
            span: 9886..9895,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 21,
            span: 9895..9896,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 332,
            column: 23,
            span: 9897..9898,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 24,
            span: 9897..9899,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 25,
            span: 9899..9900,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 26,
            span: 9899..9901,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 332,
            column: 27,
            span: 9901..9902,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 28,
            span: 9901..9903,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 332,
            column: 29,
            span: 9903..9904,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 30,
            span: 9904..9905,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 332,
            column: 33,
            span: 9906..9908,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 332,
            column: 35,
            span: 9908..9910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 332,
            column: 36,
            span: 9910..9911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 333,
            column: 7,
            span: 9912..9918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 8,
            span: 9918..9919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 333,
            column: 10,
            span: 9919..9921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 333,
            column: 11,
            span: 9921..9922,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 333,
            column: 20,
            span: 9922..9931,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 333,
            column: 21,
            span: 9931..9932,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\\0\\0a\"",
        ),
        position: Position {
            line: 333,
            column: 32,
            span: 9933..9943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 33,
            span: 9943..9944,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 333,
            column: 36,
            span: 9945..9947,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 333,
            column: 38,
            span: 9947..9949,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 333,
            column: 39,
            span: 9949..9950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 334,
            column: 7,
            span: 9951..9957,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 8,
            span: 9957..9958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 334,
            column: 10,
            span: 9958..9960,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 11,
            span: 9960..9961,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 334,
            column: 20,
            span: 9961..9970,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 334,
            column: 21,
            span: 9970..9971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 334,
            column: 23,
            span: 9972..9973,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 334,
            column: 24,
            span: 9973..9974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 334,
            column: 35,
            span: 9974..9985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 334,
            column: 36,
            span: 9985..9986,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 37,
            span: 9985..9987,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 38,
            span: 9987..9988,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 39,
            span: 9988..9989,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 334,
            column: 42,
            span: 9990..9992,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 334,
            column: 44,
            span: 9992..9994,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 334,
            column: 45,
            span: 9994..9995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 335,
            column: 7,
            span: 9996..10002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 8,
            span: 10002..10003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 335,
            column: 10,
            span: 10003..10005,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 11,
            span: 10005..10006,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 335,
            column: 20,
            span: 10006..10015,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 335,
            column: 21,
            span: 10015..10016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 335,
            column: 23,
            span: 10017..10018,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 335,
            column: 24,
            span: 10018..10019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 335,
            column: 35,
            span: 10019..10030,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 335,
            column: 36,
            span: 10030..10031,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 335,
            column: 39,
            span: 10030..10034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 40,
            span: 10034..10035,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 41,
            span: 10035..10036,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 335,
            column: 44,
            span: 10037..10039,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "101",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 335,
            column: 48,
            span: 10039..10043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 335,
            column: 49,
            span: 10043..10044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 336,
            column: 7,
            span: 10045..10051,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 8,
            span: 10051..10052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 336,
            column: 10,
            span: 10052..10054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 336,
            column: 11,
            span: 10054..10055,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 336,
            column: 20,
            span: 10055..10064,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 336,
            column: 21,
            span: 10064..10065,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "124",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 336,
            column: 25,
            span: 10065..10069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 26,
            span: 10069..10070,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 336,
            column: 29,
            span: 10071..10073,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 336,
            column: 31,
            span: 10073..10075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 336,
            column: 32,
            span: 10075..10076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 337,
            column: 7,
            span: 10077..10083,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 8,
            span: 10083..10084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 337,
            column: 10,
            span: 10084..10086,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 337,
            column: 11,
            span: 10086..10087,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize\"",
        ),
        position: Position {
            line: 337,
            column: 20,
            span: 10087..10096,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 337,
            column: 21,
            span: 10096..10097,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 337,
            column: 26,
            span: 10098..10102,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 27,
            span: 10102..10103,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 337,
            column: 30,
            span: 10104..10106,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 337,
            column: 32,
            span: 10106..10108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 337,
            column: 33,
            span: 10108..10109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 338,
            column: 7,
            span: 10110..10116,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 8,
            span: 10116..10117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 338,
            column: 10,
            span: 10117..10119,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 338,
            column: 11,
            span: 10119..10120,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 338,
            column: 21,
            span: 10120..10130,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 338,
            column: 22,
            span: 10130..10131,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 338,
            column: 24,
            span: 10132..10133,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 338,
            column: 25,
            span: 10133..10134,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 26,
            span: 10134..10135,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 338,
            column: 29,
            span: 10136..10138,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 338,
            column: 31,
            span: 10138..10140,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 338,
            column: 32,
            span: 10140..10141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 339,
            column: 7,
            span: 10142..10148,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 8,
            span: 10148..10149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 339,
            column: 10,
            span: 10149..10151,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 339,
            column: 11,
            span: 10151..10152,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 339,
            column: 21,
            span: 10152..10162,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 339,
            column: 22,
            span: 10162..10163,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"12\"",
        ),
        position: Position {
            line: 339,
            column: 27,
            span: 10164..10168,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 28,
            span: 10168..10169,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 339,
            column: 31,
            span: 10170..10172,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 339,
            column: 34,
            span: 10172..10175,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 339,
            column: 35,
            span: 10175..10176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 340,
            column: 7,
            span: 10177..10183,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 8,
            span: 10183..10184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 340,
            column: 10,
            span: 10184..10186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 340,
            column: 11,
            span: 10186..10187,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 340,
            column: 21,
            span: 10187..10197,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 340,
            column: 22,
            span: 10197..10198,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"s2\"",
        ),
        position: Position {
            line: 340,
            column: 27,
            span: 10199..10203,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 28,
            span: 10203..10204,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 340,
            column: 31,
            span: 10205..10207,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 340,
            column: 33,
            span: 10207..10209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 340,
            column: 34,
            span: 10209..10210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 341,
            column: 7,
            span: 10211..10217,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 8,
            span: 10217..10218,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 341,
            column: 10,
            span: 10218..10220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 341,
            column: 11,
            span: 10220..10221,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tonumber\"",
        ),
        position: Position {
            line: 341,
            column: 21,
            span: 10221..10231,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 22,
            span: 10231..10232,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 24,
            span: 10232..10234,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 341,
            column: 25,
            span: 10234..10235,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 28,
            span: 10235..10238,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 29,
            span: 10238..10239,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 341,
            column: 32,
            span: 10240..10242,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 341,
            column: 34,
            span: 10242..10244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 341,
            column: 35,
            span: 10244..10245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 342,
            column: 7,
            span: 10246..10252,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 8,
            span: 10252..10253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 342,
            column: 10,
            span: 10253..10255,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 342,
            column: 11,
            span: 10255..10256,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 342,
            column: 22,
            span: 10256..10267,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 342,
            column: 23,
            span: 10267..10268,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 26,
            span: 10268..10271,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 27,
            span: 10271..10272,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 342,
            column: 30,
            span: 10273..10275,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 342,
            column: 32,
            span: 10275..10277,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 342,
            column: 33,
            span: 10277..10278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 343,
            column: 7,
            span: 10279..10285,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 8,
            span: 10285..10286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 343,
            column: 10,
            span: 10286..10288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 343,
            column: 11,
            span: 10288..10289,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 343,
            column: 22,
            span: 10289..10300,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 343,
            column: 23,
            span: 10300..10301,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 343,
            column: 28,
            span: 10302..10306,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 29,
            span: 10306..10307,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 343,
            column: 32,
            span: 10308..10310,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 343,
            column: 34,
            span: 10310..10312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 343,
            column: 35,
            span: 10312..10313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 344,
            column: 7,
            span: 10314..10320,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 8,
            span: 10320..10321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 344,
            column: 10,
            span: 10321..10323,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 11,
            span: 10323..10324,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 344,
            column: 22,
            span: 10324..10335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 344,
            column: 23,
            span: 10335..10336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 344,
            column: 25,
            span: 10337..10338,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 344,
            column: 26,
            span: 10338..10339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 344,
            column: 38,
            span: 10339..10351,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 344,
            column: 39,
            span: 10351..10352,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 344,
            column: 41,
            span: 10351..10354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 42,
            span: 10354..10355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 43,
            span: 10355..10356,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 344,
            column: 46,
            span: 10357..10359,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 344,
            column: 49,
            span: 10359..10362,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 344,
            column: 50,
            span: 10362..10363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 345,
            column: 7,
            span: 10364..10370,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 345,
            column: 8,
            span: 10370..10371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 345,
            column: 10,
            span: 10371..10373,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 345,
            column: 11,
            span: 10373..10374,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 345,
            column: 22,
            span: 10374..10385,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 345,
            column: 23,
            span: 10385..10386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 345,
            column: 26,
            span: 10387..10389,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 345,
            column: 27,
            span: 10389..10390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 345,
            column: 31,
            span: 10390..10394,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 345,
            column: 32,
            span: 10394..10395,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 345,
            column: 35,
            span: 10396..10398,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 345,
            column: 37,
            span: 10398..10400,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 345,
            column: 38,
            span: 10400..10401,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 346,
            column: 7,
            span: 10432..10438,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 346,
            column: 8,
            span: 10438..10439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 346,
            column: 10,
            span: 10439..10441,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 346,
            column: 11,
            span: 10441..10442,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 346,
            column: 22,
            span: 10442..10453,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 346,
            column: 23,
            span: 10453..10454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hfunc",
        ),
        position: Position {
            line: 346,
            column: 29,
            span: 10455..10460,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 346,
            column: 30,
            span: 10460..10461,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 346,
            column: 33,
            span: 10462..10464,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 346,
            column: 35,
            span: 10464..10466,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 346,
            column: 36,
            span: 10466..10467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 347,
            column: 7,
            span: 10497..10503,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 8,
            span: 10503..10504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 347,
            column: 10,
            span: 10504..10506,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 11,
            span: 10506..10507,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 347,
            column: 22,
            span: 10507..10518,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 347,
            column: 23,
            span: 10518..10519,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 347,
            column: 32,
            span: 10520..10528,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 347,
            column: 34,
            span: 10529..10530,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 35,
            span: 10530..10531,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 347,
            column: 39,
            span: 10532..10535,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 40,
            span: 10535..10536,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 347,
            column: 43,
            span: 10537..10539,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 347,
            column: 45,
            span: 10539..10541,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 347,
            column: 46,
            span: 10541..10542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 348,
            column: 7,
            span: 10561..10567,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 348,
            column: 8,
            span: 10567..10568,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 348,
            column: 10,
            span: 10568..10570,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 348,
            column: 11,
            span: 10570..10571,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"topointer\"",
        ),
        position: Position {
            line: 348,
            column: 22,
            span: 10571..10582,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 348,
            column: 23,
            span: 10582..10583,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 348,
            column: 26,
            span: 10584..10586,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 348,
            column: 27,
            span: 10586..10587,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        position: Position {
            line: 348,
            column: 32,
            span: 10587..10592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 348,
            column: 33,
            span: 10592..10593,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 348,
            column: 36,
            span: 10594..10596,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 348,
            column: 38,
            span: 10596..10598,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 348,
            column: 39,
            span: 10598..10599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 349,
            column: 7,
            span: 10619..10625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 349,
            column: 8,
            span: 10625..10626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 349,
            column: 10,
            span: 10626..10628,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 349,
            column: 11,
            span: 10628..10629,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        position: Position {
            line: 349,
            column: 21,
            span: 10629..10639,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 349,
            column: 22,
            span: 10639..10640,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 349,
            column: 25,
            span: 10640..10643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 349,
            column: 26,
            span: 10643..10644,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 349,
            column: 29,
            span: 10645..10647,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 349,
            column: 31,
            span: 10647..10649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 349,
            column: 32,
            span: 10649..10650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 350,
            column: 7,
            span: 10651..10657,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 8,
            span: 10657..10658,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 350,
            column: 10,
            span: 10658..10660,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 11,
            span: 10660..10661,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        position: Position {
            line: 350,
            column: 21,
            span: 10661..10671,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 350,
            column: 22,
            span: 10671..10672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 350,
            column: 24,
            span: 10673..10674,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 350,
            column: 25,
            span: 10674..10675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 350,
            column: 37,
            span: 10675..10687,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 350,
            column: 38,
            span: 10687..10688,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 350,
            column: 40,
            span: 10687..10690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 41,
            span: 10690..10691,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 42,
            span: 10691..10692,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 350,
            column: 45,
            span: 10693..10695,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 350,
            column: 47,
            span: 10695..10697,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 350,
            column: 48,
            span: 10697..10698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 351,
            column: 7,
            span: 10699..10705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 8,
            span: 10705..10706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 351,
            column: 10,
            span: 10706..10708,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 351,
            column: 11,
            span: 10708..10709,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        position: Position {
            line: 351,
            column: 21,
            span: 10709..10719,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 351,
            column: 22,
            span: 10719..10720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 351,
            column: 25,
            span: 10721..10723,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 351,
            column: 26,
            span: 10723..10724,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "read",
        ),
        position: Position {
            line: 351,
            column: 30,
            span: 10724..10728,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 31,
            span: 10728..10729,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 351,
            column: 34,
            span: 10730..10732,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 351,
            column: 36,
            span: 10732..10734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 351,
            column: 37,
            span: 10734..10735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 352,
            column: 7,
            span: 10760..10766,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 352,
            column: 8,
            span: 10766..10767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 352,
            column: 10,
            span: 10767..10769,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 352,
            column: 11,
            span: 10769..10770,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"func2num\"",
        ),
        position: Position {
            line: 352,
            column: 21,
            span: 10770..10780,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 352,
            column: 22,
            span: 10780..10781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "hfunc",
        ),
        position: Position {
            line: 352,
            column: 28,
            span: 10782..10787,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 352,
            column: 29,
            span: 10787..10788,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 352,
            column: 32,
            span: 10789..10791,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 352,
            column: 34,
            span: 10791..10793,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 352,
            column: 35,
            span: 10793..10794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 353,
            column: 2,
            span: 10833..10834,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 353,
            column: 4,
            span: 10835..10836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "to",
        ),
        position: Position {
            line: 353,
            column: 7,
            span: 10837..10839,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 353,
            column: 8,
            span: 10839..10840,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"tocfunction\"",
        ),
        position: Position {
            line: 353,
            column: 21,
            span: 10840..10853,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 353,
            column: 22,
            span: 10853..10854,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 353,
            column: 27,
            span: 10855..10859,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 353,
            column: 28,
            span: 10859..10860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        position: Position {
            line: 353,
            column: 31,
            span: 10860..10863,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 353,
            column: 32,
            span: 10863..10864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 354,
            column: 7,
            span: 10865..10871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 8,
            span: 10871..10872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 354,
            column: 9,
            span: 10872..10873,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 10,
            span: 10873..10874,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 354,
            column: 11,
            span: 10873..10875,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 12,
            span: 10875..10876,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 354,
            column: 15,
            span: 10877..10879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 354,
            column: 20,
            span: 10880..10884,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 354,
            column: 21,
            span: 10884..10885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        position: Position {
            line: 354,
            column: 24,
            span: 10885..10888,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 354,
            column: 25,
            span: 10888..10889,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 354,
            column: 26,
            span: 10888..10890,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 27,
            span: 10890..10891,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 354,
            column: 31,
            span: 10892..10895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 354,
            column: 33,
            span: 10896..10897,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 354,
            column: 36,
            span: 10898..10900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 354,
            column: 41,
            span: 10901..10905,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 354,
            column: 42,
            span: 10905..10906,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "deg",
        ),
        position: Position {
            line: 354,
            column: 45,
            span: 10906..10909,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 354,
            column: 46,
            span: 10909..10910,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 357,
            column: 6,
            span: 10913..10918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 357,
            column: 7,
            span: 10918..10919,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing panic function\"",
        ),
        position: Position {
            line: 357,
            column: 31,
            span: 10919..10943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 357,
            column: 32,
            span: 10943..10944,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 358,
            column: 0,
            span: 10945..10947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 360,
            column: 9,
            span: 10969..10975,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 10,
            span: 10975..10976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 360,
            column: 11,
            span: 10976..10977,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 360,
            column: 12,
            span: 10977..10978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 360,
            column: 22,
            span: 10978..10988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 360,
            column: 23,
            span: 10988..10989,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring hi; error\"",
        ),
        position: Position {
            line: 360,
            column: 45,
            span: 10989..11011,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 46,
            span: 11011..11012,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 360,
            column: 49,
            span: 11013..11015,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        position: Position {
            line: 360,
            column: 54,
            span: 11016..11020,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 360,
            column: 55,
            span: 11020..11021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 363,
            column: 9,
            span: 11059..11065,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 10,
            span: 11065..11066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 363,
            column: 11,
            span: 11066..11067,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 363,
            column: 12,
            span: 11067..11068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 363,
            column: 22,
            span: 11068..11078,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 363,
            column: 23,
            span: 11078..11079,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring hi; error;\"",
        ),
        position: Position {
            line: 363,
            column: 46,
            span: 11079..11102,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 363,
            column: 47,
            span: 11102..11103,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[checkstack 5 XX\n      pushstring ' alo'\n      pushstring ' mundo'\n      concat 3]]",
        ),
        position: Position {
            line: 367,
            column: 17,
            span: 11108..11192,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 18,
            span: 11192..11193,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 367,
            column: 21,
            span: 11194..11196,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi alo mundo\"",
        ),
        position: Position {
            line: 367,
            column: 36,
            span: 11197..11211,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 367,
            column: 37,
            span: 11211..11212,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 370,
            column: 9,
            span: 11247..11253,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 10,
            span: 11253..11254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 370,
            column: 11,
            span: 11254..11255,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 370,
            column: 12,
            span: 11255..11256,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 370,
            column: 22,
            span: 11256..11266,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 370,
            column: 23,
            span: 11266..11267,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring 4\"",
        ),
        position: Position {
            line: 370,
            column: 37,
            span: 11267..11281,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 370,
            column: 38,
            span: 11281..11282,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 370,
            column: 41,
            span: 11283..11285,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bad argument #4 (string expected, got no value)\"",
        ),
        position: Position {
            line: 371,
            column: 56,
            span: 11292..11341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 371,
            column: 57,
            span: 11341..11342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 375,
            column: 4,
            span: 11367..11368,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 375,
            column: 5,
            span: 11368..11369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 375,
            column: 13,
            span: 11369..11377,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 14,
            span: 11377..11378,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 375,
            column: 15,
            span: 11378..11379,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 375,
            column: 16,
            span: 11379..11380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 375,
            column: 24,
            span: 11380..11388,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 375,
            column: 25,
            span: 11388..11389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 26,
            span: 11389..11390,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 375,
            column: 27,
            span: 11390..11391,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 375,
            column: 32,
            span: 11390..11396,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 375,
            column: 33,
            span: 11396..11397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 376,
            column: 9,
            span: 11433..11439,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 10,
            span: 11439..11440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 376,
            column: 11,
            span: 11440..11441,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 376,
            column: 12,
            span: 11441..11442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 376,
            column: 22,
            span: 11442..11452,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 376,
            column: 23,
            span: 11452..11453,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newuserdata 20000\"",
        ),
        position: Position {
            line: 376,
            column: 42,
            span: 11453..11472,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 43,
            span: 11472..11473,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 376,
            column: 46,
            span: 11474..11476,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        position: Position {
            line: 376,
            column: 66,
            span: 11477..11496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 376,
            column: 67,
            span: 11496..11497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 377,
            column: 4,
            span: 11500..11501,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 377,
            column: 5,
            span: 11501..11502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 377,
            column: 13,
            span: 11502..11510,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 377,
            column: 14,
            span: 11510..11511,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 377,
            column: 15,
            span: 11510..11512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 377,
            column: 16,
            span: 11512..11513,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 380,
            column: 5,
            span: 11565..11567,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 380,
            column: 9,
            span: 11568..11571,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 380,
            column: 15,
            span: 11572..11577,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 380,
            column: 0,
            span: 11578..11582,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 381,
            column: 10,
            span: 11587..11592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 381,
            column: 14,
            span: 11593..11596,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 381,
            column: 16,
            span: 11597..11598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 381,
            column: 18,
            span: 11599..11600,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 381,
            column: 19,
            span: 11600..11601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkpanic",
        ),
        position: Position {
            line: 381,
            column: 29,
            span: 11601..11611,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n      pushstring \"function f() f() end\"\n      loadstring -1; call 0 0\n      getglobal f; call 0 0\n    ]]",
        ),
        position: Position {
            line: 385,
            column: 7,
            span: 11611..11718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 386,
            column: 11,
            span: 11723..11729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 12,
            span: 11729..11730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 386,
            column: 18,
            span: 11730..11736,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 386,
            column: 19,
            span: 11736..11737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 386,
            column: 23,
            span: 11737..11741,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 386,
            column: 24,
            span: 11741..11742,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 386,
            column: 27,
            span: 11742..11745,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 386,
            column: 28,
            span: 11745..11746,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        position: Position {
            line: 386,
            column: 45,
            span: 11747..11763,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 46,
            span: 11763..11764,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 386,
            column: 47,
            span: 11764..11765,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 387,
            column: 0,
            span: 11768..11771,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 389,
            column: 0,
            span: 11773..11776,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 392,
            column: 3,
            span: 11802..11804,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 392,
            column: 7,
            span: 11805..11808,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 392,
            column: 13,
            span: 11809..11814,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 392,
            column: 0,
            span: 11815..11819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 393,
            column: 8,
            span: 11822..11827,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 393,
            column: 9,
            span: 11827..11828,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow\"",
        ),
        position: Position {
            line: 393,
            column: 33,
            span: 11828..11852,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 393,
            column: 34,
            span: 11852..11853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 394,
            column: 17,
            span: 11856..11870,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 394,
            column: 18,
            span: 11870..11871,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 394,
            column: 24,
            span: 11871..11877,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 394,
            column: 25,
            span: 11877..11878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 395,
            column: 11,
            span: 11881..11889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 395,
            column: 12,
            span: 11889..11890,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXXX\"",
        ),
        position: Position {
            line: 395,
            column: 18,
            span: 11890..11896,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 395,
            column: 19,
            span: 11896..11897,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 395,
            column: 21,
            span: 11898..11899,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 395,
            column: 22,
            span: 11899..11900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 395,
            column: 27,
            span: 11900..11905,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 395,
            column: 28,
            span: 11905..11906,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack 1000023 XXXX\"",
        ),
        position: Position {
            line: 395,
            column: 54,
            span: 11907..11932,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 395,
            column: 55,
            span: 11932..11933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 397,
            column: 11,
            span: 11982..11990,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 397,
            column: 12,
            span: 11990..11991,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^stack overflow$\"",
        ),
        position: Position {
            line: 397,
            column: 30,
            span: 11991..12009,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 397,
            column: 31,
            span: 12009..12010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 397,
            column: 33,
            span: 12011..12012,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 397,
            column: 34,
            span: 12012..12013,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 397,
            column: 39,
            span: 12013..12018,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 397,
            column: 40,
            span: 12018..12019,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack 1000023 ''\"",
        ),
        position: Position {
            line: 397,
            column: 64,
            span: 12020..12043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 397,
            column: 65,
            span: 12043..12044,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 398,
            column: 8,
            span: 12047..12052,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 398,
            column: 10,
            span: 12053..12054,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 398,
            column: 12,
            span: 12055..12056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 398,
            column: 19,
            span: 12057..12063,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 398,
            column: 20,
            span: 12063..12064,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 398,
            column: 23,
            span: 12064..12067,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 398,
            column: 24,
            span: 12067..12068,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnil;checkstack 1 XX;\"",
        ),
        position: Position {
            line: 398,
            column: 50,
            span: 12068..12094,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 398,
            column: 51,
            span: 12094..12095,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 398,
            column: 59,
            span: 12095..12103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 398,
            column: 60,
            span: 12103..12104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 399,
            column: 11,
            span: 12107..12115,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 399,
            column: 12,
            span: 12115..12116,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 399,
            column: 22,
            span: 12116..12126,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 399,
            column: 23,
            span: 12126..12127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 399,
            column: 25,
            span: 12128..12129,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 399,
            column: 26,
            span: 12129..12130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 399,
            column: 31,
            span: 12130..12135,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 399,
            column: 32,
            span: 12135..12136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 399,
            column: 34,
            span: 12137..12138,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 399,
            column: 35,
            span: 12138..12139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 400,
            column: 17,
            span: 12142..12156,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 400,
            column: 18,
            span: 12156..12157,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 400,
            column: 27,
            span: 12157..12166,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 400,
            column: 28,
            span: 12166..12167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 401,
            column: 8,
            span: 12170..12175,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 401,
            column: 11,
            span: 12175..12178,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 402,
            column: 0,
            span: 12179..12182,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 404,
            column: 6,
            span: 12184..12189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 404,
            column: 10,
            span: 12190..12193,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 404,
            column: 12,
            span: 12194..12195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 404,
            column: 18,
            span: 12196..12201,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 404,
            column: 22,
            span: 12202..12205,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "500",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 404,
            column: 26,
            span: 12205..12209,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 404,
            column: 29,
            span: 12210..12212,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 404,
            column: 0,
            span: 12212..12218,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 405,
            column: 6,
            span: 12219..12224,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 405,
            column: 11,
            span: 12225..12229,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 405,
            column: 13,
            span: 12230..12231,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 405,
            column: 15,
            span: 12232..12233,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack \"",
        ),
        position: Position {
            line: 405,
            column: 28,
            span: 12233..12246,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 405,
            column: 31,
            span: 12247..12249,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 405,
            column: 33,
            span: 12250..12251,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 405,
            column: 36,
            span: 12251..12254,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 405,
            column: 38,
            span: 12255..12256,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 405,
            column: 40,
            span: 12256..12258,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 405,
            column: 42,
            span: 12259..12260,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 405,
            column: 46,
            span: 12260..12264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 405,
            column: 47,
            span: 12264..12265,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 405,
            column: 50,
            span: 12266..12268,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"msg\"",
        ),
        position: Position {
            line: 405,
            column: 56,
            span: 12269..12274,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 405,
            column: 57,
            span: 12274..12275,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newtable\"",
        ),
        position: Position {
            line: 405,
            column: 68,
            span: 12276..12286,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 405,
            column: 69,
            span: 12286..12287,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 406,
            column: 4,
            span: 12288..12291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 406,
            column: 6,
            span: 12292..12293,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 406,
            column: 8,
            span: 12294..12295,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 406,
            column: 10,
            span: 12295..12297,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 406,
            column: 11,
            span: 12297..12298,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 406,
            column: 14,
            span: 12298..12301,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 406,
            column: 0,
            span: 12302..12304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 407,
            column: 7,
            span: 12307..12311,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 407,
            column: 8,
            span: 12311..12312,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 407,
            column: 9,
            span: 12312..12313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 407,
            column: 13,
            span: 12313..12317,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 407,
            column: 15,
            span: 12318..12319,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 407,
            column: 17,
            span: 12319..12321,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 407,
            column: 18,
            span: 12321..12322,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 407,
            column: 20,
            span: 12323..12324,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum \"",
        ),
        position: Position {
            line: 407,
            column: 31,
            span: 12325..12335,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 407,
            column: 34,
            span: 12336..12338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 407,
            column: 0,
            span: 12339..12340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 408,
            column: 7,
            span: 12343..12347,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 408,
            column: 8,
            span: 12347..12348,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 408,
            column: 9,
            span: 12348..12349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 408,
            column: 13,
            span: 12349..12353,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 408,
            column: 15,
            span: 12354..12355,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 408,
            column: 17,
            span: 12355..12357,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 408,
            column: 18,
            span: 12357..12358,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 408,
            column: 20,
            span: 12359..12360,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum \"",
        ),
        position: Position {
            line: 408,
            column: 31,
            span: 12361..12371,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 408,
            column: 34,
            span: 12372..12374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 408,
            column: 36,
            span: 12375..12376,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 408,
            column: 38,
            span: 12377..12378,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 408,
            column: 0,
            span: 12378..12381,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 409,
            column: 0,
            span: 12382..12385,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 411,
            column: 5,
            span: 12387..12391,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 411,
            column: 6,
            span: 12391..12392,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 411,
            column: 7,
            span: 12392..12393,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 411,
            column: 11,
            span: 12393..12397,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 411,
            column: 13,
            span: 12398..12399,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 411,
            column: 15,
            span: 12399..12401,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 411,
            column: 16,
            span: 12401..12402,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 411,
            column: 18,
            span: 12403..12404,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawgeti R 2\"",
        ),
        position: Position {
            line: 411,
            column: 32,
            span: 12405..12418,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 412,
            column: 5,
            span: 12453..12457,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 412,
            column: 6,
            span: 12457..12458,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 412,
            column: 7,
            span: 12458..12459,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 412,
            column: 11,
            span: 12459..12463,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 412,
            column: 13,
            span: 12464..12465,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 412,
            column: 15,
            span: 12465..12467,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 412,
            column: 16,
            span: 12467..12468,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 412,
            column: 18,
            span: 12469..12470,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert \"",
        ),
        position: Position {
            line: 412,
            column: 28,
            span: 12471..12480,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 412,
            column: 31,
            span: 12481..12483,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 412,
            column: 33,
            span: 12484..12485,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 412,
            column: 34,
            span: 12485..12486,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 412,
            column: 35,
            span: 12485..12487,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 412,
            column: 36,
            span: 12487..12488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 412,
            column: 39,
            span: 12488..12491,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 412,
            column: 41,
            span: 12492..12493,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 412,
            column: 43,
            span: 12493..12495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 412,
            column: 44,
            span: 12495..12496,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 414,
            column: 4,
            span: 12498..12501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 414,
            column: 6,
            span: 12502..12503,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 414,
            column: 8,
            span: 12504..12505,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 414,
            column: 10,
            span: 12505..12507,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 414,
            column: 11,
            span: 12507..12508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 414,
            column: 14,
            span: 12508..12511,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 414,
            column: 0,
            span: 12512..12514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 415,
            column: 7,
            span: 12517..12521,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 415,
            column: 8,
            span: 12521..12522,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 415,
            column: 9,
            span: 12522..12523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 415,
            column: 13,
            span: 12523..12527,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 415,
            column: 15,
            span: 12528..12529,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 415,
            column: 17,
            span: 12529..12531,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 415,
            column: 18,
            span: 12531..12532,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 415,
            column: 20,
            span: 12533..12534,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable \"",
        ),
        position: Position {
            line: 415,
            column: 32,
            span: 12535..12546,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 415,
            column: 35,
            span: 12547..12549,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 415,
            column: 37,
            span: 12550..12551,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 38,
            span: 12551..12552,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 415,
            column: 39,
            span: 12551..12553,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 415,
            column: 40,
            span: 12553..12554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 415,
            column: 41,
            span: 12554..12555,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 415,
            column: 44,
            span: 12555..12558,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 415,
            column: 46,
            span: 12559..12560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 415,
            column: 48,
            span: 12561..12562,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 415,
            column: 50,
            span: 12563..12564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 415,
            column: 52,
            span: 12564..12566,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 53,
            span: 12566..12567,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 415,
            column: 55,
            span: 12568..12569,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 415,
            column: 57,
            span: 12569..12571,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 415,
            column: 58,
            span: 12571..12572,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 416,
            column: 0,
            span: 12573..12576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 418,
            column: 5,
            span: 12578..12582,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 418,
            column: 6,
            span: 12582..12583,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 418,
            column: 7,
            span: 12583..12584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 418,
            column: 11,
            span: 12584..12588,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 418,
            column: 13,
            span: 12589..12590,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 418,
            column: 15,
            span: 12590..12592,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 418,
            column: 16,
            span: 12592..12593,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 418,
            column: 18,
            span: 12594..12595,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return 2\"",
        ),
        position: Position {
            line: 418,
            column: 29,
            span: 12596..12606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 420,
            column: 5,
            span: 12608..12612,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 420,
            column: 7,
            span: 12613..12614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 420,
            column: 13,
            span: 12615..12620,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 420,
            column: 14,
            span: 12620..12621,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 420,
            column: 20,
            span: 12621..12627,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 420,
            column: 21,
            span: 12627..12628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 420,
            column: 25,
            span: 12628..12632,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 420,
            column: 26,
            span: 12632..12633,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        position: Position {
            line: 420,
            column: 30,
            span: 12634..12637,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 420,
            column: 31,
            span: 12637..12638,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 421,
            column: 6,
            span: 12639..12644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 421,
            column: 8,
            span: 12645..12646,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 421,
            column: 9,
            span: 12646..12647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 421,
            column: 11,
            span: 12648..12649,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 421,
            column: 13,
            span: 12650..12651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 421,
            column: 15,
            span: 12652..12653,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 421,
            column: 16,
            span: 12653..12654,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 421,
            column: 21,
            span: 12654..12659,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 421,
            column: 22,
            span: 12659..12660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 421,
            column: 26,
            span: 12660..12664,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 421,
            column: 27,
            span: 12664..12665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 422,
            column: 7,
            span: 12666..12672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 422,
            column: 8,
            span: 12672..12673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 422,
            column: 9,
            span: 12673..12674,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 422,
            column: 12,
            span: 12675..12677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 422,
            column: 15,
            span: 12678..12680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 422,
            column: 16,
            span: 12680..12681,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 423,
            column: 4,
            span: 12682..12685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 423,
            column: 6,
            span: 12686..12687,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 423,
            column: 8,
            span: 12688..12689,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 423,
            column: 10,
            span: 12689..12691,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 423,
            column: 11,
            span: 12691..12692,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 423,
            column: 14,
            span: 12692..12695,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 423,
            column: 17,
            span: 12696..12698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 423,
            column: 24,
            span: 12699..12705,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 423,
            column: 25,
            span: 12705..12706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 423,
            column: 26,
            span: 12706..12707,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 423,
            column: 27,
            span: 12707..12708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 423,
            column: 28,
            span: 12708..12709,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 423,
            column: 29,
            span: 12709..12710,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 423,
            column: 32,
            span: 12711..12713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 423,
            column: 34,
            span: 12714..12715,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 423,
            column: 35,
            span: 12715..12716,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 423,
            column: 37,
            span: 12715..12718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 423,
            column: 38,
            span: 12718..12719,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 423,
            column: 39,
            span: 12719..12720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 423,
            column: 41,
            span: 12721..12722,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 423,
            column: 42,
            span: 12722..12723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 423,
            column: 43,
            span: 12723..12724,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 423,
            column: 44,
            span: 12724..12725,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 423,
            column: 46,
            span: 12726..12727,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 423,
            column: 50,
            span: 12728..12731,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 423,
            column: 0,
            span: 12732..12735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 424,
            column: 7,
            span: 12736..12742,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 424,
            column: 8,
            span: 12742..12743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        position: Position {
            line: 424,
            column: 12,
            span: 12743..12747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 424,
            column: 13,
            span: 12747..12748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 424,
            column: 14,
            span: 12748..12749,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 15,
            span: 12749..12750,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 424,
            column: 18,
            span: 12751..12753,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 424,
            column: 22,
            span: 12754..12757,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 424,
            column: 23,
            span: 12757..12758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "prog",
        ),
        position: Position {
            line: 425,
            column: 5,
            span: 12759..12763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 425,
            column: 6,
            span: 12763..12764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "g",
        ),
        position: Position {
            line: 425,
            column: 8,
            span: 12765..12766,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 425,
            column: 9,
            span: 12766..12767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 425,
            column: 11,
            span: 12768..12769,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 425,
            column: 13,
            span: 12770..12771,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 425,
            column: 0,
            span: 12772..12775,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 429,
            column: 2,
            span: 12796..12797,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 429,
            column: 4,
            span: 12798..12799,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 429,
            column: 6,
            span: 12800..12801,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 429,
            column: 7,
            span: 12801..12802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 429,
            column: 12,
            span: 12802..12807,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 429,
            column: 13,
            span: 12807..12808,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  loadstring 2; pcall 0 1 0;\n  pushvalue 3; insert -2; pcall 1 1 0;\n  pcall 0 0 0;\n  return 1\n]]",
        ),
        position: Position {
            line: 434,
            column: 3,
            span: 12808..12907,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 434,
            column: 4,
            span: 12907..12908,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=150\"",
        ),
        position: Position {
            line: 434,
            column: 12,
            span: 12909..12916,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 434,
            column: 13,
            span: 12916..12917,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 434,
            column: 22,
            span: 12918..12926,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 434,
            column: 24,
            span: 12927..12928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 434,
            column: 25,
            span: 12928..12929,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 434,
            column: 26,
            span: 12929..12930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 434,
            column: 33,
            span: 12931..12937,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 434,
            column: 34,
            span: 12937..12938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 434,
            column: 35,
            span: 12938..12939,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 434,
            column: 37,
            span: 12939..12941,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 434,
            column: 40,
            span: 12941..12944,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 434,
            column: 41,
            span: 12944..12945,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 434,
            column: 42,
            span: 12945..12946,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 434,
            column: 49,
            span: 12947..12953,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 434,
            column: 51,
            span: 12953..12955,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 434,
            column: 55,
            span: 12956..12959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 434,
            column: 56,
            span: 12959..12960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 436,
            column: 7,
            span: 12962..12968,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 436,
            column: 8,
            span: 12968..12969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 436,
            column: 12,
            span: 12969..12973,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 436,
            column: 13,
            span: 12973..12974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 436,
            column: 14,
            span: 12974..12975,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 436,
            column: 15,
            span: 12975..12976,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 436,
            column: 18,
            span: 12977..12979,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'string'",
        ),
        position: Position {
            line: 436,
            column: 27,
            span: 12980..12988,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 436,
            column: 31,
            span: 12989..12992,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 436,
            column: 33,
            span: 12993..12994,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 436,
            column: 36,
            span: 12995..12997,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "150",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 436,
            column: 40,
            span: 12997..13001,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 436,
            column: 41,
            span: 13001..13002,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 438,
            column: 9,
            span: 13004..13012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 438,
            column: 16,
            span: 13013..13019,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 438,
            column: 17,
            span: 13019..13020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 438,
            column: 18,
            span: 13020..13021,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 438,
            column: 19,
            span: 13021..13022,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 438,
            column: 23,
            span: 13023..13026,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 438,
            column: 24,
            span: 13026..13027,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 439,
            column: 8,
            span: 13030..13035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 439,
            column: 12,
            span: 13036..13039,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 439,
            column: 14,
            span: 13040..13041,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 439,
            column: 16,
            span: 13042..13043,
        },
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        position: Position {
            line: 439,
            column: 19,
            span: 13043..13046,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 439,
            column: 20,
            span: 13046..13047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 440,
            column: 9,
            span: 13050..13056,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 440,
            column: 10,
            span: 13056..13057,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 440,
            column: 11,
            span: 13057..13058,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 440,
            column: 14,
            span: 13058..13061,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 440,
            column: 17,
            span: 13062..13064,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 440,
            column: 19,
            span: 13064..13066,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 440,
            column: 20,
            span: 13066..13067,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 441,
            column: 9,
            span: 13070..13076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 441,
            column: 10,
            span: 13076..13077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 441,
            column: 16,
            span: 13077..13083,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 441,
            column: 17,
            span: 13083..13084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 441,
            column: 21,
            span: 13084..13088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 441,
            column: 22,
            span: 13088..13089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "arg",
        ),
        position: Position {
            line: 441,
            column: 25,
            span: 13089..13092,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 441,
            column: 26,
            span: 13092..13093,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 441,
            column: 27,
            span: 13092..13094,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 441,
            column: 28,
            span: 13094..13095,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 441,
            column: 29,
            span: 13095..13096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 441,
            column: 31,
            span: 13097..13098,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 441,
            column: 32,
            span: 13098..13099,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 441,
            column: 33,
            span: 13099..13100,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 442,
            column: 0,
            span: 13101..13104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 443,
            column: 7,
            span: 13105..13111,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 443,
            column: 8,
            span: 13111..13112,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\":1:\"",
        ),
        position: Position {
            line: 443,
            column: 13,
            span: 13112..13117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 443,
            column: 14,
            span: 13117..13118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 443,
            column: 16,
            span: 13119..13120,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 443,
            column: 17,
            span: 13120..13121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 443,
            column: 22,
            span: 13121..13126,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 443,
            column: 23,
            span: 13126..13127,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring 2; return *\"",
        ),
        position: Position {
            line: 443,
            column: 47,
            span: 13127..13151,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 443,
            column: 48,
            span: 13151..13152,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=\"",
        ),
        position: Position {
            line: 443,
            column: 53,
            span: 13153..13157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 443,
            column: 54,
            span: 13157..13158,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 443,
            column: 55,
            span: 13158..13159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 444,
            column: 7,
            span: 13160..13166,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 8,
            span: 13166..13167,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"%.\"",
        ),
        position: Position {
            line: 444,
            column: 12,
            span: 13167..13171,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 444,
            column: 13,
            span: 13171..13172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 444,
            column: 15,
            span: 13173..13174,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 444,
            column: 16,
            span: 13174..13175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 444,
            column: 21,
            span: 13175..13180,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 444,
            column: 22,
            span: 13180..13181,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadfile 2; return *\"",
        ),
        position: Position {
            line: 444,
            column: 44,
            span: 13181..13203,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 444,
            column: 45,
            span: 13203..13204,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 444,
            column: 49,
            span: 13205..13208,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 50,
            span: 13208..13209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 444,
            column: 51,
            span: 13209..13210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "check3",
        ),
        position: Position {
            line: 445,
            column: 7,
            span: 13211..13217,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 8,
            span: 13217..13218,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxxx\"",
        ),
        position: Position {
            line: 445,
            column: 14,
            span: 13218..13224,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 445,
            column: 15,
            span: 13224..13225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 445,
            column: 17,
            span: 13226..13227,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 445,
            column: 18,
            span: 13227..13228,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 445,
            column: 23,
            span: 13228..13233,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 445,
            column: 24,
            span: 13233..13234,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadfile 2; return *\"",
        ),
        position: Position {
            line: 445,
            column: 46,
            span: 13234..13256,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 445,
            column: 47,
            span: 13256..13257,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xxxx\"",
        ),
        position: Position {
            line: 445,
            column: 54,
            span: 13258..13264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 55,
            span: 13264..13265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 445,
            column: 56,
            span: 13265..13266,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 448,
            column: 9,
            span: 13308..13316,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerrnopro",
        ),
        position: Position {
            line: 448,
            column: 23,
            span: 13317..13330,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 448,
            column: 25,
            span: 13331..13332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        position: Position {
            line: 448,
            column: 29,
            span: 13332..13336,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 448,
            column: 30,
            span: 13336..13337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 448,
            column: 34,
            span: 13338..13341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 448,
            column: 35,
            span: 13341..13342,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 449,
            column: 8,
            span: 13345..13350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "th",
        ),
        position: Position {
            line: 449,
            column: 11,
            span: 13351..13353,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 449,
            column: 13,
            span: 13354..13355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 449,
            column: 23,
            span: 13356..13365,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 449,
            column: 24,
            span: 13365..13366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "create",
        ),
        position: Position {
            line: 449,
            column: 30,
            span: 13366..13372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 449,
            column: 31,
            span: 13372..13373,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 449,
            column: 39,
            span: 13373..13381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 449,
            column: 41,
            span: 13382..13383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 449,
            column: 42,
            span: 13383..13384,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 449,
            column: 46,
            span: 13385..13388,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 449,
            column: 47,
            span: 13388..13389,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 450,
            column: 8,
            span: 13414..13419,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stt",
        ),
        position: Position {
            line: 450,
            column: 12,
            span: 13420..13423,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 450,
            column: 13,
            span: 13423..13424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 450,
            column: 17,
            span: 13425..13428,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 450,
            column: 19,
            span: 13429..13430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 450,
            column: 25,
            span: 13431..13436,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 450,
            column: 26,
            span: 13436..13437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 450,
            column: 27,
            span: 13437..13438,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 450,
            column: 28,
            span: 13438..13439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 450,
            column: 33,
            span: 13439..13444,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 450,
            column: 34,
            span: 13444..13445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "th",
        ),
        position: Position {
            line: 450,
            column: 37,
            span: 13446..13448,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 450,
            column: 38,
            span: 13448..13449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "code",
        ),
        position: Position {
            line: 450,
            column: 43,
            span: 13450..13454,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 450,
            column: 44,
            span: 13454..13455,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 451,
            column: 9,
            span: 13478..13484,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 451,
            column: 10,
            span: 13484..13485,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 451,
            column: 13,
            span: 13485..13488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stt",
        ),
        position: Position {
            line: 451,
            column: 17,
            span: 13489..13492,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 451,
            column: 21,
            span: 13493..13496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 451,
            column: 28,
            span: 13497..13503,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 451,
            column: 29,
            span: 13503..13504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 451,
            column: 33,
            span: 13504..13508,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 451,
            column: 34,
            span: 13508..13509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        position: Position {
            line: 451,
            column: 37,
            span: 13509..13512,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 451,
            column: 38,
            span: 13512..13513,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 451,
            column: 42,
            span: 13514..13517,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 451,
            column: 43,
            span: 13517..13518,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 451,
            column: 44,
            span: 13518..13519,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 452,
            column: 0,
            span: 13520..13523,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 454,
            column: 3,
            span: 13525..13527,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 454,
            column: 7,
            span: 13528..13531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        position: Position {
            line: 454,
            column: 13,
            span: 13532..13537,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 454,
            column: 0,
            span: 13538..13542,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerrnopro",
        ),
        position: Position {
            line: 455,
            column: 16,
            span: 13545..13558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 455,
            column: 17,
            span: 13558..13559,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 3; call 0 0\"",
        ),
        position: Position {
            line: 455,
            column: 38,
            span: 13559..13580,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 455,
            column: 39,
            span: 13580..13581,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"attempt to call\"",
        ),
        position: Position {
            line: 455,
            column: 57,
            span: 13582..13599,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 455,
            column: 58,
            span: 13599..13600,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 456,
            column: 8,
            span: 13603..13608,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing stack overflow in unprotected thread\"",
        ),
        position: Position {
            line: 456,
            column: 54,
            span: 13608..13654,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 457,
            column: 11,
            span: 13657..13665,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 457,
            column: 13,
            span: 13666..13667,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 457,
            column: 15,
            span: 13668..13669,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 457,
            column: 16,
            span: 13669..13670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 457,
            column: 18,
            span: 13671..13672,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 457,
            column: 19,
            span: 13672..13673,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 457,
            column: 20,
            span: 13673..13674,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 457,
            column: 0,
            span: 13675..13678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerrnopro",
        ),
        position: Position {
            line: 458,
            column: 16,
            span: 13681..13694,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 458,
            column: 17,
            span: 13694..13695,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getglobal 'f'; call 0 0;\"",
        ),
        position: Position {
            line: 458,
            column: 43,
            span: 13695..13721,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 458,
            column: 44,
            span: 13721..13722,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stack overflow\"",
        ),
        position: Position {
            line: 458,
            column: 61,
            span: 13723..13739,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 458,
            column: 62,
            span: 13739..13740,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 459,
            column: 0,
            span: 13741..13744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 460,
            column: 6,
            span: 13745..13750,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"+\"",
        ),
        position: Position {
            line: 460,
            column: 9,
            span: 13750..13753,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 465,
            column: 3,
            span: 13781..13783,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 466,
            column: 8,
            span: 13801..13806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 466,
            column: 10,
            span: 13807..13808,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 466,
            column: 12,
            span: 13809..13810,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 466,
            column: 14,
            span: 13811..13812,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 466,
            column: 15,
            span: 13812..13813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 467,
            column: 4,
            span: 13816..13817,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 467,
            column: 5,
            span: 13817..13818,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 467,
            column: 10,
            span: 13818..13823,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 467,
            column: 11,
            span: 13823..13824,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawsetp 2 1\"",
        ),
        position: Position {
            line: 467,
            column: 24,
            span: 13824..13837,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 25,
            span: 13837..13838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 467,
            column: 27,
            span: 13839..13840,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 467,
            column: 28,
            span: 13840..13841,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 467,
            column: 31,
            span: 13841..13844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 467,
            column: 32,
            span: 13844..13845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 468,
            column: 9,
            span: 13848..13854,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 10,
            span: 13854..13855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 468,
            column: 11,
            span: 13855..13856,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 468,
            column: 12,
            span: 13856..13857,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 468,
            column: 13,
            span: 13857..13858,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 468,
            column: 14,
            span: 13858..13859,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 468,
            column: 26,
            span: 13859..13871,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 468,
            column: 27,
            span: 13871..13872,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 468,
            column: 28,
            span: 13871..13873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 29,
            span: 13873..13874,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 468,
            column: 30,
            span: 13874..13875,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 468,
            column: 33,
            span: 13876..13878,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 468,
            column: 36,
            span: 13878..13881,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 468,
            column: 37,
            span: 13881..13882,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 469,
            column: 9,
            span: 13885..13891,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 469,
            column: 10,
            span: 13891..13892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 469,
            column: 11,
            span: 13892..13893,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 469,
            column: 12,
            span: 13893..13894,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 469,
            column: 17,
            span: 13894..13899,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 469,
            column: 18,
            span: 13899..13900,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawgetp 2 1; return 1\"",
        ),
        position: Position {
            line: 469,
            column: 41,
            span: 13900..13923,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 469,
            column: 42,
            span: 13923..13924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 469,
            column: 44,
            span: 13925..13926,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 469,
            column: 45,
            span: 13926..13927,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 469,
            column: 48,
            span: 13928..13930,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 469,
            column: 51,
            span: 13930..13933,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 469,
            column: 52,
            span: 13933..13934,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 470,
            column: 0,
            span: 13935..13938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 472,
            column: 2,
            span: 13940..13941,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 472,
            column: 4,
            span: 13942..13943,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 472,
            column: 6,
            span: 13944..13945,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 472,
            column: 7,
            span: 13945..13946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 472,
            column: 8,
            span: 13946..13947,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 472,
            column: 9,
            span: 13946..13948,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 472,
            column: 10,
            span: 13948..13949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 472,
            column: 12,
            span: 13950..13951,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 472,
            column: 13,
            span: 13951..13952,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 472,
            column: 15,
            span: 13951..13954,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 472,
            column: 16,
            span: 13954..13955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 473,
            column: 2,
            span: 13956..13957,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 473,
            column: 3,
            span: 13957..13958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 473,
            column: 5,
            span: 13959..13960,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 473,
            column: 7,
            span: 13961..13962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 473,
            column: 9,
            span: 13963..13964,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 473,
            column: 10,
            span: 13964..13965,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 473,
            column: 15,
            span: 13965..13970,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 473,
            column: 16,
            span: 13970..13971,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2; pushvalue 4; gettable 2; return 2\"",
        ),
        position: Position {
            line: 473,
            column: 63,
            span: 13971..14018,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 473,
            column: 64,
            span: 14018..14019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 474,
            column: 18,
            span: 14036..14037,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 474,
            column: 19,
            span: 14037..14038,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 474,
            column: 21,
            span: 14038..14040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 474,
            column: 22,
            span: 14040..14041,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 474,
            column: 26,
            span: 14042..14045,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 474,
            column: 27,
            span: 14045..14046,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 474,
            column: 29,
            span: 14046..14048,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 474,
            column: 30,
            span: 14048..14049,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 474,
            column: 34,
            span: 14050..14053,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 474,
            column: 35,
            span: 14053..14054,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 475,
            column: 7,
            span: 14055..14061,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 475,
            column: 8,
            span: 14061..14062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 475,
            column: 9,
            span: 14062..14063,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 475,
            column: 12,
            span: 14064..14066,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 475,
            column: 14,
            span: 14066..14068,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 475,
            column: 18,
            span: 14069..14072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 475,
            column: 20,
            span: 14073..14074,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 475,
            column: 23,
            span: 14075..14077,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 475,
            column: 26,
            span: 14077..14080,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 475,
            column: 27,
            span: 14080..14081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 476,
            column: 2,
            span: 14082..14083,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 476,
            column: 3,
            span: 14083..14084,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 476,
            column: 8,
            span: 14084..14089,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 476,
            column: 9,
            span: 14089..14090,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable -5\"",
        ),
        position: Position {
            line: 476,
            column: 22,
            span: 14090..14103,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 476,
            column: 23,
            span: 14103..14104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 476,
            column: 25,
            span: 14105..14106,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 476,
            column: 26,
            span: 14106..14107,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 476,
            column: 28,
            span: 14107..14109,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 476,
            column: 29,
            span: 14109..14110,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 476,
            column: 31,
            span: 14110..14112,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 476,
            column: 32,
            span: 14112..14113,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 476,
            column: 36,
            span: 14114..14117,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 476,
            column: 37,
            span: 14117..14118,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 476,
            column: 40,
            span: 14118..14121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 476,
            column: 41,
            span: 14121..14122,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 477,
            column: 7,
            span: 14123..14129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 477,
            column: 8,
            span: 14129..14130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 477,
            column: 9,
            span: 14130..14131,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 477,
            column: 10,
            span: 14131..14132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 477,
            column: 11,
            span: 14132..14133,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 477,
            column: 14,
            span: 14134..14136,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 477,
            column: 17,
            span: 14136..14139,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 477,
            column: 18,
            span: 14139..14140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 478,
            column: 2,
            span: 14141..14142,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 478,
            column: 3,
            span: 14142..14143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 478,
            column: 4,
            span: 14143..14144,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 478,
            column: 5,
            span: 14144..14145,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 478,
            column: 7,
            span: 14146..14147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 478,
            column: 0,
            span: 14148..14153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 479,
            column: 2,
            span: 14154..14155,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 479,
            column: 4,
            span: 14156..14157,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 479,
            column: 6,
            span: 14158..14159,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 479,
            column: 7,
            span: 14159..14160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 479,
            column: 12,
            span: 14160..14165,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 479,
            column: 13,
            span: 14165..14166,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2; return 1\"",
        ),
        position: Position {
            line: 479,
            column: 35,
            span: 14166..14188,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 479,
            column: 36,
            span: 14188..14189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 479,
            column: 38,
            span: 14190..14191,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 479,
            column: 39,
            span: 14191..14192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 480,
            column: 7,
            span: 14232..14238,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 480,
            column: 8,
            span: 14238..14239,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 480,
            column: 9,
            span: 14239..14240,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 480,
            column: 12,
            span: 14241..14243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 480,
            column: 18,
            span: 14244..14249,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 480,
            column: 19,
            span: 14249..14250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 481,
            column: 2,
            span: 14251..14252,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 481,
            column: 3,
            span: 14252..14253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 481,
            column: 8,
            span: 14253..14258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 481,
            column: 9,
            span: 14258..14259,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable 2\"",
        ),
        position: Position {
            line: 481,
            column: 21,
            span: 14259..14271,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 481,
            column: 22,
            span: 14271..14272,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 481,
            column: 24,
            span: 14273..14274,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 481,
            column: 25,
            span: 14274..14275,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 481,
            column: 29,
            span: 14276..14279,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 481,
            column: 30,
            span: 14279..14280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 482,
            column: 7,
            span: 14322..14328,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 482,
            column: 8,
            span: 14328..14329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 482,
            column: 9,
            span: 14329..14330,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 482,
            column: 10,
            span: 14330..14331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 482,
            column: 11,
            span: 14331..14332,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 482,
            column: 12,
            span: 14332..14333,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 482,
            column: 15,
            span: 14334..14336,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 482,
            column: 19,
            span: 14337..14340,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 482,
            column: 20,
            span: 14340..14341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 484,
            column: 2,
            span: 14343..14344,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 484,
            column: 4,
            span: 14345..14346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 484,
            column: 17,
            span: 14347..14359,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 484,
            column: 18,
            span: 14359..14360,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 484,
            column: 19,
            span: 14360..14361,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 484,
            column: 20,
            span: 14361..14362,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 484,
            column: 22,
            span: 14363..14364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 484,
            column: 24,
            span: 14365..14366,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 484,
            column: 25,
            span: 14366..14367,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 484,
            column: 26,
            span: 14367..14368,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 484,
            column: 28,
            span: 14369..14370,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 484,
            column: 29,
            span: 14370..14371,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 484,
            column: 30,
            span: 14371..14372,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 485,
            column: 13,
            span: 14373..14385,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 485,
            column: 14,
            span: 14385..14386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 485,
            column: 15,
            span: 14386..14387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 485,
            column: 16,
            span: 14387..14388,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 485,
            column: 17,
            span: 14388..14389,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 485,
            column: 24,
            span: 14389..14396,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 485,
            column: 26,
            span: 14397..14398,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 485,
            column: 35,
            span: 14399..14407,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 485,
            column: 37,
            span: 14408..14409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 485,
            column: 38,
            span: 14409..14410,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 485,
            column: 39,
            span: 14410..14411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 485,
            column: 41,
            span: 14412..14413,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 485,
            column: 42,
            span: 14413..14414,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 485,
            column: 49,
            span: 14415..14421,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 485,
            column: 51,
            span: 14422..14423,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 485,
            column: 52,
            span: 14423..14424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        position: Position {
            line: 485,
            column: 53,
            span: 14424..14425,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 485,
            column: 54,
            span: 14425..14426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 485,
            column: 55,
            span: 14426..14427,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 485,
            column: 56,
            span: 14427..14428,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 485,
            column: 0,
            span: 14429..14432,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 486,
            column: 2,
            span: 14433..14434,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 3,
            span: 14434..14435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 486,
            column: 5,
            span: 14436..14437,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 486,
            column: 7,
            span: 14438..14439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 486,
            column: 9,
            span: 14440..14441,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 486,
            column: 10,
            span: 14441..14442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 486,
            column: 15,
            span: 14442..14447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 486,
            column: 16,
            span: 14447..14448,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 3, return 2\"",
        ),
        position: Position {
            line: 486,
            column: 38,
            span: 14448..14470,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 39,
            span: 14470..14471,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 41,
            span: 14471..14473,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 42,
            span: 14473..14474,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 486,
            column: 44,
            span: 14475..14476,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 45,
            span: 14476..14477,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 48,
            span: 14477..14480,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 49,
            span: 14480..14481,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 486,
            column: 52,
            span: 14481..14484,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 486,
            column: 53,
            span: 14484..14485,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 486,
            column: 57,
            span: 14486..14489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 486,
            column: 58,
            span: 14489..14490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 487,
            column: 7,
            span: 14491..14497,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 487,
            column: 8,
            span: 14497..14498,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 487,
            column: 9,
            span: 14498..14499,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 487,
            column: 12,
            span: 14500..14502,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 487,
            column: 15,
            span: 14502..14505,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 487,
            column: 19,
            span: 14506..14509,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 487,
            column: 21,
            span: 14510..14511,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 487,
            column: 24,
            span: 14512..14514,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "35",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 487,
            column: 27,
            span: 14514..14517,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 487,
            column: 28,
            span: 14517..14518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 488,
            column: 2,
            span: 14519..14520,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 488,
            column: 4,
            span: 14521..14522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 488,
            column: 6,
            span: 14523..14524,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 488,
            column: 7,
            span: 14524..14525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 488,
            column: 12,
            span: 14525..14530,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 488,
            column: 13,
            span: 14530..14531,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"getfield 2 y, return 1\"",
        ),
        position: Position {
            line: 488,
            column: 37,
            span: 14531..14555,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 488,
            column: 38,
            span: 14555..14556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 488,
            column: 40,
            span: 14557..14558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 488,
            column: 41,
            span: 14558..14559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 489,
            column: 7,
            span: 14560..14566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 489,
            column: 8,
            span: 14566..14567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 489,
            column: 9,
            span: 14567..14568,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 489,
            column: 12,
            span: 14569..14571,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 489,
            column: 15,
            span: 14571..14574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 489,
            column: 16,
            span: 14574..14575,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 490,
            column: 13,
            span: 14576..14588,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 490,
            column: 14,
            span: 14588..14589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 490,
            column: 15,
            span: 14589..14590,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 490,
            column: 16,
            span: 14590..14591,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 490,
            column: 17,
            span: 14591..14592,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        position: Position {
            line: 490,
            column: 24,
            span: 14592..14599,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 490,
            column: 26,
            span: 14600..14601,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 490,
            column: 35,
            span: 14602..14610,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 490,
            column: 37,
            span: 14611..14612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 490,
            column: 38,
            span: 14612..14613,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 490,
            column: 39,
            span: 14613..14614,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 490,
            column: 41,
            span: 14615..14616,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 490,
            column: 42,
            span: 14616..14617,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 490,
            column: 49,
            span: 14618..14624,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 490,
            column: 51,
            span: 14625..14626,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 490,
            column: 52,
            span: 14626..14627,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 490,
            column: 53,
            span: 14627..14628,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 490,
            column: 54,
            span: 14628..14629,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 490,
            column: 0,
            span: 14630..14633,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 491,
            column: 13,
            span: 14634..14646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 491,
            column: 14,
            span: 14646..14647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 491,
            column: 15,
            span: 14647..14648,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 491,
            column: 16,
            span: 14648..14649,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 491,
            column: 17,
            span: 14649..14650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        position: Position {
            line: 491,
            column: 27,
            span: 14650..14660,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 491,
            column: 29,
            span: 14661..14662,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 491,
            column: 38,
            span: 14663..14671,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 491,
            column: 40,
            span: 14672..14673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 491,
            column: 41,
            span: 14673..14674,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 491,
            column: 42,
            span: 14674..14675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 491,
            column: 44,
            span: 14676..14677,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 491,
            column: 45,
            span: 14677..14678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 491,
            column: 46,
            span: 14678..14679,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 491,
            column: 48,
            span: 14680..14681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 491,
            column: 50,
            span: 14682..14683,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 491,
            column: 51,
            span: 14683..14684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 491,
            column: 52,
            span: 14684..14685,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 491,
            column: 53,
            span: 14685..14686,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 491,
            column: 55,
            span: 14687..14688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 491,
            column: 57,
            span: 14689..14690,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 491,
            column: 0,
            span: 14691..14694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 492,
            column: 2,
            span: 14695..14696,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 492,
            column: 4,
            span: 14697..14698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 492,
            column: 6,
            span: 14699..14700,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 492,
            column: 7,
            span: 14700..14701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 492,
            column: 12,
            span: 14701..14706,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 492,
            column: 13,
            span: 14706..14707,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"insert 2; gettable -5; return 1\"",
        ),
        position: Position {
            line: 492,
            column: 46,
            span: 14707..14740,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 47,
            span: 14740..14741,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 492,
            column: 49,
            span: 14741..14743,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 50,
            span: 14743..14744,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 492,
            column: 52,
            span: 14744..14746,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 53,
            span: 14746..14747,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 492,
            column: 55,
            span: 14747..14749,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 56,
            span: 14749..14750,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"y\"",
        ),
        position: Position {
            line: 492,
            column: 60,
            span: 14751..14754,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 492,
            column: 61,
            span: 14754..14755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 492,
            column: 63,
            span: 14756..14757,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 492,
            column: 64,
            span: 14757..14758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 493,
            column: 7,
            span: 14759..14765,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 493,
            column: 8,
            span: 14765..14766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 493,
            column: 9,
            span: 14766..14767,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 493,
            column: 12,
            span: 14768..14770,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 493,
            column: 15,
            span: 14770..14773,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 493,
            column: 16,
            span: 14773..14774,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 494,
            column: 2,
            span: 14775..14776,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 494,
            column: 4,
            span: 14777..14778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 494,
            column: 6,
            span: 14779..14780,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 494,
            column: 7,
            span: 14780..14781,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 494,
            column: 12,
            span: 14781..14786,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 494,
            column: 13,
            span: 14786..14787,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable -5, return 1\"",
        ),
        position: Position {
            line: 494,
            column: 36,
            span: 14787..14810,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 494,
            column: 37,
            span: 14810..14811,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 494,
            column: 39,
            span: 14812..14813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 494,
            column: 40,
            span: 14813..14814,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 494,
            column: 42,
            span: 14814..14816,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 494,
            column: 43,
            span: 14816..14817,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 494,
            column: 45,
            span: 14817..14819,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 494,
            column: 46,
            span: 14819..14820,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        position: Position {
            line: 494,
            column: 50,
            span: 14821..14824,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 494,
            column: 51,
            span: 14824..14825,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 494,
            column: 54,
            span: 14825..14828,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 494,
            column: 55,
            span: 14828..14829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 495,
            column: 7,
            span: 14830..14836,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 495,
            column: 8,
            span: 14836..14837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 495,
            column: 9,
            span: 14837..14838,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 495,
            column: 10,
            span: 14838..14839,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 495,
            column: 11,
            span: 14839..14840,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 495,
            column: 14,
            span: 14841..14843,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "16",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 17,
            span: 14843..14846,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 495,
            column: 21,
            span: 14847..14850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        position: Position {
            line: 495,
            column: 23,
            span: 14851..14852,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 495,
            column: 26,
            span: 14853..14855,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 495,
            column: 28,
            span: 14855..14857,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 495,
            column: 29,
            span: 14857..14858,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 496,
            column: 2,
            span: 14859..14860,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 496,
            column: 3,
            span: 14860..14861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 496,
            column: 4,
            span: 14861..14862,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 496,
            column: 5,
            span: 14862..14863,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 496,
            column: 7,
            span: 14864..14865,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        position: Position {
            line: 496,
            column: 14,
            span: 14866..14872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 497,
            column: 2,
            span: 14873..14874,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 497,
            column: 4,
            span: 14875..14876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 497,
            column: 6,
            span: 14877..14878,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 497,
            column: 7,
            span: 14878..14879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 497,
            column: 12,
            span: 14879..14884,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 497,
            column: 13,
            span: 14884..14885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable 2, return 1\"",
        ),
        position: Position {
            line: 497,
            column: 35,
            span: 14885..14907,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 497,
            column: 36,
            span: 14907..14908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 497,
            column: 38,
            span: 14909..14910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 497,
            column: 39,
            span: 14910..14911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 498,
            column: 7,
            span: 14912..14918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 498,
            column: 8,
            span: 14918..14919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 498,
            column: 9,
            span: 14919..14920,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 498,
            column: 12,
            span: 14921..14923,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        position: Position {
            line: 498,
            column: 19,
            span: 14924..14930,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 498,
            column: 20,
            span: 14930..14931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 499,
            column: 2,
            span: 14932..14933,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 499,
            column: 3,
            span: 14933..14934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 499,
            column: 8,
            span: 14934..14939,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 499,
            column: 9,
            span: 14939..14940,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"settable 2\"",
        ),
        position: Position {
            line: 499,
            column: 21,
            span: 14940..14952,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 499,
            column: 22,
            span: 14952..14953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 499,
            column: 24,
            span: 14954..14955,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 499,
            column: 25,
            span: 14955..14956,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 499,
            column: 28,
            span: 14956..14959,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 499,
            column: 29,
            span: 14959..14960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 500,
            column: 7,
            span: 14961..14967,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 500,
            column: 8,
            span: 14967..14968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 500,
            column: 9,
            span: 14968..14969,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 500,
            column: 10,
            span: 14969..14970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 500,
            column: 11,
            span: 14970..14971,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 500,
            column: 12,
            span: 14971..14972,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 500,
            column: 15,
            span: 14973..14975,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "19",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 500,
            column: 18,
            span: 14975..14978,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 500,
            column: 19,
            span: 14978..14979,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 503,
            column: 3,
            span: 14984..14986,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 504,
            column: 8,
            span: 15035..15040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 504,
            column: 10,
            span: 15041..15042,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 504,
            column: 12,
            span: 15043..15044,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 504,
            column: 14,
            span: 15045..15046,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        position: Position {
            line: 504,
            column: 75,
            span: 15046..15107,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 504,
            column: 77,
            span: 15108..15109,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 504,
            column: 80,
            span: 15109..15112,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 504,
            column: 81,
            span: 15112..15113,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 505,
            column: 8,
            span: 15116..15121,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 505,
            column: 10,
            span: 15122..15123,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 505,
            column: 12,
            span: 15124..15125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 505,
            column: 14,
            span: 15126..15127,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 505,
            column: 15,
            span: 15127..15128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 505,
            column: 20,
            span: 15128..15133,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 505,
            column: 21,
            span: 15133..15134,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    getfield 2 _012345678901234567890123456789012345678901234567890123456789\n    return 1\n  ]]",
        ),
        position: Position {
            line: 508,
            column: 5,
            span: 15134..15231,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 508,
            column: 6,
            span: 15231..15232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 508,
            column: 8,
            span: 15233..15234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 508,
            column: 9,
            span: 15234..15235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 509,
            column: 9,
            span: 15238..15244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 509,
            column: 10,
            span: 15244..15245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 509,
            column: 11,
            span: 15245..15246,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 509,
            column: 14,
            span: 15247..15249,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "32",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 509,
            column: 17,
            span: 15249..15252,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 509,
            column: 18,
            span: 15252..15253,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 510,
            column: 8,
            span: 15256..15261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 510,
            column: 10,
            span: 15262..15263,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 510,
            column: 12,
            span: 15264..15265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 510,
            column: 14,
            span: 15266..15267,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 510,
            column: 15,
            span: 15267..15268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 510,
            column: 20,
            span: 15268..15273,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 510,
            column: 21,
            span: 15273..15274,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n    pushnum 33\n    setglobal _012345678901234567890123456789012345678901234567890123456789\n  ]]",
        ),
        position: Position {
            line: 513,
            column: 5,
            span: 15274..15372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 513,
            column: 6,
            span: 15372..15373,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 514,
            column: 9,
            span: 15376..15382,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 514,
            column: 10,
            span: 15382..15383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        position: Position {
            line: 514,
            column: 71,
            span: 15383..15444,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 514,
            column: 74,
            span: 15445..15447,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "33",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 514,
            column: 77,
            span: 15447..15450,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 514,
            column: 78,
            span: 15450..15451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_012345678901234567890123456789012345678901234567890123456789",
        ),
        position: Position {
            line: 515,
            column: 64,
            span: 15454..15515,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 515,
            column: 66,
            span: 15516..15517,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 515,
            column: 0,
            span: 15518..15521,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 516,
            column: 0,
            span: 15522..15525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 519,
            column: 2,
            span: 15543..15544,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 519,
            column: 4,
            span: 15545..15546,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 519,
            column: 6,
            span: 15547..15548,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 519,
            column: 7,
            span: 15548..15549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 520,
            column: 2,
            span: 15550..15551,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 520,
            column: 4,
            span: 15552..15553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 520,
            column: 9,
            span: 15554..15558,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 10,
            span: 15558..15559,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 520,
            column: 11,
            span: 15559..15560,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 520,
            column: 12,
            span: 15560..15561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 520,
            column: 17,
            span: 15561..15566,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 520,
            column: 18,
            span: 15566..15567,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; return *\"",
        ),
        position: Position {
            line: 520,
            column: 34,
            span: 15567..15583,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 35,
            span: 15583..15584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 520,
            column: 37,
            span: 15585..15586,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 520,
            column: 38,
            span: 15586..15587,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 520,
            column: 42,
            span: 15588..15591,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 43,
            span: 15591..15592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 520,
            column: 44,
            span: 15592..15593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 521,
            column: 7,
            span: 15594..15600,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 521,
            column: 8,
            span: 15600..15601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 521,
            column: 9,
            span: 15601..15602,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 521,
            column: 10,
            span: 15602..15603,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 521,
            column: 12,
            span: 15604..15605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 521,
            column: 13,
            span: 15605..15606,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 521,
            column: 14,
            span: 15606..15607,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 521,
            column: 15,
            span: 15606..15608,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 521,
            column: 16,
            span: 15608..15609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 521,
            column: 17,
            span: 15609..15610,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 521,
            column: 18,
            span: 15610..15611,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 521,
            column: 19,
            span: 15611..15612,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 522,
            column: 2,
            span: 15613..15614,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 522,
            column: 4,
            span: 15615..15616,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 522,
            column: 6,
            span: 15617..15618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 522,
            column: 7,
            span: 15618..15619,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 522,
            column: 8,
            span: 15619..15620,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 522,
            column: 9,
            span: 15619..15621,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 522,
            column: 10,
            span: 15621..15622,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 523,
            column: 2,
            span: 15623..15624,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 523,
            column: 4,
            span: 15625..15626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 523,
            column: 9,
            span: 15627..15631,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 523,
            column: 10,
            span: 15631..15632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 523,
            column: 11,
            span: 15632..15633,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 523,
            column: 12,
            span: 15633..15634,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 523,
            column: 17,
            span: 15634..15639,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 523,
            column: 18,
            span: 15639..15640,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; return *\"",
        ),
        position: Position {
            line: 523,
            column: 34,
            span: 15640..15656,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 523,
            column: 35,
            span: 15656..15657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 523,
            column: 37,
            span: 15658..15659,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 523,
            column: 38,
            span: 15659..15660,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 523,
            column: 42,
            span: 15661..15664,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 523,
            column: 43,
            span: 15664..15665,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 523,
            column: 44,
            span: 15665..15666,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 524,
            column: 7,
            span: 15667..15673,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 524,
            column: 8,
            span: 15673..15674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 524,
            column: 9,
            span: 15674..15675,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 524,
            column: 10,
            span: 15675..15676,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 524,
            column: 12,
            span: 15677..15678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 524,
            column: 13,
            span: 15678..15679,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 524,
            column: 14,
            span: 15679..15680,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 524,
            column: 15,
            span: 15679..15681,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 524,
            column: 16,
            span: 15681..15682,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 524,
            column: 17,
            span: 15682..15683,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 524,
            column: 18,
            span: 15683..15684,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 524,
            column: 21,
            span: 15684..15687,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 524,
            column: 22,
            span: 15687..15688,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 524,
            column: 23,
            span: 15687..15689,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 524,
            column: 24,
            span: 15689..15690,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 524,
            column: 25,
            span: 15690..15691,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 525,
            column: 2,
            span: 15692..15693,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 525,
            column: 4,
            span: 15694..15695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 525,
            column: 9,
            span: 15696..15700,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 525,
            column: 10,
            span: 15700..15701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 525,
            column: 11,
            span: 15701..15702,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 525,
            column: 12,
            span: 15702..15703,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 525,
            column: 17,
            span: 15703..15708,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 525,
            column: 18,
            span: 15708..15709,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"next; pop 1; next; return *\"",
        ),
        position: Position {
            line: 525,
            column: 47,
            span: 15709..15738,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 525,
            column: 48,
            span: 15738..15739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 525,
            column: 50,
            span: 15740..15741,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 525,
            column: 51,
            span: 15741..15742,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 525,
            column: 55,
            span: 15743..15746,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 525,
            column: 56,
            span: 15746..15747,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 525,
            column: 57,
            span: 15747..15748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tcheck",
        ),
        position: Position {
            line: 526,
            column: 7,
            span: 15749..15755,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 526,
            column: 8,
            span: 15755..15756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 526,
            column: 9,
            span: 15756..15757,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 526,
            column: 10,
            span: 15757..15758,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 526,
            column: 12,
            span: 15759..15760,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 526,
            column: 13,
            span: 15760..15761,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 526,
            column: 14,
            span: 15761..15762,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 526,
            column: 15,
            span: 15761..15763,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 526,
            column: 16,
            span: 15763..15764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 526,
            column: 17,
            span: 15764..15765,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 526,
            column: 18,
            span: 15765..15766,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 526,
            column: 19,
            span: 15766..15767,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 532,
            column: 0,
            span: 15792..15794,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 533,
            column: 8,
            span: 15797..15802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 533,
            column: 10,
            span: 15803..15804,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 533,
            column: 12,
            span: 15805..15806,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 533,
            column: 14,
            span: 15807..15808,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 533,
            column: 15,
            span: 15808..15809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 533,
            column: 20,
            span: 15809..15814,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        ),
        position: Position {
            line: 533,
            column: 73,
            span: 15814..15867,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 534,
            column: 4,
            span: 15870..15871,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 534,
            column: 5,
            span: 15871..15872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 534,
            column: 7,
            span: 15873..15874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 534,
            column: 8,
            span: 15874..15875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 534,
            column: 10,
            span: 15876..15877,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 534,
            column: 12,
            span: 15878..15879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 534,
            column: 14,
            span: 15880..15881,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 534,
            column: 15,
            span: 15881..15882,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U0; pushvalue U1; pushvalue U2; return 3]]",
        ),
        position: Position {
            line: 534,
            column: 69,
            span: 15882..15936,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 534,
            column: 70,
            span: 15936..15937,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 535,
            column: 9,
            span: 15940..15946,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 535,
            column: 10,
            span: 15946..15947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 535,
            column: 11,
            span: 15947..15948,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 535,
            column: 14,
            span: 15949..15951,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 535,
            column: 17,
            span: 15951..15954,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 535,
            column: 21,
            span: 15955..15958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 535,
            column: 23,
            span: 15959..15960,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 535,
            column: 26,
            span: 15961..15963,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 535,
            column: 29,
            span: 15963..15966,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 535,
            column: 33,
            span: 15967..15970,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 535,
            column: 38,
            span: 15971..15975,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 535,
            column: 39,
            span: 15975..15976,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 535,
            column: 40,
            span: 15976..15977,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 535,
            column: 41,
            span: 15977..15978,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 535,
            column: 44,
            span: 15979..15981,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 535,
            column: 52,
            span: 15982..15989,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 535,
            column: 53,
            span: 15989..15990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 536,
            column: 4,
            span: 15993..15994,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 536,
            column: 5,
            span: 15994..15995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 536,
            column: 7,
            span: 15996..15997,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 536,
            column: 9,
            span: 15998..15999,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 536,
            column: 11,
            span: 16000..16001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 536,
            column: 12,
            span: 16001..16002,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[tostring U3; tonumber U4; return 2]]",
        ),
        position: Position {
            line: 536,
            column: 50,
            span: 16002..16040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 536,
            column: 51,
            span: 16040..16041,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 537,
            column: 9,
            span: 16044..16050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 537,
            column: 10,
            span: 16050..16051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 537,
            column: 11,
            span: 16051..16052,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 537,
            column: 14,
            span: 16053..16055,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 537,
            column: 18,
            span: 16056..16059,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 537,
            column: 22,
            span: 16060..16063,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 537,
            column: 24,
            span: 16064..16065,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 537,
            column: 27,
            span: 16066..16068,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 537,
            column: 29,
            span: 16068..16070,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 537,
            column: 30,
            span: 16070..16071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 538,
            column: 4,
            span: 16074..16075,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 538,
            column: 5,
            span: 16075..16076,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushnum 100; pushnum 200; replace U2; replace U1]]",
        ),
        position: Position {
            line: 538,
            column: 57,
            span: 16076..16128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 538,
            column: 58,
            span: 16128..16129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 539,
            column: 4,
            span: 16132..16133,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 539,
            column: 5,
            span: 16133..16134,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 539,
            column: 7,
            span: 16135..16136,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 539,
            column: 9,
            span: 16137..16138,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 539,
            column: 11,
            span: 16139..16140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 539,
            column: 12,
            span: 16140..16141,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; pushvalue U2; return 2]]",
        ),
        position: Position {
            line: 539,
            column: 52,
            span: 16141..16181,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 539,
            column: 53,
            span: 16181..16182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 540,
            column: 9,
            span: 16185..16191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 540,
            column: 10,
            span: 16191..16192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 540,
            column: 11,
            span: 16192..16193,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 540,
            column: 14,
            span: 16194..16196,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 540,
            column: 18,
            span: 16196..16200,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 540,
            column: 22,
            span: 16201..16204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 540,
            column: 24,
            span: 16205..16206,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 540,
            column: 27,
            span: 16207..16209,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 540,
            column: 31,
            span: 16209..16213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 540,
            column: 32,
            span: 16213..16214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 541,
            column: 4,
            span: 16217..16218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 541,
            column: 5,
            span: 16218..16219,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[replace U2; replace U1]]",
        ),
        position: Position {
            line: 541,
            column: 31,
            span: 16219..16245,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 541,
            column: 32,
            span: 16245..16246,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 541,
            column: 34,
            span: 16247..16248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 541,
            column: 35,
            span: 16248..16249,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 541,
            column: 36,
            span: 16249..16250,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 541,
            column: 37,
            span: 16249..16251,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 541,
            column: 38,
            span: 16251..16252,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 541,
            column: 39,
            span: 16252..16253,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 541,
            column: 41,
            span: 16254..16255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 541,
            column: 42,
            span: 16255..16256,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 541,
            column: 43,
            span: 16256..16257,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 541,
            column: 44,
            span: 16256..16258,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 541,
            column: 45,
            span: 16258..16259,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 541,
            column: 46,
            span: 16259..16260,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 542,
            column: 4,
            span: 16263..16264,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 542,
            column: 5,
            span: 16264..16265,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 542,
            column: 7,
            span: 16266..16267,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 542,
            column: 9,
            span: 16268..16269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 542,
            column: 11,
            span: 16270..16271,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 542,
            column: 12,
            span: 16271..16272,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; pushvalue U2; return 2]]",
        ),
        position: Position {
            line: 542,
            column: 52,
            span: 16272..16312,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 542,
            column: 53,
            span: 16312..16313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 543,
            column: 9,
            span: 16316..16322,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 543,
            column: 10,
            span: 16322..16323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 543,
            column: 11,
            span: 16323..16324,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 543,
            column: 12,
            span: 16324..16325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 543,
            column: 13,
            span: 16325..16326,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 543,
            column: 16,
            span: 16327..16329,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 543,
            column: 18,
            span: 16329..16331,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 543,
            column: 22,
            span: 16332..16335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 543,
            column: 24,
            span: 16336..16337,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 543,
            column: 25,
            span: 16337..16338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 543,
            column: 26,
            span: 16338..16339,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 543,
            column: 29,
            span: 16340..16342,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 543,
            column: 31,
            span: 16342..16344,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 543,
            column: 32,
            span: 16344..16345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 544,
            column: 4,
            span: 16348..16349,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 544,
            column: 5,
            span: 16349..16350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkmemory",
        ),
        position: Position {
            line: 544,
            column: 16,
            span: 16350..16361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 544,
            column: 17,
            span: 16361..16362,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 544,
            column: 18,
            span: 16362..16363,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 545,
            column: 0,
            span: 16364..16367,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 549,
            column: 7,
            span: 16422..16428,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 549,
            column: 8,
            span: 16428..16429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 549,
            column: 9,
            span: 16429..16430,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 549,
            column: 10,
            span: 16430..16431,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 549,
            column: 15,
            span: 16431..16436,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[isnull U1; return 1]]",
        ),
        position: Position {
            line: 549,
            column: 38,
            span: 16436..16459,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 549,
            column: 41,
            span: 16460..16462,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 549,
            column: 46,
            span: 16463..16467,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 549,
            column: 47,
            span: 16467..16468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 550,
            column: 7,
            span: 16469..16475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 550,
            column: 8,
            span: 16475..16476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 550,
            column: 9,
            span: 16476..16477,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 550,
            column: 10,
            span: 16477..16478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 550,
            column: 15,
            span: 16478..16483,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[isnull U100; return 1]]",
        ),
        position: Position {
            line: 550,
            column: 40,
            span: 16483..16508,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 550,
            column: 43,
            span: 16509..16511,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 550,
            column: 48,
            span: 16512..16516,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 550,
            column: 49,
            span: 16516..16517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 551,
            column: 7,
            span: 16518..16524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 551,
            column: 8,
            span: 16524..16525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 551,
            column: 9,
            span: 16525..16526,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 551,
            column: 10,
            span: 16526..16527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 551,
            column: 15,
            span: 16527..16532,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[pushvalue U1; return 1]]",
        ),
        position: Position {
            line: 551,
            column: 41,
            span: 16532..16558,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 551,
            column: 44,
            span: 16559..16561,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 551,
            column: 48,
            span: 16562..16565,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 551,
            column: 49,
            span: 16565..16566,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 553,
            column: 6,
            span: 16568..16573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 553,
            column: 8,
            span: 16574..16575,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 553,
            column: 10,
            span: 16576..16577,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 553,
            column: 12,
            span: 16578..16579,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 553,
            column: 13,
            span: 16579..16580,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 553,
            column: 18,
            span: 16580..16585,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[ pushnum 10; pushnum 20; pushcclosure 2; return 1]]",
        ),
        position: Position {
            line: 553,
            column: 71,
            span: 16585..16638,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 554,
            column: 7,
            span: 16639..16645,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 554,
            column: 8,
            span: 16645..16646,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 554,
            column: 9,
            span: 16646..16647,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 554,
            column: 10,
            span: 16647..16648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 554,
            column: 17,
            span: 16648..16655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 554,
            column: 18,
            span: 16655..16656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 554,
            column: 19,
            span: 16656..16657,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 554,
            column: 20,
            span: 16657..16658,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 554,
            column: 22,
            span: 16658..16660,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 554,
            column: 23,
            span: 16660..16661,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 554,
            column: 26,
            span: 16662..16664,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 554,
            column: 29,
            span: 16664..16667,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 554,
            column: 0,
            span: 16668..16671,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 555,
            column: 9,
            span: 16679..16680,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 555,
            column: 10,
            span: 16680..16681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 555,
            column: 17,
            span: 16681..16688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 555,
            column: 18,
            span: 16688..16689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 555,
            column: 19,
            span: 16689..16690,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 555,
            column: 20,
            span: 16690..16691,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 555,
            column: 22,
            span: 16691..16693,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 555,
            column: 23,
            span: 16693..16694,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 555,
            column: 26,
            span: 16695..16697,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 555,
            column: 29,
            span: 16697..16700,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 555,
            column: 0,
            span: 16701..16704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 556,
            column: 9,
            span: 16712..16713,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 556,
            column: 10,
            span: 16713..16714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 556,
            column: 17,
            span: 16714..16721,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 556,
            column: 18,
            span: 16721..16722,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 556,
            column: 19,
            span: 16722..16723,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 556,
            column: 20,
            span: 16723..16724,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 556,
            column: 22,
            span: 16724..16726,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 556,
            column: 23,
            span: 16726..16727,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 556,
            column: 26,
            span: 16728..16730,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 556,
            column: 30,
            span: 16731..16734,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 556,
            column: 31,
            span: 16734..16735,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 557,
            column: 2,
            span: 16736..16737,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 557,
            column: 3,
            span: 16737..16738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 557,
            column: 10,
            span: 16738..16745,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 557,
            column: 11,
            span: 16745..16746,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 557,
            column: 12,
            span: 16746..16747,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 557,
            column: 13,
            span: 16747..16748,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 557,
            column: 15,
            span: 16748..16750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 557,
            column: 16,
            span: 16750..16751,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 557,
            column: 23,
            span: 16752..16758,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 557,
            column: 24,
            span: 16758..16759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 558,
            column: 7,
            span: 16760..16766,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 558,
            column: 8,
            span: 16766..16767,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 558,
            column: 9,
            span: 16767..16768,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 558,
            column: 10,
            span: 16768..16769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "upvalue",
        ),
        position: Position {
            line: 558,
            column: 17,
            span: 16769..16776,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 558,
            column: 18,
            span: 16776..16777,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 558,
            column: 19,
            span: 16777..16778,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 558,
            column: 20,
            span: 16778..16779,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 558,
            column: 22,
            span: 16779..16781,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 558,
            column: 23,
            span: 16781..16782,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 558,
            column: 26,
            span: 16783..16785,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        position: Position {
            line: 558,
            column: 33,
            span: 16786..16792,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 558,
            column: 34,
            span: 16792..16793,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 562,
            column: 0,
            span: 16814..16816,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 563,
            column: 8,
            span: 16819..16824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 563,
            column: 10,
            span: 16825..16826,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 563,
            column: 12,
            span: 16827..16828,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"checkstack 300 msg;\"",
        ),
        position: Position {
            line: 563,
            column: 34,
            span: 16829..16850,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 563,
            column: 37,
            span: 16851..16853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 564,
            column: 19,
            span: 16866..16872,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 564,
            column: 20,
            span: 16872..16873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 564,
            column: 23,
            span: 16873..16876,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 564,
            column: 24,
            span: 16876..16877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushnum 10;\"",
        ),
        position: Position {
            line: 564,
            column: 37,
            span: 16877..16890,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 564,
            column: 38,
            span: 16890..16891,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 564,
            column: 42,
            span: 16891..16895,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 564,
            column: 43,
            span: 16895..16896,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 564,
            column: 46,
            span: 16897..16899,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushcclosure 255; return 1\"",
        ),
        position: Position {
            line: 565,
            column: 41,
            span: 16912..16940,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 566,
            column: 4,
            span: 16943..16944,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 566,
            column: 6,
            span: 16945..16946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 566,
            column: 8,
            span: 16947..16948,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 566,
            column: 9,
            span: 16948..16949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 566,
            column: 14,
            span: 16949..16954,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 566,
            column: 15,
            span: 16954..16955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 566,
            column: 16,
            span: 16955..16956,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 566,
            column: 17,
            span: 16956..16957,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 567,
            column: 6,
            span: 16960..16963,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 567,
            column: 8,
            span: 16964..16965,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 567,
            column: 9,
            span: 16965..16966,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 567,
            column: 10,
            span: 16965..16967,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 567,
            column: 11,
            span: 16967..16968,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "255",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 567,
            column: 14,
            span: 16967..16971,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 567,
            column: 0,
            span: 16972..16974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 568,
            column: 11,
            span: 16979..16985,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 568,
            column: 12,
            span: 16985..16986,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 568,
            column: 13,
            span: 16986..16987,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 568,
            column: 14,
            span: 16987..16988,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 568,
            column: 15,
            span: 16988..16989,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushvalue U%d; return 1\"",
        ),
        position: Position {
            line: 568,
            column: 40,
            span: 16989..17014,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 568,
            column: 41,
            span: 17014..17015,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 568,
            column: 42,
            span: 17015..17016,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 568,
            column: 48,
            span: 17016..17022,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 568,
            column: 49,
            span: 17022..17023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 568,
            column: 50,
            span: 17023..17024,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 568,
            column: 51,
            span: 17024..17025,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 568,
            column: 52,
            span: 17025..17026,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 568,
            column: 55,
            span: 17027..17029,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 568,
            column: 58,
            span: 17029..17032,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 568,
            column: 59,
            span: 17032..17033,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 569,
            column: 0,
            span: 17036..17039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 570,
            column: 9,
            span: 17042..17048,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 570,
            column: 10,
            span: 17048..17049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 570,
            column: 11,
            span: 17049..17050,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 570,
            column: 12,
            span: 17050..17051,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isnull U256; return 1\"",
        ),
        position: Position {
            line: 570,
            column: 35,
            span: 17051..17074,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 570,
            column: 36,
            span: 17074..17075,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 570,
            column: 37,
            span: 17075..17076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 571,
            column: 9,
            span: 17079..17085,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 571,
            column: 10,
            span: 17085..17086,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 571,
            column: 13,
            span: 17086..17089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 571,
            column: 15,
            span: 17090..17091,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 571,
            column: 16,
            span: 17091..17092,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"isnil U256; return 1\"",
        ),
        position: Position {
            line: 571,
            column: 38,
            span: 17092..17114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 571,
            column: 39,
            span: 17114..17115,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 571,
            column: 40,
            span: 17115..17116,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 572,
            column: 0,
            span: 17117..17120,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 578,
            column: 9,
            span: 17168..17176,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 578,
            column: 10,
            span: 17176..17177,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"got number\"",
        ),
        position: Position {
            line: 578,
            column: 22,
            span: 17177..17189,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 23,
            span: 17189..17190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 578,
            column: 29,
            span: 17191..17196,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 578,
            column: 30,
            span: 17196..17197,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 578,
            column: 42,
            span: 17197..17209,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 43,
            span: 17209..17210,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 578,
            column: 45,
            span: 17210..17212,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 578,
            column: 46,
            span: 17212..17213,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 578,
            column: 48,
            span: 17214..17215,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 578,
            column: 49,
            span: 17215..17216,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 578,
            column: 50,
            span: 17216..17217,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 579,
            column: 9,
            span: 17218..17226,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 579,
            column: 10,
            span: 17226..17227,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"got nil\"",
        ),
        position: Position {
            line: 579,
            column: 19,
            span: 17227..17236,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 20,
            span: 17236..17237,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 579,
            column: 26,
            span: 17238..17243,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 579,
            column: 27,
            span: 17243..17244,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 579,
            column: 39,
            span: 17244..17256,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 40,
            span: 17256..17257,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 579,
            column: 44,
            span: 17258..17261,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 579,
            column: 45,
            span: 17261..17262,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 579,
            column: 47,
            span: 17263..17264,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 579,
            column: 48,
            span: 17264..17265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 579,
            column: 49,
            span: 17265..17266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 580,
            column: 9,
            span: 17267..17275,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 580,
            column: 10,
            span: 17275..17276,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"got light userdata\"",
        ),
        position: Position {
            line: 580,
            column: 30,
            span: 17276..17296,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 580,
            column: 31,
            span: 17296..17297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 580,
            column: 37,
            span: 17298..17303,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 580,
            column: 38,
            span: 17303..17304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 580,
            column: 50,
            span: 17304..17316,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 580,
            column: 51,
            span: 17316..17317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 580,
            column: 53,
            span: 17318..17319,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 580,
            column: 54,
            span: 17319..17320,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 580,
            column: 66,
            span: 17320..17332,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 580,
            column: 67,
            span: 17332..17333,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 580,
            column: 68,
            span: 17332..17334,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 580,
            column: 69,
            span: 17334..17335,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 580,
            column: 70,
            span: 17335..17336,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 580,
            column: 72,
            span: 17337..17338,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 580,
            column: 73,
            span: 17338..17339,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 580,
            column: 74,
            span: 17339..17340,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 582,
            column: 6,
            span: 17342..17347,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 582,
            column: 8,
            span: 17348..17349,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 582,
            column: 10,
            span: 17350..17351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 582,
            column: 12,
            span: 17352..17353,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 582,
            column: 13,
            span: 17353..17354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 582,
            column: 24,
            span: 17354..17365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 582,
            column: 25,
            span: 17365..17366,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 582,
            column: 26,
            span: 17365..17367,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 582,
            column: 27,
            span: 17367..17368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 583,
            column: 7,
            span: 17369..17375,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 583,
            column: 8,
            span: 17375..17376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 583,
            column: 13,
            span: 17376..17381,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 583,
            column: 14,
            span: 17381..17382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 583,
            column: 26,
            span: 17382..17394,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 583,
            column: 27,
            span: 17394..17395,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 583,
            column: 28,
            span: 17395..17396,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 583,
            column: 29,
            span: 17396..17397,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 583,
            column: 32,
            span: 17398..17400,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 583,
            column: 36,
            span: 17401..17404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 583,
            column: 37,
            span: 17404..17405,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 584,
            column: 4,
            span: 17406..17409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 584,
            column: 6,
            span: 17410..17411,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 584,
            column: 7,
            span: 17411..17412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 584,
            column: 9,
            span: 17413..17414,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 584,
            column: 12,
            span: 17415..17417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 584,
            column: 18,
            span: 17418..17423,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 584,
            column: 19,
            span: 17423..17424,
        },
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        position: Position {
            line: 584,
            column: 23,
            span: 17424..17428,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 584,
            column: 24,
            span: 17428..17429,
        },
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        position: Position {
            line: 584,
            column: 30,
            span: 17430..17435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 584,
            column: 31,
            span: 17435..17436,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: ".56",
                },
            ),
        ),
        position: Position {
            line: 584,
            column: 36,
            span: 17436..17441,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 584,
            column: 37,
            span: 17441..17442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 584,
            column: 43,
            span: 17443..17448,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 584,
            column: 44,
            span: 17448..17449,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 584,
            column: 46,
            span: 17450..17451,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 584,
            column: 47,
            span: 17451..17452,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 584,
            column: 48,
            span: 17452..17453,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 584,
            column: 50,
            span: 17454..17455,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 584,
            column: 51,
            span: 17455..17456,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XYZ\"",
        ),
        position: Position {
            line: 584,
            column: 57,
            span: 17457..17462,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 584,
            column: 58,
            span: 17462..17463,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 584,
            column: 0,
            span: 17464..17466,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 585,
            column: 9,
            span: 17469..17475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 585,
            column: 10,
            span: 17475..17476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 585,
            column: 15,
            span: 17476..17481,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 585,
            column: 16,
            span: 17481..17482,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 585,
            column: 28,
            span: 17482..17494,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 585,
            column: 29,
            span: 17494..17495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 585,
            column: 30,
            span: 17495..17496,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 585,
            column: 31,
            span: 17496..17497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 585,
            column: 33,
            span: 17498..17499,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 585,
            column: 34,
            span: 17499..17500,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 585,
            column: 37,
            span: 17501..17503,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 585,
            column: 39,
            span: 17504..17505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 585,
            column: 40,
            span: 17505..17506,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 586,
            column: 9,
            span: 17509..17515,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 586,
            column: 10,
            span: 17515..17516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 586,
            column: 15,
            span: 17516..17521,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 586,
            column: 16,
            span: 17521..17522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 586,
            column: 28,
            span: 17522..17534,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 586,
            column: 29,
            span: 17534..17535,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 586,
            column: 30,
            span: 17535..17536,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 586,
            column: 31,
            span: 17536..17537,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 586,
            column: 34,
            span: 17538..17540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        position: Position {
            line: 586,
            column: 36,
            span: 17541..17542,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 586,
            column: 37,
            span: 17542..17543,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 587,
            column: 0,
            span: 17544..17547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 589,
            column: 7,
            span: 17549..17555,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 589,
            column: 8,
            span: 17555..17556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 589,
            column: 13,
            span: 17556..17561,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 589,
            column: 14,
            span: 17561..17562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 589,
            column: 26,
            span: 17562..17574,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 589,
            column: 27,
            span: 17574..17575,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 589,
            column: 28,
            span: 17574..17576,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 589,
            column: 29,
            span: 17576..17577,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 589,
            column: 32,
            span: 17578..17580,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 589,
            column: 36,
            span: 17581..17584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 589,
            column: 37,
            span: 17584..17585,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 591,
            column: 6,
            span: 17587..17592,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 591,
            column: 7,
            span: 17592..17593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 591,
            column: 19,
            span: 17593..17605,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 591,
            column: 20,
            span: 17605..17606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 591,
            column: 21,
            span: 17606..17607,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 591,
            column: 22,
            span: 17607..17608,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 591,
            column: 31,
            span: 17609..17617,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 591,
            column: 33,
            span: 17618..17619,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 591,
            column: 34,
            span: 17619..17620,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 591,
            column: 41,
            span: 17621..17627,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 591,
            column: 44,
            span: 17627..17630,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 591,
            column: 48,
            span: 17631..17634,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 591,
            column: 49,
            span: 17634..17635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 592,
            column: 15,
            span: 17636..17650,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 592,
            column: 16,
            span: 17650..17651,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 592,
            column: 17,
            span: 17651..17652,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 593,
            column: 7,
            span: 17691..17697,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 8,
            span: 17697..17698,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 593,
            column: 13,
            span: 17698..17703,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 593,
            column: 14,
            span: 17703..17704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 593,
            column: 26,
            span: 17704..17716,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 27,
            span: 17716..17717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 593,
            column: 28,
            span: 17717..17718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 29,
            span: 17718..17719,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 593,
            column: 30,
            span: 17719..17720,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 31,
            span: 17720..17721,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 593,
            column: 34,
            span: 17722..17724,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 593,
            column: 37,
            span: 17724..17727,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 593,
            column: 38,
            span: 17727..17728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 595,
            column: 6,
            span: 17730..17735,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 595,
            column: 7,
            span: 17735..17736,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 595,
            column: 19,
            span: 17736..17748,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 595,
            column: 20,
            span: 17748..17749,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 595,
            column: 21,
            span: 17749..17750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 595,
            column: 22,
            span: 17750..17751,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "134",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 595,
            column: 26,
            span: 17751..17755,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 595,
            column: 27,
            span: 17755..17756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 596,
            column: 15,
            span: 17757..17771,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 596,
            column: 16,
            span: 17771..17772,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 596,
            column: 17,
            span: 17772..17773,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 597,
            column: 7,
            span: 17824..17830,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 597,
            column: 8,
            span: 17830..17831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 597,
            column: 13,
            span: 17831..17836,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 597,
            column: 14,
            span: 17836..17837,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 597,
            column: 26,
            span: 17837..17849,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 597,
            column: 27,
            span: 17849..17850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 597,
            column: 28,
            span: 17850..17851,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 597,
            column: 29,
            span: 17851..17852,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 597,
            column: 32,
            span: 17853..17855,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "134",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 597,
            column: 36,
            span: 17855..17859,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 597,
            column: 37,
            span: 17859..17860,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 600,
            column: 2,
            span: 17893..17894,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 600,
            column: 3,
            span: 17894..17895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        position: Position {
            line: 600,
            column: 10,
            span: 17895..17902,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 600,
            column: 11,
            span: 17902..17903,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"atomic\"",
        ),
        position: Position {
            line: 600,
            column: 19,
            span: 17903..17911,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 600,
            column: 20,
            span: 17911..17912,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 601,
            column: 7,
            span: 17913..17919,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 601,
            column: 8,
            span: 17919..17920,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 601,
            column: 9,
            span: 17920..17921,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 601,
            column: 10,
            span: 17921..17922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gccolor",
        ),
        position: Position {
            line: 601,
            column: 17,
            span: 17922..17929,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 601,
            column: 18,
            span: 17929..17930,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 601,
            column: 19,
            span: 17930..17931,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 601,
            column: 20,
            span: 17931..17932,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 601,
            column: 23,
            span: 17933..17935,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"black\"",
        ),
        position: Position {
            line: 601,
            column: 31,
            span: 17936..17943,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 601,
            column: 32,
            span: 17943..17944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 602,
            column: 6,
            span: 17945..17950,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 602,
            column: 7,
            span: 17950..17951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 602,
            column: 19,
            span: 17951..17963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 602,
            column: 20,
            span: 17963..17964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 602,
            column: 21,
            span: 17964..17965,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 602,
            column: 22,
            span: 17965..17966,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 602,
            column: 24,
            span: 17967..17968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 602,
            column: 25,
            span: 17968..17969,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 602,
            column: 27,
            span: 17970..17971,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 602,
            column: 31,
            span: 17971..17975,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 602,
            column: 32,
            span: 17975..17976,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 602,
            column: 33,
            span: 17976..17977,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 603,
            column: 2,
            span: 17978..17979,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 603,
            column: 3,
            span: 17979..17980,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gcstate",
        ),
        position: Position {
            line: 603,
            column: 10,
            span: 17980..17987,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 603,
            column: 11,
            span: 17987..17988,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pause\"",
        ),
        position: Position {
            line: 603,
            column: 18,
            span: 17988..17995,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 603,
            column: 19,
            span: 17995..17996,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 604,
            column: 7,
            span: 18021..18027,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 604,
            column: 8,
            span: 18027..18028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 604,
            column: 13,
            span: 18028..18033,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 604,
            column: 14,
            span: 18033..18034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 604,
            column: 26,
            span: 18034..18046,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 604,
            column: 27,
            span: 18046..18047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 604,
            column: 28,
            span: 18047..18048,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 604,
            column: 29,
            span: 18048..18049,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 604,
            column: 30,
            span: 18049..18050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 604,
            column: 31,
            span: 18050..18051,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 604,
            column: 34,
            span: 18052..18054,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 604,
            column: 38,
            span: 18054..18058,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 604,
            column: 39,
            span: 18058..18059,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 607,
            column: 4,
            span: 18114..18117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 607,
            column: 6,
            span: 18118..18119,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 607,
            column: 8,
            span: 18120..18121,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 607,
            column: 10,
            span: 18121..18123,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 607,
            column: 11,
            span: 18123..18124,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 607,
            column: 16,
            span: 18124..18129,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 607,
            column: 0,
            span: 18130..18132,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 608,
            column: 8,
            span: 18135..18140,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bb",
        ),
        position: Position {
            line: 608,
            column: 11,
            span: 18141..18143,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 608,
            column: 13,
            span: 18144..18145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 608,
            column: 15,
            span: 18146..18147,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 608,
            column: 16,
            span: 18147..18148,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 608,
            column: 27,
            span: 18148..18159,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 608,
            column: 28,
            span: 18159..18160,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 608,
            column: 29,
            span: 18159..18161,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 608,
            column: 30,
            span: 18161..18162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 609,
            column: 8,
            span: 18165..18170,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 609,
            column: 9,
            span: 18170..18171,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        position: Position {
            line: 609,
            column: 21,
            span: 18171..18183,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 609,
            column: 22,
            span: 18183..18184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bb",
        ),
        position: Position {
            line: 609,
            column: 24,
            span: 18184..18186,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 609,
            column: 25,
            span: 18186..18187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 609,
            column: 27,
            span: 18188..18189,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 609,
            column: 28,
            span: 18189..18190,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 610,
            column: 4,
            span: 18193..18194,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 610,
            column: 6,
            span: 18195..18196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "bb",
        ),
        position: Position {
            line: 610,
            column: 0,
            span: 18197..18199,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 611,
            column: 0,
            span: 18200..18203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 612,
            column: 15,
            span: 18204..18218,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 612,
            column: 16,
            span: 18218..18219,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 612,
            column: 17,
            span: 18219..18220,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 613,
            column: 4,
            span: 18260..18263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 613,
            column: 6,
            span: 18264..18265,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 613,
            column: 8,
            span: 18266..18267,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 613,
            column: 10,
            span: 18267..18269,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 613,
            column: 11,
            span: 18269..18270,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 613,
            column: 16,
            span: 18270..18275,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 613,
            column: 0,
            span: 18276..18278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 614,
            column: 4,
            span: 18281..18282,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 614,
            column: 6,
            span: 18283..18284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 614,
            column: 12,
            span: 18285..18290,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 614,
            column: 13,
            span: 18290..18291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 614,
            column: 25,
            span: 18291..18303,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 614,
            column: 26,
            span: 18303..18304,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 614,
            column: 27,
            span: 18304..18305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 614,
            column: 28,
            span: 18305..18306,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 615,
            column: 0,
            span: 18307..18310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 616,
            column: 7,
            span: 18311..18317,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 616,
            column: 8,
            span: 18317..18318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 616,
            column: 13,
            span: 18318..18323,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 616,
            column: 14,
            span: 18323..18324,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        position: Position {
            line: 616,
            column: 26,
            span: 18324..18336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 616,
            column: 27,
            span: 18336..18337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 616,
            column: 28,
            span: 18337..18338,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 616,
            column: 29,
            span: 18338..18339,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 616,
            column: 30,
            span: 18339..18340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 616,
            column: 31,
            span: 18340..18341,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 616,
            column: 34,
            span: 18342..18344,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 616,
            column: 38,
            span: 18344..18348,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 616,
            column: 39,
            span: 18348..18349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 617,
            column: 2,
            span: 18350..18351,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 617,
            column: 4,
            span: 18352..18353,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 617,
            column: 0,
            span: 18354..18357,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 623,
            column: 6,
            span: 18408..18413,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 623,
            column: 8,
            span: 18414..18415,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 623,
            column: 10,
            span: 18416..18417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 623,
            column: 12,
            span: 18418..18419,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 623,
            column: 13,
            span: 18419..18420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 623,
            column: 16,
            span: 18420..18423,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 623,
            column: 17,
            span: 18423..18424,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 623,
            column: 18,
            span: 18424..18425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 624,
            column: 2,
            span: 18426..18427,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 624,
            column: 3,
            span: 18427..18428,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 624,
            column: 8,
            span: 18428..18433,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 624,
            column: 9,
            span: 18433..18434,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 624,
            column: 10,
            span: 18434..18435,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 624,
            column: 11,
            span: 18435..18436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 625,
            column: 7,
            span: 18437..18443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 625,
            column: 8,
            span: 18443..18444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 625,
            column: 9,
            span: 18444..18445,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 625,
            column: 10,
            span: 18445..18446,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 625,
            column: 13,
            span: 18446..18449,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 625,
            column: 14,
            span: 18449..18450,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 625,
            column: 15,
            span: 18450..18451,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 625,
            column: 18,
            span: 18452..18454,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 625,
            column: 20,
            span: 18455..18456,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 625,
            column: 21,
            span: 18456..18457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 627,
            column: 4,
            span: 18459..18462,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 627,
            column: 6,
            span: 18463..18464,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 627,
            column: 8,
            span: 18465..18466,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 627,
            column: 9,
            span: 18466..18467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 628,
            column: 4,
            span: 18468..18471,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 628,
            column: 6,
            span: 18472..18473,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 628,
            column: 0,
            span: 18473..18477,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 629,
            column: 4,
            span: 18478..18481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 629,
            column: 6,
            span: 18482..18483,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 629,
            column: 7,
            span: 18483..18484,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 629,
            column: 8,
            span: 18483..18485,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 629,
            column: 9,
            span: 18485..18486,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 629,
            column: 12,
            span: 18486..18489,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 629,
            column: 15,
            span: 18490..18492,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 630,
            column: 6,
            span: 18518..18521,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 630,
            column: 7,
            span: 18521..18522,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 630,
            column: 8,
            span: 18522..18523,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 630,
            column: 9,
            span: 18523..18524,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 630,
            column: 11,
            span: 18525..18526,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 630,
            column: 13,
            span: 18527..18528,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 630,
            column: 14,
            span: 18528..18529,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 630,
            column: 17,
            span: 18529..18532,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 630,
            column: 18,
            span: 18532..18533,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 630,
            column: 19,
            span: 18533..18534,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 630,
            column: 20,
            span: 18534..18535,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 630,
            column: 21,
            span: 18535..18536,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 631,
            column: 0,
            span: 18537..18540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 633,
            column: 7,
            span: 18542..18548,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 633,
            column: 8,
            span: 18548..18549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 633,
            column: 9,
            span: 18549..18550,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 633,
            column: 10,
            span: 18550..18551,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 633,
            column: 13,
            span: 18551..18554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 633,
            column: 14,
            span: 18554..18555,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 633,
            column: 17,
            span: 18555..18558,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 633,
            column: 18,
            span: 18558..18559,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 633,
            column: 21,
            span: 18560..18562,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 633,
            column: 23,
            span: 18563..18564,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 633,
            column: 24,
            span: 18563..18565,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 633,
            column: 28,
            span: 18566..18569,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 633,
            column: 30,
            span: 18570..18571,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 633,
            column: 31,
            span: 18571..18572,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 633,
            column: 37,
            span: 18572..18578,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 633,
            column: 38,
            span: 18578..18579,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 633,
            column: 39,
            span: 18579..18580,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 633,
            column: 40,
            span: 18579..18581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 633,
            column: 41,
            span: 18581..18582,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 633,
            column: 44,
            span: 18583..18585,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 633,
            column: 48,
            span: 18586..18589,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 633,
            column: 49,
            span: 18589..18590,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 634,
            column: 2,
            span: 18591..18592,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 634,
            column: 3,
            span: 18592..18593,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 634,
            column: 8,
            span: 18593..18598,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 634,
            column: 9,
            span: 18598..18599,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 634,
            column: 10,
            span: 18599..18600,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 634,
            column: 11,
            span: 18599..18601,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 634,
            column: 12,
            span: 18601..18602,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 634,
            column: 13,
            span: 18602..18603,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 634,
            column: 15,
            span: 18604..18605,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 634,
            column: 16,
            span: 18605..18606,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 634,
            column: 21,
            span: 18606..18611,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 634,
            column: 22,
            span: 18611..18612,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 634,
            column: 23,
            span: 18612..18613,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 634,
            column: 24,
            span: 18612..18614,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 634,
            column: 25,
            span: 18614..18615,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 636,
            column: 4,
            span: 18617..18620,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 636,
            column: 6,
            span: 18621..18622,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 636,
            column: 7,
            span: 18622..18623,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 636,
            column: 8,
            span: 18622..18624,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 636,
            column: 9,
            span: 18624..18625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 636,
            column: 12,
            span: 18625..18628,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 636,
            column: 15,
            span: 18629..18631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 637,
            column: 4,
            span: 18655..18656,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 637,
            column: 5,
            span: 18656..18657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 637,
            column: 10,
            span: 18657..18662,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 637,
            column: 11,
            span: 18662..18663,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 637,
            column: 14,
            span: 18663..18666,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 637,
            column: 15,
            span: 18666..18667,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 637,
            column: 16,
            span: 18667..18668,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 637,
            column: 17,
            span: 18668..18669,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 637,
            column: 18,
            span: 18669..18670,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 638,
            column: 0,
            span: 18671..18674,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 640,
            column: 9,
            span: 18676..18684,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "printlocks",
        ),
        position: Position {
            line: 640,
            column: 20,
            span: 18685..18695,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 640,
            column: 22,
            span: 18696..18697,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 640,
            column: 23,
            span: 18697..18698,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 641,
            column: 8,
            span: 18701..18706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 641,
            column: 10,
            span: 18707..18708,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 641,
            column: 12,
            span: 18709..18710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 641,
            column: 14,
            span: 18711..18712,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 641,
            column: 15,
            span: 18712..18713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "makeCfunc",
        ),
        position: Position {
            line: 641,
            column: 24,
            span: 18713..18722,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 641,
            column: 25,
            span: 18722..18723,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gettable R; return 1\"",
        ),
        position: Position {
            line: 641,
            column: 47,
            span: 18723..18745,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 641,
            column: 48,
            span: 18745..18746,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 642,
            column: 8,
            span: 18749..18754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 642,
            column: 10,
            span: 18755..18756,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 642,
            column: 12,
            span: 18757..18758,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 642,
            column: 14,
            span: 18759..18760,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 642,
            column: 15,
            span: 18760..18761,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 642,
            column: 18,
            span: 18761..18764,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 642,
            column: 19,
            span: 18764..18765,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 643,
            column: 8,
            span: 18768..18773,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 643,
            column: 9,
            span: 18773..18774,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"n\"",
        ),
        position: Position {
            line: 643,
            column: 12,
            span: 18774..18777,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 643,
            column: 13,
            span: 18777..18778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 643,
            column: 15,
            span: 18779..18780,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 643,
            column: 16,
            span: 18780..18781,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 644,
            column: 6,
            span: 18784..18787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 644,
            column: 8,
            span: 18788..18789,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 644,
            column: 9,
            span: 18789..18790,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 644,
            column: 10,
            span: 18789..18791,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 644,
            column: 11,
            span: 18791..18792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 644,
            column: 12,
            span: 18792..18793,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 644,
            column: 0,
            span: 18794..18796,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 645,
            column: 10,
            span: 18801..18806,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 645,
            column: 11,
            span: 18806..18807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 645,
            column: 12,
            span: 18807..18808,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 645,
            column: 13,
            span: 18808..18809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 645,
            column: 15,
            span: 18810..18811,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 645,
            column: 16,
            span: 18811..18812,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 645,
            column: 17,
            span: 18812..18813,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 645,
            column: 18,
            span: 18813..18814,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 645,
            column: 19,
            span: 18814..18815,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 646,
            column: 0,
            span: 18818..18821,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 647,
            column: 0,
            span: 18822..18825,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 650,
            column: 4,
            span: 18828..18831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 650,
            column: 6,
            span: 18832..18833,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 650,
            column: 7,
            span: 18833..18834,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 650,
            column: 8,
            span: 18833..18835,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 650,
            column: 9,
            span: 18835..18836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 650,
            column: 12,
            span: 18836..18839,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 650,
            column: 15,
            span: 18840..18842,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 651,
            column: 6,
            span: 18868..18871,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 651,
            column: 7,
            span: 18871..18872,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 651,
            column: 8,
            span: 18872..18873,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 651,
            column: 9,
            span: 18873..18874,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 651,
            column: 11,
            span: 18875..18876,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 651,
            column: 13,
            span: 18877..18878,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 651,
            column: 14,
            span: 18878..18879,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 651,
            column: 17,
            span: 18879..18882,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 651,
            column: 18,
            span: 18882..18883,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 651,
            column: 19,
            span: 18883..18884,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 651,
            column: 20,
            span: 18884..18885,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 651,
            column: 21,
            span: 18885..18886,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 652,
            column: 0,
            span: 18887..18890,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 654,
            column: 4,
            span: 18892..18895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 654,
            column: 6,
            span: 18896..18897,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 654,
            column: 7,
            span: 18897..18898,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 8,
            span: 18897..18899,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 654,
            column: 9,
            span: 18899..18900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 654,
            column: 12,
            span: 18900..18903,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 654,
            column: 13,
            span: 18903..18904,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 654,
            column: 14,
            span: 18903..18905,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 654,
            column: 17,
            span: 18906..18908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 655,
            column: 4,
            span: 18936..18937,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 655,
            column: 5,
            span: 18937..18938,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 655,
            column: 10,
            span: 18938..18943,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 655,
            column: 11,
            span: 18943..18944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 655,
            column: 14,
            span: 18944..18947,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 655,
            column: 15,
            span: 18947..18948,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 655,
            column: 16,
            span: 18948..18949,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 655,
            column: 17,
            span: 18949..18950,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 655,
            column: 18,
            span: 18950..18951,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 656,
            column: 0,
            span: 18952..18955,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 658,
            column: 7,
            span: 18957..18963,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 658,
            column: 8,
            span: 18963..18964,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 658,
            column: 12,
            span: 18964..18968,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 658,
            column: 13,
            span: 18968..18969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 658,
            column: 14,
            span: 18969..18970,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 658,
            column: 15,
            span: 18970..18971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 658,
            column: 21,
            span: 18971..18977,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 658,
            column: 22,
            span: 18977..18978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 658,
            column: 25,
            span: 18978..18981,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 658,
            column: 26,
            span: 18981..18982,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 658,
            column: 27,
            span: 18981..18983,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 658,
            column: 28,
            span: 18983..18984,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 658,
            column: 29,
            span: 18984..18985,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 658,
            column: 30,
            span: 18985..18986,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 658,
            column: 33,
            span: 18987..18989,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 658,
            column: 41,
            span: 18990..18997,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 658,
            column: 42,
            span: 18997..18998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 661,
            column: 7,
            span: 19001..19007,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 661,
            column: 8,
            span: 19007..19008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 661,
            column: 9,
            span: 19008..19009,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 661,
            column: 10,
            span: 19009..19010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 661,
            column: 16,
            span: 19010..19016,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 661,
            column: 17,
            span: 19016..19017,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 661,
            column: 18,
            span: 19017..19018,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 661,
            column: 19,
            span: 19017..19019,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 661,
            column: 20,
            span: 19019..19020,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 661,
            column: 23,
            span: 19021..19023,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 661,
            column: 27,
            span: 19024..19027,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 661,
            column: 28,
            span: 19027..19028,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 664,
            column: 2,
            span: 19031..19032,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 664,
            column: 4,
            span: 19033..19034,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 664,
            column: 6,
            span: 19035..19036,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 664,
            column: 7,
            span: 19036..19037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 664,
            column: 10,
            span: 19037..19040,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 664,
            column: 11,
            span: 19040..19041,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 664,
            column: 12,
            span: 19041..19042,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 664,
            column: 13,
            span: 19042..19043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 664,
            column: 14,
            span: 19043..19044,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 666,
            column: 15,
            span: 19046..19060,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 666,
            column: 16,
            span: 19060..19061,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 666,
            column: 17,
            span: 19061..19062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 668,
            column: 7,
            span: 19064..19070,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 668,
            column: 8,
            span: 19070..19071,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 668,
            column: 12,
            span: 19071..19075,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 668,
            column: 13,
            span: 19075..19076,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 668,
            column: 14,
            span: 19076..19077,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 668,
            column: 15,
            span: 19077..19078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 668,
            column: 21,
            span: 19078..19084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 668,
            column: 22,
            span: 19084..19085,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 668,
            column: 23,
            span: 19085..19086,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 668,
            column: 24,
            span: 19086..19087,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 668,
            column: 25,
            span: 19087..19088,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 668,
            column: 28,
            span: 19089..19091,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 668,
            column: 36,
            span: 19092..19099,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 668,
            column: 37,
            span: 19099..19100,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 672,
            column: 3,
            span: 19155..19157,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 672,
            column: 5,
            span: 19158..19159,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 672,
            column: 7,
            span: 19160..19161,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 672,
            column: 8,
            span: 19161..19162,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 673,
            column: 3,
            span: 19163..19165,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 673,
            column: 5,
            span: 19166..19167,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 673,
            column: 7,
            span: 19168..19169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 673,
            column: 8,
            span: 19169..19170,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 673,
            column: 9,
            span: 19170..19171,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 673,
            column: 10,
            span: 19170..19172,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 673,
            column: 11,
            span: 19172..19173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 674,
            column: 2,
            span: 19174..19175,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 674,
            column: 4,
            span: 19176..19177,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 674,
            column: 8,
            span: 19178..19181,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 674,
            column: 9,
            span: 19181..19182,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 674,
            column: 11,
            span: 19183..19184,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 674,
            column: 13,
            span: 19185..19186,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 674,
            column: 0,
            span: 19187..19190,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 675,
            column: 6,
            span: 19191..19196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 675,
            column: 0,
            span: 19197..19198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 676,
            column: 2,
            span: 19199..19200,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 676,
            column: 4,
            span: 19201..19202,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 676,
            column: 13,
            span: 19203..19211,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 676,
            column: 15,
            span: 19212..19213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 676,
            column: 16,
            span: 19213..19214,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 676,
            column: 17,
            span: 19214..19215,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 677,
            column: 8,
            span: 19218..19223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        position: Position {
            line: 677,
            column: 14,
            span: 19224..19229,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 677,
            column: 16,
            span: 19230..19231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 677,
            column: 18,
            span: 19232..19233,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 677,
            column: 19,
            span: 19233..19234,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 677,
            column: 27,
            span: 19234..19242,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 677,
            column: 28,
            span: 19242..19243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 677,
            column: 29,
            span: 19243..19244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 677,
            column: 30,
            span: 19244..19245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 678,
            column: 8,
            span: 19248..19253,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 678,
            column: 9,
            span: 19253..19254,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "insert",
        ),
        position: Position {
            line: 678,
            column: 15,
            span: 19254..19260,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 678,
            column: 16,
            span: 19260..19261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 678,
            column: 18,
            span: 19261..19263,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 678,
            column: 19,
            span: 19263..19264,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        position: Position {
            line: 678,
            column: 25,
            span: 19265..19270,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 678,
            column: 26,
            span: 19270..19271,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 679,
            column: 8,
            span: 19274..19279,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 679,
            column: 10,
            span: 19280..19281,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 679,
            column: 12,
            span: 19282..19283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 679,
            column: 14,
            span: 19284..19285,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 679,
            column: 15,
            span: 19285..19286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 679,
            column: 26,
            span: 19286..19297,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 679,
            column: 27,
            span: 19297..19298,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 679,
            column: 30,
            span: 19297..19301,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 679,
            column: 31,
            span: 19301..19302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 680,
            column: 4,
            span: 19320..19321,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 680,
            column: 6,
            span: 19322..19323,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 680,
            column: 0,
            span: 19324..19327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 681,
            column: 9,
            span: 19330..19336,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 681,
            column: 10,
            span: 19336..19337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 681,
            column: 15,
            span: 19337..19342,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 681,
            column: 16,
            span: 19342..19343,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 681,
            column: 28,
            span: 19343..19355,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 681,
            column: 29,
            span: 19355..19356,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 681,
            column: 30,
            span: 19356..19357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 681,
            column: 31,
            span: 19357..19358,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 681,
            column: 32,
            span: 19358..19359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 681,
            column: 36,
            span: 19359..19363,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 681,
            column: 39,
            span: 19364..19366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 681,
            column: 41,
            span: 19367..19368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 681,
            column: 42,
            span: 19368..19369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 682,
            column: 9,
            span: 19372..19378,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 682,
            column: 10,
            span: 19378..19379,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 682,
            column: 14,
            span: 19379..19383,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 682,
            column: 15,
            span: 19383..19384,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table.insert({}, {})\"",
        ),
        position: Position {
            line: 682,
            column: 37,
            span: 19384..19406,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 682,
            column: 38,
            span: 19406..19407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 682,
            column: 39,
            span: 19407..19408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 682,
            column: 40,
            span: 19408..19409,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 682,
            column: 41,
            span: 19409..19410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 683,
            column: 17,
            span: 19433..19447,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 683,
            column: 18,
            span: 19447..19448,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 683,
            column: 19,
            span: 19448..19449,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 684,
            column: 9,
            span: 19494..19500,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 684,
            column: 10,
            span: 19500..19501,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 684,
            column: 15,
            span: 19501..19506,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 684,
            column: 16,
            span: 19506..19507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 684,
            column: 28,
            span: 19507..19519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 684,
            column: 29,
            span: 19519..19520,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 684,
            column: 30,
            span: 19520..19521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 684,
            column: 31,
            span: 19521..19522,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 684,
            column: 32,
            span: 19522..19523,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 684,
            column: 36,
            span: 19523..19527,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 684,
            column: 39,
            span: 19528..19530,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 684,
            column: 41,
            span: 19531..19532,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 684,
            column: 42,
            span: 19532..19533,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 685,
            column: 8,
            span: 19573..19578,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dummy",
        ),
        position: Position {
            line: 685,
            column: 14,
            span: 19579..19584,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 685,
            column: 16,
            span: 19585..19586,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 685,
            column: 18,
            span: 19587..19588,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 685,
            column: 19,
            span: 19588..19589,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 686,
            column: 5,
            span: 19623..19625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 686,
            column: 7,
            span: 19626..19627,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 686,
            column: 10,
            span: 19628..19630,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 686,
            column: 14,
            span: 19631..19634,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 686,
            column: 0,
            span: 19635..19639,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 687,
            column: 11,
            span: 19644..19650,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 687,
            column: 12,
            span: 19650..19651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 687,
            column: 16,
            span: 19651..19655,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 687,
            column: 17,
            span: 19655..19656,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 687,
            column: 18,
            span: 19656..19657,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 687,
            column: 19,
            span: 19657..19658,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 687,
            column: 22,
            span: 19659..19661,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"userdata\"",
        ),
        position: Position {
            line: 687,
            column: 33,
            span: 19662..19672,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 687,
            column: 34,
            span: 19672..19673,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 688,
            column: 11,
            span: 19678..19684,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 688,
            column: 12,
            span: 19684..19685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 688,
            column: 13,
            span: 19685..19686,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 688,
            column: 14,
            span: 19686..19687,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 688,
            column: 22,
            span: 19687..19695,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 688,
            column: 23,
            span: 19695..19696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 688,
            column: 24,
            span: 19696..19697,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 688,
            column: 25,
            span: 19697..19698,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 688,
            column: 28,
            span: 19699..19701,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 688,
            column: 30,
            span: 19702..19703,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 688,
            column: 31,
            span: 19703..19704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 689,
            column: 10,
            span: 19709..19714,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 689,
            column: 11,
            span: 19714..19715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 689,
            column: 23,
            span: 19715..19727,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 689,
            column: 24,
            span: 19727..19728,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 689,
            column: 25,
            span: 19728..19729,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 689,
            column: 26,
            span: 19729..19730,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 690,
            column: 0,
            span: 19753..19756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 691,
            column: 4,
            span: 19759..19760,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 691,
            column: 6,
            span: 19761..19762,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 691,
            column: 8,
            span: 19763..19764,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        position: Position {
            line: 692,
            column: 4,
            span: 19791..19792,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 692,
            column: 6,
            span: 19793..19794,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udval",
        ),
        position: Position {
            line: 692,
            column: 0,
            span: 19795..19800,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 693,
            column: 9,
            span: 19803..19809,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 693,
            column: 11,
            span: 19809..19811,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 693,
            column: 12,
            span: 19811..19812,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 693,
            column: 13,
            span: 19811..19813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 693,
            column: 14,
            span: 19813..19814,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 693,
            column: 0,
            span: 19813..19815,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 694,
            column: 0,
            span: 19816..19819,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 695,
            column: 3,
            span: 19820..19822,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 695,
            column: 4,
            span: 19822..19823,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 695,
            column: 8,
            span: 19823..19827,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 695,
            column: 10,
            span: 19828..19829,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 695,
            column: 0,
            span: 19830..19831,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 698,
            column: 0,
            span: 19897..19899,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 699,
            column: 17,
            span: 19902..19916,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 699,
            column: 18,
            span: 19916..19917,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 699,
            column: 19,
            span: 19917..19918,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 699,
            column: 20,
            span: 19918..19919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 700,
            column: 17,
            span: 19922..19936,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 700,
            column: 18,
            span: 19936..19937,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 700,
            column: 19,
            span: 19937..19938,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 700,
            column: 20,
            span: 19938..19939,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 701,
            column: 8,
            span: 19942..19947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 701,
            column: 10,
            span: 19948..19949,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 701,
            column: 12,
            span: 19950..19951,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 701,
            column: 27,
            span: 19952..19966,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 701,
            column: 28,
            span: 19966..19967,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 701,
            column: 35,
            span: 19967..19974,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 701,
            column: 36,
            span: 19974..19975,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 701,
            column: 37,
            span: 19975..19976,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 702,
            column: 8,
            span: 19979..19984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 702,
            column: 10,
            span: 19985..19986,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 702,
            column: 12,
            span: 19987..19988,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 702,
            column: 14,
            span: 19989..19990,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 702,
            column: 15,
            span: 19990..19991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 702,
            column: 26,
            span: 19991..20002,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 702,
            column: 27,
            span: 20002..20003,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 702,
            column: 31,
            span: 20002..20007,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 702,
            column: 32,
            span: 20007..20008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 703,
            column: 9,
            span: 20011..20017,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 703,
            column: 10,
            span: 20017..20018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 703,
            column: 11,
            span: 20018..20019,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 703,
            column: 12,
            span: 20019..20020,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 703,
            column: 17,
            span: 20020..20025,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 703,
            column: 18,
            span: 20025..20026,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize 2; return 1\"",
        ),
        position: Position {
            line: 703,
            column: 39,
            span: 20026..20047,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 703,
            column: 40,
            span: 20047..20048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 703,
            column: 42,
            span: 20049..20050,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 703,
            column: 43,
            span: 20050..20051,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 703,
            column: 46,
            span: 20052..20054,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5001",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 703,
            column: 51,
            span: 20054..20059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 703,
            column: 52,
            span: 20059..20060,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 704,
            column: 9,
            span: 20063..20069,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 704,
            column: 10,
            span: 20069..20070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 704,
            column: 24,
            span: 20070..20084,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 704,
            column: 25,
            span: 20084..20085,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 704,
            column: 32,
            span: 20085..20092,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 704,
            column: 33,
            span: 20092..20093,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 704,
            column: 36,
            span: 20094..20096,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 704,
            column: 38,
            span: 20097..20098,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 704,
            column: 39,
            span: 20098..20099,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 704,
            column: 40,
            span: 20098..20100,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 704,
            column: 41,
            span: 20100..20101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 705,
            column: 4,
            span: 20104..20105,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 705,
            column: 6,
            span: 20106..20107,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 705,
            column: 0,
            span: 20108..20111,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 706,
            column: 17,
            span: 20114..20128,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 706,
            column: 18,
            span: 20128..20129,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 706,
            column: 19,
            span: 20129..20130,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 706,
            column: 20,
            span: 20130..20131,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 707,
            column: 9,
            span: 20134..20140,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 707,
            column: 10,
            span: 20140..20141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 707,
            column: 24,
            span: 20141..20155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 707,
            column: 25,
            span: 20155..20156,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 707,
            column: 32,
            span: 20156..20163,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 707,
            column: 33,
            span: 20163..20164,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 707,
            column: 36,
            span: 20165..20167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 707,
            column: 38,
            span: 20168..20169,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 707,
            column: 39,
            span: 20169..20170,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 707,
            column: 40,
            span: 20169..20171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 707,
            column: 41,
            span: 20171..20172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 709,
            column: 4,
            span: 20204..20205,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 709,
            column: 6,
            span: 20206..20207,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 709,
            column: 21,
            span: 20208..20222,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 709,
            column: 22,
            span: 20222..20223,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 709,
            column: 29,
            span: 20223..20230,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 709,
            column: 30,
            span: 20230..20231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 710,
            column: 17,
            span: 20234..20248,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 710,
            column: 18,
            span: 20248..20249,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 710,
            column: 24,
            span: 20249..20255,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 710,
            column: 25,
            span: 20255..20256,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 711,
            column: 6,
            span: 20259..20262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 711,
            column: 8,
            span: 20263..20264,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 711,
            column: 9,
            span: 20264..20265,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 711,
            column: 10,
            span: 20264..20266,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 711,
            column: 11,
            span: 20266..20267,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 711,
            column: 15,
            span: 20266..20271,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 711,
            column: 18,
            span: 20272..20274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 711,
            column: 20,
            span: 20275..20276,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 711,
            column: 21,
            span: 20276..20277,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 711,
            column: 32,
            span: 20277..20288,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 711,
            column: 33,
            span: 20288..20289,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 711,
            column: 34,
            span: 20288..20290,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 711,
            column: 35,
            span: 20290..20291,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 711,
            column: 0,
            span: 20292..20295,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 712,
            column: 9,
            span: 20298..20304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 712,
            column: 10,
            span: 20304..20305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 712,
            column: 24,
            span: 20305..20319,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 712,
            column: 25,
            span: 20319..20320,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 712,
            column: 32,
            span: 20320..20327,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 712,
            column: 33,
            span: 20327..20328,
        },
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        position: Position {
            line: 712,
            column: 35,
            span: 20329..20330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 712,
            column: 37,
            span: 20331..20332,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 712,
            column: 38,
            span: 20332..20333,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 712,
            column: 40,
            span: 20332..20335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 712,
            column: 41,
            span: 20335..20336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 713,
            column: 17,
            span: 20339..20353,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 713,
            column: 18,
            span: 20353..20354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 713,
            column: 19,
            span: 20354..20355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 714,
            column: 9,
            span: 20358..20364,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 714,
            column: 10,
            span: 20364..20365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 714,
            column: 24,
            span: 20365..20379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 714,
            column: 25,
            span: 20379..20380,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 714,
            column: 32,
            span: 20380..20387,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 714,
            column: 33,
            span: 20387..20388,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 714,
            column: 36,
            span: 20389..20391,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 714,
            column: 38,
            span: 20392..20393,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 714,
            column: 39,
            span: 20393..20394,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 714,
            column: 40,
            span: 20393..20395,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 714,
            column: 41,
            span: 20395..20396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 716,
            column: 17,
            span: 20425..20439,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 716,
            column: 18,
            span: 20439..20440,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 716,
            column: 19,
            span: 20440..20441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 717,
            column: 4,
            span: 20444..20445,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 717,
            column: 6,
            span: 20446..20447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 717,
            column: 21,
            span: 20448..20462,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 717,
            column: 22,
            span: 20462..20463,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 717,
            column: 29,
            span: 20463..20470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 717,
            column: 30,
            span: 20470..20471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 718,
            column: 17,
            span: 20474..20488,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 718,
            column: 18,
            span: 20488..20489,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 718,
            column: 24,
            span: 20489..20495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 718,
            column: 25,
            span: 20495..20496,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 719,
            column: 4,
            span: 20499..20500,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 719,
            column: 6,
            span: 20501..20502,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 719,
            column: 8,
            span: 20503..20504,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 719,
            column: 12,
            span: 20504..20508,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 719,
            column: 14,
            span: 20509..20510,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 719,
            column: 23,
            span: 20511..20519,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 719,
            column: 25,
            span: 20520..20521,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 719,
            column: 26,
            span: 20521..20522,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 719,
            column: 30,
            span: 20523..20526,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 719,
            column: 31,
            span: 20526..20527,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 720,
            column: 6,
            span: 20530..20533,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 720,
            column: 8,
            span: 20534..20535,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 720,
            column: 9,
            span: 20535..20536,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 720,
            column: 10,
            span: 20535..20537,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 720,
            column: 11,
            span: 20537..20538,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 720,
            column: 15,
            span: 20537..20542,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 720,
            column: 18,
            span: 20543..20545,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 720,
            column: 24,
            span: 20546..20551,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 720,
            column: 25,
            span: 20551..20552,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 720,
            column: 37,
            span: 20552..20564,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 720,
            column: 38,
            span: 20564..20565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 720,
            column: 39,
            span: 20565..20566,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 720,
            column: 40,
            span: 20566..20567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 720,
            column: 51,
            span: 20567..20578,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 720,
            column: 52,
            span: 20578..20579,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 720,
            column: 53,
            span: 20578..20580,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 720,
            column: 54,
            span: 20580..20581,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 720,
            column: 55,
            span: 20581..20582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 720,
            column: 57,
            span: 20583..20584,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 720,
            column: 58,
            span: 20584..20585,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 720,
            column: 0,
            span: 20586..20589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 721,
            column: 9,
            span: 20592..20598,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 721,
            column: 10,
            span: 20598..20599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 721,
            column: 24,
            span: 20599..20613,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 721,
            column: 25,
            span: 20613..20614,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 721,
            column: 32,
            span: 20614..20621,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 721,
            column: 33,
            span: 20621..20622,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 721,
            column: 36,
            span: 20623..20625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 721,
            column: 38,
            span: 20626..20627,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 721,
            column: 39,
            span: 20627..20628,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 721,
            column: 41,
            span: 20627..20630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 721,
            column: 42,
            span: 20630..20631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 722,
            column: 17,
            span: 20634..20648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 722,
            column: 18,
            span: 20648..20649,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 722,
            column: 19,
            span: 20649..20650,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 723,
            column: 9,
            span: 20711..20717,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 723,
            column: 10,
            span: 20717..20718,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 723,
            column: 24,
            span: 20718..20732,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 723,
            column: 25,
            span: 20732..20733,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 723,
            column: 32,
            span: 20733..20740,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 723,
            column: 33,
            span: 20740..20741,
        },
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        position: Position {
            line: 723,
            column: 36,
            span: 20742..20744,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 723,
            column: 38,
            span: 20745..20746,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 723,
            column: 39,
            span: 20746..20747,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 723,
            column: 41,
            span: 20746..20749,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 723,
            column: 42,
            span: 20749..20750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 724,
            column: 17,
            span: 20753..20767,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 724,
            column: 18,
            span: 20767..20768,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 724,
            column: 19,
            span: 20768..20769,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 725,
            column: 9,
            span: 20793..20799,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 725,
            column: 10,
            span: 20799..20800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 725,
            column: 24,
            span: 20800..20814,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 725,
            column: 25,
            span: 20814..20815,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 725,
            column: 32,
            span: 20815..20822,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 725,
            column: 33,
            span: 20822..20823,
        },
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        position: Position {
            line: 725,
            column: 36,
            span: 20824..20826,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 725,
            column: 38,
            span: 20827..20828,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 725,
            column: 39,
            span: 20828..20829,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 725,
            column: 40,
            span: 20828..20830,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 725,
            column: 41,
            span: 20830..20831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 726,
            column: 17,
            span: 20834..20848,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 726,
            column: 18,
            span: 20848..20849,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 726,
            column: 27,
            span: 20849..20858,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 726,
            column: 28,
            span: 20858..20859,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 727,
            column: 0,
            span: 20860..20863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 730,
            column: 15,
            span: 20866..20880,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 730,
            column: 16,
            span: 20880..20881,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"stop\"",
        ),
        position: Position {
            line: 730,
            column: 22,
            span: 20881..20887,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 730,
            column: 23,
            span: 20887..20888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 733,
            column: 2,
            span: 20926..20927,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 733,
            column: 4,
            span: 20928..20929,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 733,
            column: 6,
            span: 20930..20931,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 733,
            column: 7,
            span: 20931..20932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 733,
            column: 18,
            span: 20932..20943,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 733,
            column: 19,
            span: 20943..20944,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 733,
            column: 20,
            span: 20943..20945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 733,
            column: 21,
            span: 20945..20946,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 733,
            column: 22,
            span: 20946..20947,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 733,
            column: 28,
            span: 20948..20953,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 733,
            column: 29,
            span: 20953..20954,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 733,
            column: 41,
            span: 20954..20966,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 733,
            column: 42,
            span: 20966..20967,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 733,
            column: 43,
            span: 20967..20968,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 733,
            column: 44,
            span: 20968..20969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 733,
            column: 47,
            span: 20970..20972,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 733,
            column: 48,
            span: 20972..20973,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 733,
            column: 49,
            span: 20973..20974,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 733,
            column: 52,
            span: 20975..20977,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 733,
            column: 54,
            span: 20978..20979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 733,
            column: 56,
            span: 20980..20981,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 733,
            column: 57,
            span: 20981..20982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 733,
            column: 65,
            span: 20982..20990,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 733,
            column: 66,
            span: 20990..20991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 733,
            column: 67,
            span: 20991..20992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 733,
            column: 68,
            span: 20992..20993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 734,
            column: 2,
            span: 20994..20995,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 734,
            column: 4,
            span: 20996..20997,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 734,
            column: 6,
            span: 20998..20999,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 734,
            column: 7,
            span: 20999..21000,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 734,
            column: 18,
            span: 21000..21011,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 734,
            column: 19,
            span: 21011..21012,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 734,
            column: 20,
            span: 21011..21013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 734,
            column: 21,
            span: 21013..21014,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 734,
            column: 22,
            span: 21014..21015,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 734,
            column: 28,
            span: 21016..21021,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 734,
            column: 29,
            span: 21021..21022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 734,
            column: 41,
            span: 21022..21034,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 734,
            column: 42,
            span: 21034..21035,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 734,
            column: 43,
            span: 21035..21036,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 734,
            column: 44,
            span: 21036..21037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 734,
            column: 47,
            span: 21038..21040,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 734,
            column: 48,
            span: 21040..21041,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 734,
            column: 49,
            span: 21041..21042,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nb",
        ),
        position: Position {
            line: 734,
            column: 52,
            span: 21043..21045,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 734,
            column: 54,
            span: 21046..21047,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 734,
            column: 56,
            span: 21048..21049,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 734,
            column: 57,
            span: 21049..21050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 734,
            column: 65,
            span: 21050..21058,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 734,
            column: 66,
            span: 21058..21059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 734,
            column: 67,
            span: 21059..21060,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 734,
            column: 68,
            span: 21060..21061,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 735,
            column: 2,
            span: 21062..21063,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 735,
            column: 4,
            span: 21064..21065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 735,
            column: 6,
            span: 21066..21067,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 735,
            column: 7,
            span: 21067..21068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 735,
            column: 18,
            span: 21068..21079,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 735,
            column: 19,
            span: 21079..21080,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 735,
            column: 20,
            span: 21079..21081,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 735,
            column: 21,
            span: 21081..21082,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 735,
            column: 22,
            span: 21082..21083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 735,
            column: 28,
            span: 21084..21089,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 735,
            column: 29,
            span: 21089..21090,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 735,
            column: 41,
            span: 21090..21102,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 735,
            column: 42,
            span: 21102..21103,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 735,
            column: 43,
            span: 21103..21104,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 735,
            column: 44,
            span: 21104..21105,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 735,
            column: 47,
            span: 21106..21108,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 735,
            column: 48,
            span: 21108..21109,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 735,
            column: 49,
            span: 21109..21110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nc",
        ),
        position: Position {
            line: 735,
            column: 52,
            span: 21111..21113,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 735,
            column: 54,
            span: 21114..21115,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 735,
            column: 56,
            span: 21116..21117,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 735,
            column: 57,
            span: 21117..21118,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 735,
            column: 65,
            span: 21118..21126,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 735,
            column: 66,
            span: 21126..21127,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 735,
            column: 67,
            span: 21127..21128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 735,
            column: 68,
            span: 21128..21129,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 738,
            column: 2,
            span: 21169..21170,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 738,
            column: 4,
            span: 21171..21172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 738,
            column: 6,
            span: 21173..21174,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 738,
            column: 7,
            span: 21174..21175,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 738,
            column: 18,
            span: 21175..21186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 738,
            column: 19,
            span: 21186..21187,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 738,
            column: 20,
            span: 21186..21188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 738,
            column: 21,
            span: 21188..21189,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 739,
            column: 2,
            span: 21190..21191,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 739,
            column: 4,
            span: 21192..21193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 739,
            column: 6,
            span: 21194..21195,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 739,
            column: 7,
            span: 21195..21196,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 739,
            column: 18,
            span: 21196..21207,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 739,
            column: 19,
            span: 21207..21208,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 739,
            column: 20,
            span: 21207..21209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 739,
            column: 21,
            span: 21209..21210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 741,
            column: 9,
            span: 21212..21220,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 741,
            column: 10,
            span: 21220..21221,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FILE%* expected, got userdata\"",
        ),
        position: Position {
            line: 741,
            column: 41,
            span: 21221..21252,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 741,
            column: 42,
            span: 21252..21253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 741,
            column: 45,
            span: 21254..21256,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 741,
            column: 46,
            span: 21256..21257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 741,
            column: 51,
            span: 21257..21262,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 741,
            column: 52,
            span: 21262..21263,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 741,
            column: 54,
            span: 21264..21265,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 741,
            column: 55,
            span: 21265..21266,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 742,
            column: 9,
            span: 21267..21275,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 742,
            column: 10,
            span: 21275..21276,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"FILE%* expected, got userdata\"",
        ),
        position: Position {
            line: 742,
            column: 41,
            span: 21276..21307,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 742,
            column: 42,
            span: 21307..21308,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 742,
            column: 45,
            span: 21309..21311,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 742,
            column: 46,
            span: 21311..21312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "input",
        ),
        position: Position {
            line: 742,
            column: 51,
            span: 21312..21317,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 742,
            column: 52,
            span: 21317..21318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 742,
            column: 54,
            span: 21319..21320,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 742,
            column: 55,
            span: 21320..21321,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 744,
            column: 7,
            span: 21323..21329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 744,
            column: 8,
            span: 21329..21330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 744,
            column: 13,
            span: 21330..21335,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 744,
            column: 14,
            span: 21335..21336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 744,
            column: 26,
            span: 21336..21348,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 744,
            column: 27,
            span: 21348..21349,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 744,
            column: 28,
            span: 21349..21350,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 744,
            column: 29,
            span: 21350..21351,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 744,
            column: 32,
            span: 21352..21354,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 744,
            column: 36,
            span: 21355..21358,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 744,
            column: 40,
            span: 21359..21362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 744,
            column: 46,
            span: 21363..21368,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 744,
            column: 47,
            span: 21368..21369,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 744,
            column: 59,
            span: 21369..21381,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 744,
            column: 60,
            span: 21381..21382,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 744,
            column: 61,
            span: 21382..21383,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 744,
            column: 62,
            span: 21383..21384,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 744,
            column: 65,
            span: 21385..21387,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 744,
            column: 69,
            span: 21388..21391,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 744,
            column: 70,
            span: 21391..21392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 746,
            column: 2,
            span: 21394..21395,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 746,
            column: 3,
            span: 21395..21396,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 746,
            column: 4,
            span: 21396..21397,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 746,
            column: 5,
            span: 21397..21398,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 746,
            column: 8,
            span: 21398..21401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 746,
            column: 9,
            span: 21401..21402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 746,
            column: 10,
            span: 21402..21403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 746,
            column: 11,
            span: 21403..21404,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 746,
            column: 12,
            span: 21404..21405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 747,
            column: 2,
            span: 21406..21407,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 747,
            column: 3,
            span: 21407..21408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 747,
            column: 4,
            span: 21408..21409,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 747,
            column: 5,
            span: 21409..21410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 747,
            column: 8,
            span: 21410..21413,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 747,
            column: 9,
            span: 21413..21414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 747,
            column: 10,
            span: 21414..21415,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 747,
            column: 11,
            span: 21415..21416,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 747,
            column: 12,
            span: 21416..21417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 748,
            column: 2,
            span: 21418..21419,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 748,
            column: 3,
            span: 21419..21420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 748,
            column: 4,
            span: 21420..21421,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 748,
            column: 5,
            span: 21421..21422,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ref",
        ),
        position: Position {
            line: 748,
            column: 8,
            span: 21422..21425,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 748,
            column: 9,
            span: 21425..21426,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 748,
            column: 10,
            span: 21426..21427,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 748,
            column: 11,
            span: 21427..21428,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 748,
            column: 12,
            span: 21428..21429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 749,
            column: 2,
            span: 21430..21431,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 749,
            column: 4,
            span: 21432..21433,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 749,
            column: 6,
            span: 21434..21435,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 749,
            column: 7,
            span: 21435..21436,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 749,
            column: 8,
            span: 21436..21437,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 749,
            column: 14,
            span: 21437..21443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 749,
            column: 15,
            span: 21443..21444,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 749,
            column: 16,
            span: 21444..21445,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 749,
            column: 17,
            span: 21445..21446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 749,
            column: 18,
            span: 21446..21447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 749,
            column: 20,
            span: 21448..21449,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 749,
            column: 21,
            span: 21449..21450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 749,
            column: 27,
            span: 21450..21456,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 749,
            column: 28,
            span: 21456..21457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 749,
            column: 29,
            span: 21457..21458,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 749,
            column: 30,
            span: 21458..21459,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 749,
            column: 31,
            span: 21459..21460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 749,
            column: 33,
            span: 21461..21462,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 749,
            column: 34,
            span: 21462..21463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 749,
            column: 40,
            span: 21463..21469,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 749,
            column: 41,
            span: 21469..21470,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 749,
            column: 42,
            span: 21470..21471,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 749,
            column: 43,
            span: 21471..21472,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 749,
            column: 44,
            span: 21472..21473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 750,
            column: 7,
            span: 21474..21480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 750,
            column: 8,
            span: 21480..21481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 750,
            column: 9,
            span: 21481..21482,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 750,
            column: 10,
            span: 21482..21483,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 750,
            column: 11,
            span: 21482..21484,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 750,
            column: 12,
            span: 21484..21485,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 750,
            column: 15,
            span: 21486..21488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 750,
            column: 17,
            span: 21489..21490,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 750,
            column: 21,
            span: 21491..21494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 750,
            column: 23,
            span: 21495..21496,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 750,
            column: 24,
            span: 21496..21497,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 750,
            column: 25,
            span: 21496..21498,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 750,
            column: 26,
            span: 21498..21499,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 750,
            column: 29,
            span: 21500..21502,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 750,
            column: 31,
            span: 21503..21504,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 750,
            column: 35,
            span: 21505..21508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 750,
            column: 37,
            span: 21509..21510,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 750,
            column: 38,
            span: 21510..21511,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 750,
            column: 39,
            span: 21510..21512,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 750,
            column: 40,
            span: 21512..21513,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 750,
            column: 43,
            span: 21514..21516,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 750,
            column: 45,
            span: 21517..21518,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 750,
            column: 46,
            span: 21518..21519,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 752,
            column: 2,
            span: 21521..21522,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 752,
            column: 3,
            span: 21522..21523,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 752,
            column: 6,
            span: 21523..21526,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 752,
            column: 7,
            span: 21526..21527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 752,
            column: 9,
            span: 21528..21529,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 752,
            column: 10,
            span: 21529..21530,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 752,
            column: 13,
            span: 21530..21533,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 752,
            column: 14,
            span: 21533..21534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 752,
            column: 16,
            span: 21535..21536,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 752,
            column: 17,
            span: 21536..21537,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 752,
            column: 20,
            span: 21537..21540,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 752,
            column: 21,
            span: 21540..21541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 753,
            column: 2,
            span: 21542..21543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 753,
            column: 3,
            span: 21543..21544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 753,
            column: 8,
            span: 21544..21549,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 753,
            column: 9,
            span: 21549..21550,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 753,
            column: 10,
            span: 21550..21551,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 753,
            column: 11,
            span: 21551..21552,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 753,
            column: 12,
            span: 21552..21553,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 753,
            column: 14,
            span: 21554..21555,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 753,
            column: 15,
            span: 21555..21556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 753,
            column: 20,
            span: 21556..21561,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 753,
            column: 21,
            span: 21561..21562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 753,
            column: 22,
            span: 21562..21563,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 753,
            column: 23,
            span: 21563..21564,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 755,
            column: 15,
            span: 21566..21580,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 755,
            column: 16,
            span: 21580..21581,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 755,
            column: 17,
            span: 21581..21582,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 758,
            column: 7,
            span: 21632..21638,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 758,
            column: 8,
            span: 21638..21639,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 758,
            column: 9,
            span: 21639..21640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 758,
            column: 11,
            span: 21640..21642,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 758,
            column: 14,
            span: 21643..21645,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 758,
            column: 16,
            span: 21645..21647,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 758,
            column: 20,
            span: 21648..21651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 758,
            column: 23,
            span: 21652..21654,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 758,
            column: 24,
            span: 21654..21655,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 758,
            column: 25,
            span: 21654..21656,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 758,
            column: 26,
            span: 21656..21657,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 758,
            column: 29,
            span: 21658..21660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nc",
        ),
        position: Position {
            line: 758,
            column: 32,
            span: 21661..21663,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 758,
            column: 33,
            span: 21663..21664,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 760,
            column: 2,
            span: 21666..21667,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 760,
            column: 4,
            span: 21668..21669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 760,
            column: 6,
            span: 21670..21671,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 760,
            column: 7,
            span: 21671..21672,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getref",
        ),
        position: Position {
            line: 760,
            column: 13,
            span: 21672..21678,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 760,
            column: 14,
            span: 21678..21679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 760,
            column: 15,
            span: 21679..21680,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 760,
            column: 16,
            span: 21680..21681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 761,
            column: 7,
            span: 21682..21688,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 761,
            column: 8,
            span: 21688..21689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 761,
            column: 12,
            span: 21689..21693,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 761,
            column: 13,
            span: 21693..21694,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 761,
            column: 14,
            span: 21694..21695,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 761,
            column: 15,
            span: 21695..21696,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 761,
            column: 18,
            span: 21697..21699,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'userdata'",
        ),
        position: Position {
            line: 761,
            column: 29,
            span: 21700..21710,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 761,
            column: 33,
            span: 21711..21714,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 761,
            column: 39,
            span: 21715..21720,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 761,
            column: 40,
            span: 21720..21721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 761,
            column: 52,
            span: 21721..21733,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 761,
            column: 53,
            span: 21733..21734,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 761,
            column: 54,
            span: 21734..21735,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 761,
            column: 55,
            span: 21735..21736,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 761,
            column: 58,
            span: 21737..21739,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 761,
            column: 61,
            span: 21740..21742,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 761,
            column: 62,
            span: 21742..21743,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 762,
            column: 2,
            span: 21744..21745,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 762,
            column: 4,
            span: 21746..21747,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 762,
            column: 0,
            span: 21747..21750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 763,
            column: 3,
            span: 21751..21753,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 763,
            column: 4,
            span: 21753..21754,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 763,
            column: 5,
            span: 21754..21755,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 763,
            column: 7,
            span: 21756..21757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 763,
            column: 9,
            span: 21758..21759,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        position: Position {
            line: 764,
            column: 3,
            span: 21777..21779,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 764,
            column: 4,
            span: 21779..21780,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 764,
            column: 7,
            span: 21780..21783,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 765,
            column: 2,
            span: 21806..21807,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 765,
            column: 4,
            span: 21808..21809,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 765,
            column: 0,
            span: 21810..21813,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 766,
            column: 2,
            span: 21814..21815,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 766,
            column: 4,
            span: 21816..21817,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 766,
            column: 0,
            span: 21818..21821,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 767,
            column: 2,
            span: 21822..21823,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 767,
            column: 3,
            span: 21823..21824,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 767,
            column: 8,
            span: 21824..21829,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 767,
            column: 9,
            span: 21829..21830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 767,
            column: 10,
            span: 21830..21831,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 767,
            column: 11,
            span: 21831..21832,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 767,
            column: 12,
            span: 21832..21833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 768,
            column: 3,
            span: 21834..21836,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 768,
            column: 5,
            span: 21837..21838,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 768,
            column: 7,
            span: 21839..21840,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 768,
            column: 8,
            span: 21840..21841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 768,
            column: 19,
            span: 21841..21852,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 768,
            column: 20,
            span: 21852..21853,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 768,
            column: 21,
            span: 21852..21854,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 768,
            column: 22,
            span: 21854..21855,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 769,
            column: 6,
            span: 21856..21861,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 769,
            column: 7,
            span: 21861..21862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 769,
            column: 19,
            span: 21862..21874,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 769,
            column: 20,
            span: 21874..21875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 769,
            column: 22,
            span: 21875..21877,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 769,
            column: 23,
            span: 21877..21878,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 769,
            column: 25,
            span: 21879..21880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 769,
            column: 29,
            span: 21880..21884,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 769,
            column: 30,
            span: 21884..21885,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 769,
            column: 31,
            span: 21885..21886,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 769,
            column: 32,
            span: 21886..21887,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 769,
            column: 33,
            span: 21887..21888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 770,
            column: 3,
            span: 21889..21891,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 770,
            column: 5,
            span: 21892..21893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 770,
            column: 7,
            span: 21894..21895,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 770,
            column: 8,
            span: 21895..21896,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 770,
            column: 16,
            span: 21896..21904,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 770,
            column: 17,
            span: 21904..21905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 770,
            column: 19,
            span: 21905..21907,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 770,
            column: 20,
            span: 21907..21908,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 771,
            column: 15,
            span: 21909..21923,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 771,
            column: 16,
            span: 21923..21924,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 771,
            column: 17,
            span: 21924..21925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 772,
            column: 7,
            span: 21926..21932,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 772,
            column: 8,
            span: 21932..21933,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 772,
            column: 9,
            span: 21933..21934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 772,
            column: 11,
            span: 21934..21936,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 772,
            column: 14,
            span: 21937..21939,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 772,
            column: 16,
            span: 21939..21941,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 772,
            column: 17,
            span: 21941..21942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 774,
            column: 7,
            span: 21972..21978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 774,
            column: 8,
            span: 21978..21979,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 774,
            column: 10,
            span: 21979..21981,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 774,
            column: 11,
            span: 21981..21982,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 774,
            column: 12,
            span: 21981..21983,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 774,
            column: 13,
            span: 21983..21984,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 774,
            column: 16,
            span: 21985..21987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n5",
        ),
        position: Position {
            line: 774,
            column: 19,
            span: 21988..21990,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 774,
            column: 23,
            span: 21991..21994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 774,
            column: 26,
            span: 21995..21997,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 774,
            column: 27,
            span: 21997..21998,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 774,
            column: 28,
            span: 21997..21999,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 774,
            column: 29,
            span: 21999..22000,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 774,
            column: 32,
            span: 22001..22003,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "nb",
        ),
        position: Position {
            line: 774,
            column: 35,
            span: 22004..22006,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 774,
            column: 39,
            span: 22007..22010,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 774,
            column: 42,
            span: 22011..22013,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 774,
            column: 43,
            span: 22013..22014,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 774,
            column: 44,
            span: 22013..22015,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 774,
            column: 45,
            span: 22015..22016,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 774,
            column: 48,
            span: 22017..22019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 774,
            column: 51,
            span: 22020..22022,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 774,
            column: 52,
            span: 22022..22023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 776,
            column: 15,
            span: 22025..22039,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"restart\"",
        ),
        position: Position {
            line: 776,
            column: 24,
            span: 22039..22048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 779,
            column: 2,
            span: 22051..22052,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 779,
            column: 3,
            span: 22052..22053,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 779,
            column: 6,
            span: 22054..22056,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 779,
            column: 8,
            span: 22057..22058,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 779,
            column: 10,
            span: 22059..22060,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 779,
            column: 11,
            span: 22060..22061,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 779,
            column: 12,
            span: 22061..22062,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 779,
            column: 14,
            span: 22063..22064,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 779,
            column: 15,
            span: 22064..22065,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 780,
            column: 4,
            span: 22066..22069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 780,
            column: 6,
            span: 22070..22071,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 780,
            column: 7,
            span: 22071..22072,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 780,
            column: 9,
            span: 22071..22074,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 780,
            column: 10,
            span: 22074..22075,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 780,
            column: 11,
            span: 22074..22076,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 780,
            column: 12,
            span: 22076..22077,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 780,
            column: 13,
            span: 22077..22078,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 780,
            column: 14,
            span: 22077..22079,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 780,
            column: 0,
            span: 22080..22082,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 781,
            column: 4,
            span: 22085..22086,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 781,
            column: 5,
            span: 22086..22087,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 781,
            column: 6,
            span: 22087..22088,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 781,
            column: 7,
            span: 22088..22089,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 781,
            column: 9,
            span: 22090..22091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 781,
            column: 11,
            span: 22092..22093,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 781,
            column: 12,
            span: 22093..22094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 781,
            column: 23,
            span: 22094..22105,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 781,
            column: 24,
            span: 22105..22106,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 781,
            column: 25,
            span: 22105..22107,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 781,
            column: 26,
            span: 22107..22108,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 782,
            column: 8,
            span: 22111..22116,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 782,
            column: 9,
            span: 22116..22117,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 782,
            column: 21,
            span: 22117..22129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 782,
            column: 22,
            span: 22129..22130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 782,
            column: 23,
            span: 22130..22131,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 782,
            column: 24,
            span: 22131..22132,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 782,
            column: 25,
            span: 22132..22133,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 782,
            column: 26,
            span: 22133..22134,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 782,
            column: 27,
            span: 22134..22135,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 782,
            column: 29,
            span: 22136..22137,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 782,
            column: 33,
            span: 22137..22141,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 782,
            column: 34,
            span: 22141..22142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 782,
            column: 35,
            span: 22142..22143,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 782,
            column: 36,
            span: 22143..22144,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 782,
            column: 37,
            span: 22144..22145,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 783,
            column: 5,
            span: 22148..22150,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 783,
            column: 6,
            span: 22150..22151,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 783,
            column: 7,
            span: 22151..22152,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 783,
            column: 8,
            span: 22152..22153,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 783,
            column: 10,
            span: 22154..22155,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 783,
            column: 12,
            span: 22156..22157,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 783,
            column: 13,
            span: 22157..22158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 783,
            column: 21,
            span: 22158..22166,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 783,
            column: 22,
            span: 22166..22167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 783,
            column: 23,
            span: 22167..22168,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 783,
            column: 24,
            span: 22168..22169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 783,
            column: 25,
            span: 22169..22170,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 783,
            column: 26,
            span: 22170..22171,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 783,
            column: 27,
            span: 22171..22172,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 784,
            column: 0,
            span: 22173..22176,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 785,
            column: 3,
            span: 22177..22179,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 785,
            column: 5,
            span: 22180..22181,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 785,
            column: 7,
            span: 22182..22183,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 785,
            column: 8,
            span: 22183..22184,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 786,
            column: 2,
            span: 22185..22186,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 786,
            column: 4,
            span: 22187..22188,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 786,
            column: 8,
            span: 22189..22192,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 786,
            column: 9,
            span: 22192..22193,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 786,
            column: 24,
            span: 22194..22208,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 786,
            column: 25,
            span: 22208..22209,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 786,
            column: 26,
            span: 22209..22210,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 787,
            column: 7,
            span: 22211..22217,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 787,
            column: 8,
            span: 22217..22218,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 787,
            column: 9,
            span: 22218..22219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 787,
            column: 11,
            span: 22219..22221,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 787,
            column: 14,
            span: 22222..22224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 787,
            column: 17,
            span: 22224..22227,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 787,
            column: 18,
            span: 22227..22228,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 788,
            column: 4,
            span: 22229..22232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 788,
            column: 6,
            span: 22233..22234,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 788,
            column: 7,
            span: 22234..22235,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 788,
            column: 8,
            span: 22234..22236,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 788,
            column: 9,
            span: 22236..22237,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 788,
            column: 11,
            span: 22236..22239,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 788,
            column: 14,
            span: 22240..22242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 788,
            column: 21,
            span: 22243..22249,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 788,
            column: 22,
            span: 22249..22250,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 788,
            column: 24,
            span: 22250..22252,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 788,
            column: 25,
            span: 22252..22253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 788,
            column: 26,
            span: 22253..22254,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 788,
            column: 27,
            span: 22254..22255,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 788,
            column: 30,
            span: 22256..22258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 788,
            column: 33,
            span: 22259..22261,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 788,
            column: 34,
            span: 22261..22262,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 788,
            column: 35,
            span: 22262..22263,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 788,
            column: 36,
            span: 22263..22264,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 788,
            column: 37,
            span: 22264..22265,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 788,
            column: 0,
            span: 22266..22269,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "na",
        ),
        position: Position {
            line: 789,
            column: 3,
            span: 22270..22272,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 789,
            column: 5,
            span: 22273..22274,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 789,
            column: 0,
            span: 22275..22278,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 792,
            column: 4,
            span: 22281..22284,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 792,
            column: 6,
            span: 22285..22286,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 792,
            column: 7,
            span: 22286..22287,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 792,
            column: 8,
            span: 22286..22288,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 792,
            column: 9,
            span: 22288..22289,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Lim",
        ),
        position: Position {
            line: 792,
            column: 12,
            span: 22289..22292,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 792,
            column: 13,
            span: 22292..22293,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 792,
            column: 14,
            span: 22292..22294,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 792,
            column: 17,
            span: 22295..22297,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 793,
            column: 4,
            span: 22327..22328,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 793,
            column: 5,
            span: 22328..22329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unref",
        ),
        position: Position {
            line: 793,
            column: 10,
            span: 22329..22334,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 793,
            column: 11,
            span: 22334..22335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Arr",
        ),
        position: Position {
            line: 793,
            column: 14,
            span: 22335..22338,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 793,
            column: 15,
            span: 22338..22339,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 793,
            column: 16,
            span: 22339..22340,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 793,
            column: 17,
            span: 22340..22341,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 793,
            column: 18,
            span: 22341..22342,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 794,
            column: 0,
            span: 22343..22346,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 796,
            column: 2,
            span: 22348..22349,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 796,
            column: 4,
            span: 22350..22351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 796,
            column: 6,
            span: 22352..22353,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 796,
            column: 7,
            span: 22353..22354,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 796,
            column: 18,
            span: 22354..22365,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 796,
            column: 19,
            span: 22365..22366,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "41",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 796,
            column: 21,
            span: 22365..22368,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 796,
            column: 22,
            span: 22368..22369,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 796,
            column: 23,
            span: 22369..22370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 796,
            column: 29,
            span: 22371..22376,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 796,
            column: 30,
            span: 22376..22377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 796,
            column: 42,
            span: 22377..22389,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 796,
            column: 43,
            span: 22389..22390,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 796,
            column: 44,
            span: 22390..22391,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 796,
            column: 45,
            span: 22391..22392,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 796,
            column: 47,
            span: 22393..22394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 796,
            column: 51,
            span: 22394..22398,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 796,
            column: 52,
            span: 22398..22399,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "F",
        ),
        position: Position {
            line: 796,
            column: 53,
            span: 22399..22400,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 796,
            column: 54,
            span: 22400..22401,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 796,
            column: 55,
            span: 22401..22402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 797,
            column: 7,
            span: 22403..22409,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 797,
            column: 8,
            span: 22409..22410,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 797,
            column: 9,
            span: 22410..22411,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 797,
            column: 10,
            span: 22411..22412,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 797,
            column: 15,
            span: 22412..22417,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 797,
            column: 16,
            span: 22417..22418,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"objsize 2; return 1\"",
        ),
        position: Position {
            line: 797,
            column: 37,
            span: 22418..22439,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 797,
            column: 38,
            span: 22439..22440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 797,
            column: 40,
            span: 22441..22442,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 797,
            column: 41,
            span: 22442..22443,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 797,
            column: 44,
            span: 22444..22446,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "41",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 797,
            column: 47,
            span: 22446..22449,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 797,
            column: 48,
            span: 22449..22450,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 798,
            column: 3,
            span: 22451..22453,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 798,
            column: 5,
            span: 22454..22455,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 798,
            column: 7,
            span: 22456..22457,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 798,
            column: 8,
            span: 22457..22458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 799,
            column: 2,
            span: 22459..22460,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 799,
            column: 4,
            span: 22461..22462,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 799,
            column: 6,
            span: 22463..22464,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 799,
            column: 7,
            span: 22464..22465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 799,
            column: 8,
            span: 22465..22466,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 799,
            column: 9,
            span: 22466..22467,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 799,
            column: 11,
            span: 22468..22469,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 799,
            column: 13,
            span: 22469..22471,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 799,
            column: 14,
            span: 22471..22472,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 800,
            column: 2,
            span: 22473..22474,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 800,
            column: 4,
            span: 22475..22476,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 800,
            column: 6,
            span: 22477..22478,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 800,
            column: 7,
            span: 22478..22479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 800,
            column: 15,
            span: 22479..22487,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 800,
            column: 16,
            span: 22487..22488,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 800,
            column: 17,
            span: 22488..22489,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 800,
            column: 18,
            span: 22489..22490,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 801,
            column: 15,
            span: 22491..22505,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 801,
            column: 16,
            span: 22505..22506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 801,
            column: 17,
            span: 22506..22507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 803,
            column: 7,
            span: 22559..22565,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 803,
            column: 8,
            span: 22565..22566,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 803,
            column: 9,
            span: 22566..22567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 803,
            column: 11,
            span: 22567..22569,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 803,
            column: 14,
            span: 22570..22572,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 803,
            column: 16,
            span: 22572..22574,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 803,
            column: 17,
            span: 22574..22575,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 804,
            column: 4,
            span: 22576..22579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 804,
            column: 6,
            span: 22580..22581,
        },
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        position: Position {
            line: 804,
            column: 9,
            span: 22582..22584,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        position: Position {
            line: 804,
            column: 15,
            span: 22585..22590,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 804,
            column: 16,
            span: 22590..22591,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 804,
            column: 17,
            span: 22591..22592,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 804,
            column: 18,
            span: 22592..22593,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 804,
            column: 21,
            span: 22594..22596,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 804,
            column: 23,
            span: 22597..22598,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 804,
            column: 24,
            span: 22598..22599,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 804,
            column: 25,
            span: 22599..22600,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 804,
            column: 26,
            span: 22600..22601,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 804,
            column: 28,
            span: 22602..22603,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 804,
            column: 32,
            span: 22604..22607,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 804,
            column: 0,
            span: 22608..22611,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 805,
            column: 15,
            span: 22612..22626,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 805,
            column: 16,
            span: 22626..22627,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 805,
            column: 17,
            span: 22627..22628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 806,
            column: 7,
            span: 22629..22635,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 806,
            column: 8,
            span: 22635..22636,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 806,
            column: 9,
            span: 22636..22637,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 806,
            column: 11,
            span: 22637..22639,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 806,
            column: 14,
            span: 22640..22642,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 806,
            column: 16,
            span: 22642..22644,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 806,
            column: 20,
            span: 22645..22648,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cl",
        ),
        position: Position {
            line: 806,
            column: 23,
            span: 22649..22651,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 806,
            column: 24,
            span: 22651..22652,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 806,
            column: 25,
            span: 22651..22653,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 806,
            column: 26,
            span: 22653..22654,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 806,
            column: 29,
            span: 22655..22657,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 806,
            column: 31,
            span: 22658..22659,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 806,
            column: 32,
            span: 22659..22660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 809,
            column: 7,
            span: 22714..22720,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 809,
            column: 8,
            span: 22720..22721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 809,
            column: 9,
            span: 22721..22722,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 809,
            column: 10,
            span: 22722..22723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 809,
            column: 15,
            span: 22723..22728,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 809,
            column: 16,
            span: 22728..22729,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 4; return 1\"",
        ),
        position: Position {
            line: 809,
            column: 42,
            span: 22729..22755,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 809,
            column: 43,
            span: 22755..22756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 809,
            column: 49,
            span: 22757..22762,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 809,
            column: 50,
            span: 22762..22763,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 809,
            column: 52,
            span: 22763..22765,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 809,
            column: 53,
            span: 22765..22766,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 809,
            column: 59,
            span: 22767..22772,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 809,
            column: 60,
            span: 22772..22773,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 809,
            column: 63,
            span: 22773..22776,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 809,
            column: 64,
            span: 22776..22777,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 809,
            column: 65,
            span: 22777..22778,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 810,
            column: 7,
            span: 22779..22785,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 810,
            column: 8,
            span: 22785..22786,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 810,
            column: 9,
            span: 22786..22787,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 810,
            column: 10,
            span: 22787..22788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 810,
            column: 15,
            span: 22788..22793,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 810,
            column: 16,
            span: 22793..22794,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 3 2; return 1\"",
        ),
        position: Position {
            line: 810,
            column: 42,
            span: 22794..22820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 810,
            column: 43,
            span: 22820..22821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 810,
            column: 49,
            span: 22822..22827,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 810,
            column: 50,
            span: 22827..22828,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 810,
            column: 56,
            span: 22829..22834,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 810,
            column: 57,
            span: 22834..22835,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 810,
            column: 58,
            span: 22835..22836,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 811,
            column: 7,
            span: 22837..22843,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 811,
            column: 8,
            span: 22843..22844,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 811,
            column: 9,
            span: 22844..22845,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 811,
            column: 10,
            span: 22845..22846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 811,
            column: 15,
            span: 22846..22851,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 811,
            column: 16,
            span: 22851..22852,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 811,
            column: 42,
            span: 22852..22878,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 811,
            column: 43,
            span: 22878..22879,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 811,
            column: 47,
            span: 22880..22883,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 811,
            column: 48,
            span: 22883..22884,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 811,
            column: 52,
            span: 22885..22888,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 811,
            column: 53,
            span: 22888..22889,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 811,
            column: 54,
            span: 22889..22890,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 812,
            column: 7,
            span: 22891..22897,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 812,
            column: 8,
            span: 22897..22898,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 812,
            column: 11,
            span: 22898..22901,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 812,
            column: 13,
            span: 22902..22903,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 812,
            column: 14,
            span: 22903..22904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 812,
            column: 19,
            span: 22904..22909,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 812,
            column: 20,
            span: 22909..22910,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 812,
            column: 46,
            span: 22910..22936,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 812,
            column: 47,
            span: 22936..22937,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 812,
            column: 49,
            span: 22938..22939,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 812,
            column: 50,
            span: 22939..22940,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 812,
            column: 51,
            span: 22940..22941,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 812,
            column: 53,
            span: 22942..22943,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 812,
            column: 54,
            span: 22943..22944,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 812,
            column: 55,
            span: 22944..22945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 812,
            column: 56,
            span: 22945..22946,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 813,
            column: 7,
            span: 22947..22953,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 813,
            column: 8,
            span: 22953..22954,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 813,
            column: 11,
            span: 22954..22957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 813,
            column: 13,
            span: 22958..22959,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 813,
            column: 14,
            span: 22959..22960,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 813,
            column: 19,
            span: 22960..22965,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 813,
            column: 20,
            span: 22965..22966,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 813,
            column: 46,
            span: 22966..22992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 813,
            column: 47,
            span: 22992..22993,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 813,
            column: 48,
            span: 22993..22994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 814,
            column: 7,
            span: 22995..23001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 814,
            column: 8,
            span: 23001..23002,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 814,
            column: 11,
            span: 23002..23005,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 814,
            column: 13,
            span: 23006..23007,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 814,
            column: 14,
            span: 23007..23008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 814,
            column: 19,
            span: 23008..23013,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 814,
            column: 20,
            span: 23013..23014,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 814,
            column: 46,
            span: 23014..23040,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 814,
            column: 47,
            span: 23040..23041,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 814,
            column: 49,
            span: 23041..23043,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 814,
            column: 50,
            span: 23043..23044,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 814,
            column: 51,
            span: 23044..23045,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 817,
            column: 0,
            span: 23083..23085,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 818,
            column: 8,
            span: 23088..23093,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 818,
            column: 12,
            span: 23094..23097,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 818,
            column: 14,
            span: 23098..23099,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 818,
            column: 16,
            span: 23100..23101,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 818,
            column: 17,
            span: 23101..23102,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 819,
            column: 8,
            span: 23105..23110,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 819,
            column: 10,
            span: 23111..23112,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 819,
            column: 12,
            span: 23113..23114,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 819,
            column: 14,
            span: 23115..23116,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        position: Position {
            line: 819,
            column: 18,
            span: 23116..23120,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 819,
            column: 20,
            span: 23121..23122,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 819,
            column: 29,
            span: 23123..23131,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 819,
            column: 31,
            span: 23132..23133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 819,
            column: 32,
            span: 23133..23134,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 819,
            column: 33,
            span: 23134..23135,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 819,
            column: 34,
            span: 23135..23136,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 819,
            column: 35,
            span: 23136..23137,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 819,
            column: 42,
            span: 23138..23144,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 819,
            column: 46,
            span: 23145..23148,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 819,
            column: 47,
            span: 23148..23149,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 819,
            column: 48,
            span: 23149..23150,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 819,
            column: 49,
            span: 23150..23151,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 819,
            column: 52,
            span: 23152..23154,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 819,
            column: 56,
            span: 23155..23158,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 819,
            column: 57,
            span: 23158..23159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 819,
            column: 58,
            span: 23159..23160,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 819,
            column: 59,
            span: 23160..23161,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 819,
            column: 63,
            span: 23162..23165,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 819,
            column: 64,
            span: 23165..23166,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 820,
            column: 8,
            span: 23169..23174,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 820,
            column: 17,
            span: 23175..23183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 820,
            column: 19,
            span: 23184..23185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 820,
            column: 20,
            span: 23185..23186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 820,
            column: 21,
            span: 23186..23187,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 820,
            column: 22,
            span: 23187..23188,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 821,
            column: 10,
            span: 23193..23198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 821,
            column: 12,
            span: 23199..23200,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 821,
            column: 14,
            span: 23201..23202,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 821,
            column: 16,
            span: 23203..23204,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 821,
            column: 17,
            span: 23204..23205,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 821,
            column: 28,
            span: 23205..23216,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 821,
            column: 29,
            span: 23216..23217,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 821,
            column: 30,
            span: 23216..23218,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 821,
            column: 31,
            span: 23218..23219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 822,
            column: 10,
            span: 23224..23229,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 822,
            column: 11,
            span: 23229..23230,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 822,
            column: 23,
            span: 23230..23242,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 822,
            column: 24,
            span: 23242..23243,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 822,
            column: 25,
            span: 23243..23244,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 822,
            column: 26,
            span: 23244..23245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 822,
            column: 28,
            span: 23246..23247,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 822,
            column: 29,
            span: 23247..23248,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "map",
        ),
        position: Position {
            line: 823,
            column: 8,
            span: 23253..23256,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 823,
            column: 9,
            span: 23256..23257,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 823,
            column: 10,
            span: 23257..23258,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 823,
            column: 11,
            span: 23258..23259,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 823,
            column: 13,
            span: 23260..23261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 823,
            column: 0,
            span: 23262..23263,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 824,
            column: 11,
            span: 23268..23274,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u",
        ),
        position: Position {
            line: 824,
            column: 0,
            span: 23275..23276,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 825,
            column: 0,
            span: 23279..23282,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 826,
            column: 9,
            span: 23285..23291,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 826,
            column: 10,
            span: 23291..23292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 826,
            column: 11,
            span: 23292..23293,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 826,
            column: 12,
            span: 23293..23294,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 826,
            column: 14,
            span: 23293..23296,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 826,
            column: 15,
            span: 23296..23297,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 826,
            column: 18,
            span: 23298..23300,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 826,
            column: 20,
            span: 23301..23302,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 826,
            column: 21,
            span: 23302..23303,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 826,
            column: 23,
            span: 23302..23305,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 826,
            column: 24,
            span: 23305..23306,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 826,
            column: 25,
            span: 23306..23307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 827,
            column: 9,
            span: 23310..23316,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 827,
            column: 10,
            span: 23316..23317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 827,
            column: 11,
            span: 23317..23318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 827,
            column: 12,
            span: 23318..23319,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 827,
            column: 14,
            span: 23318..23321,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 827,
            column: 15,
            span: 23321..23322,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 827,
            column: 18,
            span: 23323..23325,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 827,
            column: 20,
            span: 23326..23327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 827,
            column: 21,
            span: 23327..23328,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 827,
            column: 23,
            span: 23327..23330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 827,
            column: 24,
            span: 23330..23331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 827,
            column: 25,
            span: 23331..23332,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 828,
            column: 9,
            span: 23335..23341,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 828,
            column: 10,
            span: 23341..23342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 828,
            column: 11,
            span: 23342..23343,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 828,
            column: 12,
            span: 23343..23344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 828,
            column: 17,
            span: 23344..23349,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 828,
            column: 18,
            span: 23349..23350,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 828,
            column: 44,
            span: 23350..23376,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 828,
            column: 45,
            span: 23376..23377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 828,
            column: 47,
            span: 23378..23379,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 828,
            column: 48,
            span: 23379..23380,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 828,
            column: 50,
            span: 23379..23382,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 828,
            column: 51,
            span: 23382..23383,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 828,
            column: 52,
            span: 23383..23384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 828,
            column: 54,
            span: 23385..23386,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 828,
            column: 55,
            span: 23386..23387,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 828,
            column: 57,
            span: 23386..23389,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 828,
            column: 58,
            span: 23389..23390,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 828,
            column: 59,
            span: 23390..23391,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 828,
            column: 60,
            span: 23391..23392,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 829,
            column: 9,
            span: 23395..23401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 829,
            column: 10,
            span: 23401..23402,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 829,
            column: 13,
            span: 23402..23405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 829,
            column: 15,
            span: 23406..23407,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 829,
            column: 16,
            span: 23407..23408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 829,
            column: 21,
            span: 23408..23413,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 829,
            column: 22,
            span: 23413..23414,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"compare EQ 2 3; return 1\"",
        ),
        position: Position {
            line: 829,
            column: 48,
            span: 23414..23440,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 829,
            column: 49,
            span: 23440..23441,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 829,
            column: 51,
            span: 23442..23443,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 829,
            column: 52,
            span: 23443..23444,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 829,
            column: 54,
            span: 23443..23446,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 829,
            column: 55,
            span: 23446..23447,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 829,
            column: 56,
            span: 23447..23448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 829,
            column: 58,
            span: 23449..23450,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 829,
            column: 59,
            span: 23450..23451,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 829,
            column: 61,
            span: 23450..23453,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 829,
            column: 62,
            span: 23453..23454,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 829,
            column: 63,
            span: 23454..23455,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 829,
            column: 64,
            span: 23455..23456,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 830,
            column: 4,
            span: 23459..23460,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 830,
            column: 5,
            span: 23460..23461,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        position: Position {
            line: 830,
            column: 9,
            span: 23461..23465,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 830,
            column: 11,
            span: 23466..23467,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 830,
            column: 0,
            span: 23468..23471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 831,
            column: 9,
            span: 23474..23480,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 831,
            column: 10,
            span: 23480..23481,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 831,
            column: 11,
            span: 23481..23482,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 831,
            column: 12,
            span: 23482..23483,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 831,
            column: 14,
            span: 23482..23485,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 831,
            column: 15,
            span: 23485..23486,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 831,
            column: 18,
            span: 23487..23489,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 831,
            column: 20,
            span: 23490..23491,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 831,
            column: 21,
            span: 23491..23492,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 831,
            column: 23,
            span: 23491..23494,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 831,
            column: 24,
            span: 23494..23495,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 831,
            column: 25,
            span: 23495..23496,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 832,
            column: 0,
            span: 23497..23500,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 834,
            column: 6,
            span: 23502..23507,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 834,
            column: 9,
            span: 23507..23510,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 839,
            column: 3,
            span: 23553..23555,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 839,
            column: 4,
            span: 23555..23556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 839,
            column: 5,
            span: 23556..23557,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 839,
            column: 7,
            span: 23558..23559,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 839,
            column: 9,
            span: 23560..23561,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 839,
            column: 10,
            span: 23561..23562,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 840,
            column: 2,
            span: 23563..23564,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 840,
            column: 3,
            span: 23564..23565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 840,
            column: 10,
            span: 23565..23572,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 840,
            column: 11,
            span: 23572..23573,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  # set a line hook after 3 count hooks\n  sethook 4 0 '\n    getglobal t;\n    pushvalue -3; append -2\n    pushvalue -2; append -2\n  ']]",
        ),
        position: Position {
            line: 846,
            column: 6,
            span: 23573..23710,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 846,
            column: 7,
            span: 23710..23711,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        position: Position {
            line: 846,
            column: 11,
            span: 23712..23715,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 846,
            column: 12,
            span: 23715..23716,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 846,
            column: 14,
            span: 23716..23718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 846,
            column: 15,
            span: 23718..23719,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 847,
            column: 6,
            span: 23720..23725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 847,
            column: 8,
            span: 23726..23727,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 847,
            column: 10,
            span: 23728..23729,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 847,
            column: 12,
            span: 23729..23731,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 848,
            column: 2,
            span: 23746..23747,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 848,
            column: 4,
            span: 23748..23749,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 848,
            column: 6,
            span: 23749..23751,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 849,
            column: 2,
            span: 23766..23767,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 849,
            column: 4,
            span: 23768..23769,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 849,
            column: 6,
            span: 23769..23771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 850,
            column: 2,
            span: 23804..23805,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 850,
            column: 4,
            span: 23806..23807,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 850,
            column: 6,
            span: 23807..23809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 851,
            column: 2,
            span: 23825..23826,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 851,
            column: 4,
            span: 23827..23828,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 851,
            column: 6,
            span: 23828..23830,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 852,
            column: 6,
            span: 23846..23851,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 852,
            column: 7,
            span: 23851..23852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "sethook",
        ),
        position: Position {
            line: 852,
            column: 14,
            span: 23852..23859,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 852,
            column: 15,
            span: 23859..23860,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 852,
            column: 16,
            span: 23860..23861,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 853,
            column: 2,
            span: 23862..23863,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 853,
            column: 4,
            span: 23864..23865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 853,
            column: 7,
            span: 23866..23868,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 853,
            column: 8,
            span: 23868..23869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 853,
            column: 0,
            span: 23869..23870,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 854,
            column: 7,
            span: 23871..23877,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 854,
            column: 8,
            span: 23877..23878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 854,
            column: 9,
            span: 23878..23879,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 854,
            column: 10,
            span: 23879..23880,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 854,
            column: 11,
            span: 23879..23881,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 854,
            column: 12,
            span: 23881..23882,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 854,
            column: 15,
            span: 23883..23885,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 854,
            column: 22,
            span: 23886..23892,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 854,
            column: 23,
            span: 23892..23893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 855,
            column: 5,
            span: 23894..23898,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 855,
            column: 7,
            span: 23899..23900,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 855,
            column: 9,
            span: 23901..23902,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 855,
            column: 10,
            span: 23902..23903,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 855,
            column: 11,
            span: 23902..23904,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 855,
            column: 12,
            span: 23904..23905,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 856,
            column: 7,
            span: 23906..23912,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 856,
            column: 8,
            span: 23912..23913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 856,
            column: 9,
            span: 23913..23914,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 856,
            column: 10,
            span: 23914..23915,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 856,
            column: 11,
            span: 23914..23916,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 856,
            column: 12,
            span: 23916..23917,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 856,
            column: 15,
            span: 23918..23920,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 856,
            column: 22,
            span: 23921..23927,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 856,
            column: 26,
            span: 23928..23931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 856,
            column: 28,
            span: 23932..23933,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 856,
            column: 29,
            span: 23933..23934,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 856,
            column: 30,
            span: 23933..23935,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 856,
            column: 31,
            span: 23935..23936,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 856,
            column: 34,
            span: 23937..23939,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 856,
            column: 39,
            span: 23940..23944,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 856,
            column: 41,
            span: 23945..23946,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 856,
            column: 43,
            span: 23946..23948,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 856,
            column: 44,
            span: 23948..23949,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 857,
            column: 7,
            span: 23950..23956,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 857,
            column: 8,
            span: 23956..23957,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 857,
            column: 9,
            span: 23957..23958,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 857,
            column: 10,
            span: 23958..23959,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 857,
            column: 11,
            span: 23958..23960,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 857,
            column: 12,
            span: 23960..23961,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 857,
            column: 15,
            span: 23962..23964,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"line\"",
        ),
        position: Position {
            line: 857,
            column: 22,
            span: 23965..23971,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 857,
            column: 26,
            span: 23972..23975,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 857,
            column: 28,
            span: 23976..23977,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 857,
            column: 29,
            span: 23977..23978,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 857,
            column: 30,
            span: 23977..23979,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 857,
            column: 31,
            span: 23979..23980,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 857,
            column: 34,
            span: 23981..23983,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "line",
        ),
        position: Position {
            line: 857,
            column: 39,
            span: 23984..23988,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 857,
            column: 41,
            span: 23989..23990,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 857,
            column: 43,
            span: 23990..23992,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 857,
            column: 44,
            span: 23992..23993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 858,
            column: 7,
            span: 23994..24000,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 858,
            column: 8,
            span: 24000..24001,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 858,
            column: 9,
            span: 24001..24002,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 858,
            column: 10,
            span: 24002..24003,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 858,
            column: 11,
            span: 24002..24004,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 858,
            column: 12,
            span: 24004..24005,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 858,
            column: 15,
            span: 24006..24008,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 858,
            column: 19,
            span: 24009..24012,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 858,
            column: 20,
            span: 24012..24013,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 862,
            column: 3,
            span: 24090..24092,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 863,
            column: 8,
            span: 24125..24130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 863,
            column: 10,
            span: 24131..24132,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 863,
            column: 12,
            span: 24133..24134,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 863,
            column: 14,
            span: 24135..24136,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 863,
            column: 15,
            span: 24136..24137,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 864,
            column: 6,
            span: 24140..24143,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 864,
            column: 8,
            span: 24144..24145,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 864,
            column: 9,
            span: 24145..24146,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 864,
            column: 10,
            span: 24145..24147,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 864,
            column: 11,
            span: 24147..24148,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 864,
            column: 13,
            span: 24147..24150,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 864,
            column: 0,
            span: 24151..24153,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 865,
            column: 6,
            span: 24158..24159,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 865,
            column: 7,
            span: 24159..24160,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 865,
            column: 8,
            span: 24160..24161,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 865,
            column: 9,
            span: 24161..24162,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 865,
            column: 11,
            span: 24163..24164,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 865,
            column: 13,
            span: 24165..24166,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 865,
            column: 14,
            span: 24166..24167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 865,
            column: 25,
            span: 24167..24178,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 865,
            column: 26,
            span: 24178..24179,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 865,
            column: 27,
            span: 24179..24180,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 865,
            column: 28,
            span: 24180..24181,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 866,
            column: 0,
            span: 24211..24214,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 867,
            column: 6,
            span: 24217..24220,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 867,
            column: 8,
            span: 24221..24222,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 867,
            column: 9,
            span: 24222..24223,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 867,
            column: 10,
            span: 24222..24224,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 867,
            column: 11,
            span: 24224..24225,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 867,
            column: 13,
            span: 24224..24227,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 867,
            column: 14,
            span: 24227..24228,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 867,
            column: 15,
            span: 24227..24229,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 867,
            column: 18,
            span: 24230..24232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 868,
            column: 10,
            span: 24286..24291,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 868,
            column: 11,
            span: 24291..24292,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 868,
            column: 23,
            span: 24292..24304,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 868,
            column: 24,
            span: 24304..24305,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 868,
            column: 25,
            span: 24305..24306,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 868,
            column: 26,
            span: 24306..24307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 868,
            column: 27,
            span: 24307..24308,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 868,
            column: 28,
            span: 24308..24309,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 868,
            column: 29,
            span: 24309..24310,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 868,
            column: 31,
            span: 24311..24312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 868,
            column: 35,
            span: 24312..24316,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 868,
            column: 37,
            span: 24317..24318,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 868,
            column: 46,
            span: 24319..24327,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 868,
            column: 48,
            span: 24328..24329,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 868,
            column: 49,
            span: 24329..24330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 868,
            column: 50,
            span: 24330..24331,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 868,
            column: 56,
            span: 24332..24337,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 868,
            column: 57,
            span: 24337..24338,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error inside gc\"",
        ),
        position: Position {
            line: 868,
            column: 74,
            span: 24338..24355,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 868,
            column: 75,
            span: 24355..24356,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 868,
            column: 79,
            span: 24357..24360,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 868,
            column: 80,
            span: 24360..24361,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 868,
            column: 81,
            span: 24361..24362,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 869,
            column: 0,
            span: 24365..24368,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 870,
            column: 6,
            span: 24371..24374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 870,
            column: 8,
            span: 24375..24376,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 870,
            column: 9,
            span: 24376..24377,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 870,
            column: 10,
            span: 24376..24378,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 870,
            column: 11,
            span: 24378..24379,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 870,
            column: 13,
            span: 24378..24381,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 870,
            column: 14,
            span: 24381..24382,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 870,
            column: 15,
            span: 24381..24383,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 870,
            column: 18,
            span: 24384..24386,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 871,
            column: 10,
            span: 24452..24457,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 871,
            column: 11,
            span: 24457..24458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        position: Position {
            line: 871,
            column: 23,
            span: 24458..24470,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 871,
            column: 24,
            span: 24470..24471,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 871,
            column: 25,
            span: 24471..24472,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 871,
            column: 26,
            span: 24472..24473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 871,
            column: 27,
            span: 24473..24474,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 871,
            column: 28,
            span: 24474..24475,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 871,
            column: 29,
            span: 24475..24476,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 871,
            column: 31,
            span: 24477..24478,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__gc",
        ),
        position: Position {
            line: 871,
            column: 35,
            span: 24478..24482,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 871,
            column: 37,
            span: 24483..24484,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 871,
            column: 46,
            span: 24485..24493,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 871,
            column: 48,
            span: 24494..24495,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 871,
            column: 49,
            span: 24495..24496,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 871,
            column: 50,
            span: 24496..24497,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 871,
            column: 55,
            span: 24498..24502,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 871,
            column: 56,
            span: 24502..24503,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A=A+1\"",
        ),
        position: Position {
            line: 871,
            column: 63,
            span: 24503..24510,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 871,
            column: 64,
            span: 24510..24511,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 871,
            column: 65,
            span: 24511..24512,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 871,
            column: 66,
            span: 24512..24513,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 871,
            column: 70,
            span: 24514..24517,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 871,
            column: 71,
            span: 24517..24518,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 871,
            column: 72,
            span: 24518..24519,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 872,
            column: 0,
            span: 24522..24525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 873,
            column: 5,
            span: 24528..24530,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 873,
            column: 6,
            span: 24530..24531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 873,
            column: 7,
            span: 24531..24532,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 873,
            column: 9,
            span: 24533..24534,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 873,
            column: 0,
            span: 24534..24536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 874,
            column: 4,
            span: 24539..24540,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 874,
            column: 6,
            span: 24541..24542,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 874,
            column: 0,
            span: 24542..24544,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 875,
            column: 8,
            span: 24547..24552,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 875,
            column: 10,
            span: 24552..24554,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 875,
            column: 0,
            span: 24555..24557,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 876,
            column: 10,
            span: 24562..24567,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 876,
            column: 15,
            span: 24568..24572,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 876,
            column: 16,
            span: 24572..24573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 876,
            column: 20,
            span: 24574..24577,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 876,
            column: 22,
            span: 24578..24579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 876,
            column: 28,
            span: 24580..24585,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 876,
            column: 29,
            span: 24585..24586,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 876,
            column: 43,
            span: 24586..24600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 876,
            column: 44,
            span: 24600..24601,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 877,
            column: 7,
            span: 24606..24608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stat",
        ),
        position: Position {
            line: 877,
            column: 12,
            span: 24609..24613,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 877,
            column: 0,
            span: 24614..24618,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 878,
            column: 12,
            span: 24625..24630,
        },
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        position: Position {
            line: 879,
            column: 0,
            span: 24665..24669,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 880,
            column: 8,
            span: 24676..24677,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 880,
            column: 10,
            span: 24678..24679,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 880,
            column: 12,
            span: 24680..24681,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 880,
            column: 14,
            span: 24682..24683,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 880,
            column: 0,
            span: 24683..24685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 881,
            column: 13,
            span: 24692..24698,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 881,
            column: 14,
            span: 24698..24699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 881,
            column: 20,
            span: 24699..24705,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 881,
            column: 21,
            span: 24705..24706,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 881,
            column: 25,
            span: 24706..24710,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 881,
            column: 26,
            span: 24710..24711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        position: Position {
            line: 881,
            column: 29,
            span: 24711..24714,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 881,
            column: 30,
            span: 24714..24715,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"__gc\"",
        ),
        position: Position {
            line: 881,
            column: 37,
            span: 24716..24722,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 881,
            column: 38,
            span: 24722..24723,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 881,
            column: 39,
            span: 24723..24724,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 882,
            column: 0,
            span: 24729..24732,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 883,
            column: 0,
            span: 24735..24738,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 884,
            column: 9,
            span: 24741..24747,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 884,
            column: 10,
            span: 24747..24748,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 884,
            column: 11,
            span: 24748..24749,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 884,
            column: 14,
            span: 24750..24752,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 884,
            column: 17,
            span: 24752..24755,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 884,
            column: 18,
            span: 24755..24756,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 886,
            column: 9,
            span: 24781..24787,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 886,
            column: 10,
            span: 24787..24788,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        position: Position {
            line: 886,
            column: 11,
            span: 24788..24789,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 886,
            column: 14,
            span: 24790..24792,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 886,
            column: 17,
            span: 24792..24795,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 886,
            column: 18,
            span: 24795..24796,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 887,
            column: 0,
            span: 24830..24833,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 890,
            column: 0,
            span: 24934..24936,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 891,
            column: 8,
            span: 24939..24944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 891,
            column: 10,
            span: 24945..24946,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 891,
            column: 12,
            span: 24947..24948,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 891,
            column: 14,
            span: 24949..24950,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 891,
            column: 15,
            span: 24950..24951,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 891,
            column: 16,
            span: 24951..24952,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 891,
            column: 22,
            span: 24953..24958,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 891,
            column: 26,
            span: 24959..24962,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 891,
            column: 28,
            span: 24963..24964,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 891,
            column: 0,
            span: 24964..24967,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 892,
            column: 6,
            span: 24970..24973,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 892,
            column: 8,
            span: 24974..24975,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 892,
            column: 9,
            span: 24975..24976,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 892,
            column: 10,
            span: 24975..24977,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 892,
            column: 11,
            span: 24977..24978,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 892,
            column: 14,
            span: 24978..24981,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 892,
            column: 17,
            span: 24982..24984,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 892,
            column: 19,
            span: 24985..24986,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 892,
            column: 20,
            span: 24986..24987,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 892,
            column: 21,
            span: 24987..24988,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 892,
            column: 22,
            span: 24988..24989,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 892,
            column: 24,
            span: 24990..24991,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 892,
            column: 26,
            span: 24992..24993,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 892,
            column: 27,
            span: 24993..24994,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 892,
            column: 39,
            span: 24994..25006,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 892,
            column: 40,
            span: 25006..25007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 892,
            column: 41,
            span: 25007..25008,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 892,
            column: 42,
            span: 25008..25009,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 892,
            column: 0,
            span: 25010..25013,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 893,
            column: 6,
            span: 25016..25019,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 893,
            column: 8,
            span: 25020..25021,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 893,
            column: 9,
            span: 25021..25022,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 893,
            column: 10,
            span: 25021..25023,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 893,
            column: 11,
            span: 25023..25024,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 893,
            column: 14,
            span: 25024..25027,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 893,
            column: 17,
            span: 25028..25030,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 893,
            column: 24,
            span: 25031..25037,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 893,
            column: 25,
            span: 25037..25038,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 893,
            column: 26,
            span: 25038..25039,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 893,
            column: 27,
            span: 25039..25040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "udataval",
        ),
        position: Position {
            line: 893,
            column: 35,
            span: 25040..25048,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 893,
            column: 36,
            span: 25048..25049,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 893,
            column: 37,
            span: 25049..25050,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 893,
            column: 38,
            span: 25050..25051,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 893,
            column: 39,
            span: 25051..25052,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 893,
            column: 40,
            span: 25052..25053,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 893,
            column: 41,
            span: 25053..25054,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 893,
            column: 44,
            span: 25055..25057,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 893,
            column: 46,
            span: 25058..25059,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 893,
            column: 47,
            span: 25059..25060,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 893,
            column: 0,
            span: 25061..25064,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 894,
            column: 6,
            span: 25067..25070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 894,
            column: 8,
            span: 25071..25072,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 894,
            column: 9,
            span: 25072..25073,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 894,
            column: 10,
            span: 25072..25074,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 894,
            column: 11,
            span: 25074..25075,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 894,
            column: 14,
            span: 25075..25078,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 894,
            column: 17,
            span: 25079..25081,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 894,
            column: 24,
            span: 25082..25088,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 894,
            column: 25,
            span: 25088..25089,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 894,
            column: 26,
            span: 25089..25090,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 894,
            column: 27,
            span: 25090..25091,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 894,
            column: 39,
            span: 25091..25103,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 894,
            column: 40,
            span: 25103..25104,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 894,
            column: 41,
            span: 25104..25105,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 894,
            column: 42,
            span: 25105..25106,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 894,
            column: 45,
            span: 25107..25109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 894,
            column: 47,
            span: 25110..25111,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 894,
            column: 48,
            span: 25111..25112,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 894,
            column: 49,
            span: 25112..25113,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 894,
            column: 50,
            span: 25113..25114,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 894,
            column: 51,
            span: 25114..25115,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 894,
            column: 0,
            span: 25116..25119,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 895,
            column: 6,
            span: 25122..25125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 895,
            column: 8,
            span: 25126..25127,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 895,
            column: 9,
            span: 25127..25128,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 895,
            column: 10,
            span: 25127..25129,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 895,
            column: 11,
            span: 25129..25130,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 895,
            column: 14,
            span: 25130..25133,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 895,
            column: 17,
            span: 25134..25136,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 895,
            column: 19,
            span: 25137..25138,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 895,
            column: 20,
            span: 25138..25139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 895,
            column: 21,
            span: 25139..25140,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 895,
            column: 22,
            span: 25140..25141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 895,
            column: 23,
            span: 25141..25142,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 895,
            column: 24,
            span: 25142..25143,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 895,
            column: 25,
            span: 25143..25144,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 895,
            column: 27,
            span: 25145..25146,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 895,
            column: 29,
            span: 25147..25148,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 895,
            column: 0,
            span: 25149..25152,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 896,
            column: 6,
            span: 25155..25158,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 896,
            column: 8,
            span: 25159..25160,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 896,
            column: 9,
            span: 25160..25161,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 896,
            column: 10,
            span: 25160..25162,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 896,
            column: 11,
            span: 25162..25163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 896,
            column: 14,
            span: 25163..25166,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 896,
            column: 17,
            span: 25167..25169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 896,
            column: 19,
            span: 25170..25171,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 896,
            column: 20,
            span: 25171..25172,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 896,
            column: 21,
            span: 25172..25173,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 896,
            column: 22,
            span: 25173..25174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pushuserdata",
        ),
        position: Position {
            line: 896,
            column: 34,
            span: 25174..25186,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 896,
            column: 35,
            span: 25186..25187,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 896,
            column: 36,
            span: 25187..25188,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 896,
            column: 37,
            span: 25188..25189,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 896,
            column: 38,
            span: 25189..25190,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 896,
            column: 40,
            span: 25191..25192,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 896,
            column: 42,
            span: 25193..25194,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 896,
            column: 0,
            span: 25195..25198,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 897,
            column: 9,
            span: 25201..25207,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 897,
            column: 10,
            span: 25207..25208,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 897,
            column: 14,
            span: 25208..25212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 897,
            column: 15,
            span: 25212..25213,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        position: Position {
            line: 897,
            column: 23,
            span: 25213..25221,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 897,
            column: 24,
            span: 25221..25222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 897,
            column: 25,
            span: 25222..25223,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 897,
            column: 26,
            span: 25223..25224,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 897,
            column: 27,
            span: 25223..25225,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 897,
            column: 28,
            span: 25225..25226,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 897,
            column: 29,
            span: 25226..25227,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 897,
            column: 30,
            span: 25227..25228,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 897,
            column: 33,
            span: 25229..25231,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 897,
            column: 42,
            span: 25232..25240,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 897,
            column: 43,
            span: 25240..25241,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 898,
            column: 0,
            span: 25242..25245,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 903,
            column: 2,
            span: 25349..25350,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 903,
            column: 3,
            span: 25350..25351,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 903,
            column: 13,
            span: 25351..25361,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 903,
            column: 14,
            span: 25361..25362,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 903,
            column: 15,
            span: 25362..25363,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 903,
            column: 16,
            span: 25363..25364,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 903,
            column: 24,
            span: 25364..25372,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 903,
            column: 25,
            span: 25372..25373,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 903,
            column: 26,
            span: 25373..25374,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 903,
            column: 27,
            span: 25374..25375,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 903,
            column: 28,
            span: 25375..25376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 904,
            column: 3,
            span: 25377..25379,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 904,
            column: 5,
            span: 25380..25381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 904,
            column: 7,
            span: 25382..25383,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 904,
            column: 8,
            span: 25383..25384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 904,
            column: 16,
            span: 25384..25392,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 904,
            column: 17,
            span: 25392..25393,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 904,
            column: 18,
            span: 25393..25394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 905,
            column: 7,
            span: 25395..25401,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 905,
            column: 8,
            span: 25401..25402,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 905,
            column: 10,
            span: 25402..25404,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 905,
            column: 11,
            span: 25404..25405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 907,
            column: 7,
            span: 25407..25413,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 907,
            column: 8,
            span: 25413..25414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 907,
            column: 9,
            span: 25414..25415,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 907,
            column: 10,
            span: 25415..25416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 907,
            column: 18,
            span: 25416..25424,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 907,
            column: 19,
            span: 25424..25425,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 907,
            column: 21,
            span: 25425..25427,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 907,
            column: 22,
            span: 25427..25428,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X='a'; return 'a'\"",
        ),
        position: Position {
            line: 907,
            column: 42,
            span: 25429..25448,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 907,
            column: 43,
            span: 25448..25449,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 907,
            column: 46,
            span: 25450..25452,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 907,
            column: 50,
            span: 25453..25456,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 907,
            column: 51,
            span: 25456..25457,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 910,
            column: 7,
            span: 25460..25466,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 910,
            column: 8,
            span: 25466..25467,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 910,
            column: 9,
            span: 25467..25468,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pack",
        ),
        position: Position {
            line: 910,
            column: 13,
            span: 25468..25472,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 910,
            column: 14,
            span: 25472..25473,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 910,
            column: 15,
            span: 25473..25474,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 910,
            column: 16,
            span: 25474..25475,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 910,
            column: 24,
            span: 25475..25483,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 910,
            column: 25,
            span: 25483..25484,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 910,
            column: 27,
            span: 25484..25486,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 910,
            column: 28,
            span: 25486..25487,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"function f () return 'alo', 3 end; f()\"",
        ),
        position: Position {
            line: 910,
            column: 69,
            span: 25488..25528,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 910,
            column: 70,
            span: 25528..25529,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 910,
            column: 71,
            span: 25529..25530,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 910,
            column: 74,
            span: 25531..25533,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 910,
            column: 76,
            span: 25533..25535,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 910,
            column: 77,
            span: 25535..25536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 912,
            column: 2,
            span: 25538..25539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 912,
            column: 3,
            span: 25539..25540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 912,
            column: 5,
            span: 25541..25542,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 912,
            column: 7,
            span: 25543..25544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 912,
            column: 9,
            span: 25545..25546,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 912,
            column: 10,
            span: 25546..25547,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 912,
            column: 18,
            span: 25547..25555,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 912,
            column: 19,
            span: 25555..25556,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 912,
            column: 21,
            span: 25556..25558,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 912,
            column: 22,
            span: 25558..25559,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return f()\"",
        ),
        position: Position {
            line: 912,
            column: 35,
            span: 25560..25572,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 912,
            column: 36,
            span: 25572..25573,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 913,
            column: 7,
            span: 25574..25580,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 913,
            column: 8,
            span: 25580..25581,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 913,
            column: 9,
            span: 25581..25582,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 913,
            column: 12,
            span: 25583..25585,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        position: Position {
            line: 913,
            column: 18,
            span: 25586..25591,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 913,
            column: 22,
            span: 25592..25595,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 913,
            column: 24,
            span: 25596..25597,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 913,
            column: 27,
            span: 25598..25600,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'3'",
        ),
        position: Position {
            line: 913,
            column: 31,
            span: 25601..25604,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 913,
            column: 32,
            span: 25604..25605,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 915,
            column: 2,
            span: 25607..25608,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 915,
            column: 3,
            span: 25608..25609,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 915,
            column: 11,
            span: 25609..25617,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 915,
            column: 12,
            span: 25617..25618,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 915,
            column: 14,
            span: 25618..25620,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 915,
            column: 15,
            span: 25620..25621,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ERRORMESSAGE = nil\"",
        ),
        position: Position {
            line: 915,
            column: 37,
            span: 25622..25643,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 915,
            column: 38,
            span: 25643..25644,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 917,
            column: 2,
            span: 25676..25677,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 917,
            column: 3,
            span: 25677..25678,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        position: Position {
            line: 917,
            column: 5,
            span: 25679..25680,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 917,
            column: 6,
            span: 25680..25681,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 917,
            column: 8,
            span: 25682..25683,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 917,
            column: 10,
            span: 25684..25685,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 917,
            column: 12,
            span: 25686..25687,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 917,
            column: 13,
            span: 25687..25688,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 917,
            column: 21,
            span: 25688..25696,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 917,
            column: 22,
            span: 25696..25697,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 917,
            column: 24,
            span: 25697..25699,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 917,
            column: 25,
            span: 25699..25700,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return sin(1)\"",
        ),
        position: Position {
            line: 917,
            column: 41,
            span: 25701..25716,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 917,
            column: 42,
            span: 25716..25717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 918,
            column: 7,
            span: 25718..25724,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 918,
            column: 8,
            span: 25724..25725,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 918,
            column: 9,
            span: 25725..25726,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 918,
            column: 12,
            span: 25727..25729,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 918,
            column: 16,
            span: 25730..25733,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 918,
            column: 20,
            span: 25734..25737,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 918,
            column: 22,
            span: 25738..25739,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 918,
            column: 25,
            span: 25740..25742,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 918,
            column: 27,
            span: 25742..25744,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 918,
            column: 28,
            span: 25744..25745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 921,
            column: 2,
            span: 25795..25796,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 921,
            column: 3,
            span: 25796..25797,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 921,
            column: 5,
            span: 25798..25799,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 921,
            column: 6,
            span: 25799..25800,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 921,
            column: 8,
            span: 25801..25802,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 921,
            column: 10,
            span: 25803..25804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 921,
            column: 12,
            span: 25805..25806,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 921,
            column: 13,
            span: 25806..25807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 921,
            column: 21,
            span: 25807..25815,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 921,
            column: 22,
            span: 25815..25816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 921,
            column: 24,
            span: 25816..25818,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 921,
            column: 25,
            span: 25818..25819,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return a+\"",
        ),
        position: Position {
            line: 921,
            column: 37,
            span: 25820..25831,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 921,
            column: 38,
            span: 25831..25832,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 922,
            column: 7,
            span: 25833..25839,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 922,
            column: 8,
            span: 25839..25840,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 922,
            column: 9,
            span: 25840..25841,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 922,
            column: 12,
            span: 25842..25844,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 922,
            column: 16,
            span: 25845..25848,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 922,
            column: 20,
            span: 25849..25852,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 922,
            column: 22,
            span: 25853..25854,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 922,
            column: 25,
            span: 25855..25857,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 922,
            column: 27,
            span: 25857..25859,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 922,
            column: 31,
            span: 25860..25863,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 922,
            column: 36,
            span: 25864..25868,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 922,
            column: 37,
            span: 25868..25869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 922,
            column: 38,
            span: 25869..25870,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 922,
            column: 39,
            span: 25870..25871,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 922,
            column: 42,
            span: 25872..25874,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        position: Position {
            line: 922,
            column: 51,
            span: 25875..25883,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 922,
            column: 52,
            span: 25883..25884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 924,
            column: 2,
            span: 25909..25910,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 924,
            column: 3,
            span: 25910..25911,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 924,
            column: 10,
            span: 25911..25918,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 924,
            column: 11,
            span: 25918..25919,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 924,
            column: 13,
            span: 25919..25921,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 924,
            column: 14,
            span: 25921..25922,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 925,
            column: 2,
            span: 25923..25924,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 925,
            column: 3,
            span: 25924..25925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 925,
            column: 5,
            span: 25926..25927,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 925,
            column: 6,
            span: 25927..25928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 925,
            column: 8,
            span: 25929..25930,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 925,
            column: 10,
            span: 25931..25932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 925,
            column: 12,
            span: 25933..25934,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 925,
            column: 13,
            span: 25934..25935,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 925,
            column: 21,
            span: 25935..25943,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 925,
            column: 22,
            span: 25943..25944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 925,
            column: 24,
            span: 25944..25946,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 925,
            column: 25,
            span: 25946..25947,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\n  string = require'string'\n  a = require'_G'; assert(a == _G and require(\"_G\") == a)\n  io = require'io'; assert(type(io.read) == \"function\")\n  assert(require(\"io\") == io)\n  a = require'table'; assert(type(a.insert) == \"function\")\n  a = require'debug'; assert(type(a.getlocal) == \"function\")\n  a = require'math'; assert(type(a.sin) == \"function\")\n  return string.sub('okinama', 1, 2)\n]]",
        ),
        position: Position {
            line: 934,
            column: 3,
            span: 25948..26336,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 934,
            column: 4,
            span: 26336..26337,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 935,
            column: 7,
            span: 26338..26344,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 935,
            column: 8,
            span: 26344..26345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 935,
            column: 9,
            span: 26345..26346,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 935,
            column: 12,
            span: 26347..26349,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"ok\"",
        ),
        position: Position {
            line: 935,
            column: 17,
            span: 26350..26354,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 935,
            column: 18,
            span: 26354..26355,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 937,
            column: 2,
            span: 26357..26358,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 937,
            column: 3,
            span: 26358..26359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 937,
            column: 13,
            span: 26359..26369,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 937,
            column: 14,
            span: 26369..26370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 937,
            column: 16,
            span: 26370..26372,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 937,
            column: 17,
            span: 26372..26373,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 937,
            column: 18,
            span: 26373..26374,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 940,
            column: 3,
            span: 26377..26379,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 940,
            column: 5,
            span: 26380..26381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 940,
            column: 7,
            span: 26382..26383,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 940,
            column: 8,
            span: 26383..26384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 940,
            column: 16,
            span: 26384..26392,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 940,
            column: 17,
            span: 26392..26393,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 940,
            column: 18,
            span: 26393..26394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 941,
            column: 2,
            span: 26395..26396,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 941,
            column: 3,
            span: 26396..26397,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        position: Position {
            line: 941,
            column: 10,
            span: 26397..26404,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 941,
            column: 11,
            span: 26404..26405,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 941,
            column: 13,
            span: 26405..26407,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 941,
            column: 14,
            span: 26407..26408,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 942,
            column: 2,
            span: 26409..26410,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 942,
            column: 3,
            span: 26410..26411,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 942,
            column: 11,
            span: 26411..26419,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 942,
            column: 12,
            span: 26419..26420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 942,
            column: 14,
            span: 26420..26422,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 942,
            column: 15,
            span: 26422..26423,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a = {}\"",
        ),
        position: Position {
            line: 942,
            column: 24,
            span: 26424..26432,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 942,
            column: 25,
            span: 26432..26433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 943,
            column: 2,
            span: 26434..26435,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 943,
            column: 3,
            span: 26435..26436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 943,
            column: 8,
            span: 26436..26441,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 943,
            column: 9,
            span: 26441..26442,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 943,
            column: 11,
            span: 26442..26444,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 943,
            column: 12,
            span: 26444..26445,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[getglobal \"a\"; pushstring \"x\"; pushint 1;\n             settable -3]]",
        ),
        position: Position {
            line: 944,
            column: 27,
            span: 26446..26516,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 944,
            column: 28,
            span: 26516..26517,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 945,
            column: 7,
            span: 26518..26524,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 945,
            column: 8,
            span: 26524..26525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 945,
            column: 9,
            span: 26525..26526,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 945,
            column: 10,
            span: 26526..26527,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doremote",
        ),
        position: Position {
            line: 945,
            column: 18,
            span: 26527..26535,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 945,
            column: 19,
            span: 26535..26536,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 945,
            column: 21,
            span: 26536..26538,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 945,
            column: 22,
            span: 26538..26539,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"return a.x\"",
        ),
        position: Position {
            line: 945,
            column: 35,
            span: 26540..26552,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 945,
            column: 36,
            span: 26552..26553,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 945,
            column: 39,
            span: 26554..26556,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"1\"",
        ),
        position: Position {
            line: 945,
            column: 43,
            span: 26557..26560,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 945,
            column: 44,
            span: 26560..26561,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 947,
            column: 2,
            span: 26563..26564,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 947,
            column: 3,
            span: 26564..26565,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 947,
            column: 13,
            span: 26565..26575,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 947,
            column: 14,
            span: 26575..26576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 947,
            column: 16,
            span: 26576..26578,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 947,
            column: 17,
            span: 26578..26579,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "L1",
        ),
        position: Position {
            line: 949,
            column: 3,
            span: 26581..26583,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 949,
            column: 5,
            span: 26584..26585,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 949,
            column: 0,
            span: 26586..26589,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 951,
            column: 6,
            span: 26591..26596,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 951,
            column: 7,
            span: 26596..26597,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 951,
            column: 10,
            span: 26597..26600,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 951,
            column: 11,
            span: 26600..26601,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 956,
            column: 9,
            span: 26776..26784,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 956,
            column: 10,
            span: 26784..26785,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"block too big\"",
        ),
        position: Position {
            line: 956,
            column: 25,
            span: 26785..26800,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 956,
            column: 26,
            span: 26800..26801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 956,
            column: 28,
            span: 26802..26803,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 956,
            column: 29,
            span: 26803..26804,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 956,
            column: 40,
            span: 26804..26815,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 956,
            column: 41,
            span: 26815..26816,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        position: Position {
            line: 956,
            column: 46,
            span: 26817..26821,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 956,
            column: 47,
            span: 26821..26822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        position: Position {
            line: 956,
            column: 57,
            span: 26822..26832,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 956,
            column: 58,
            span: 26832..26833,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 957,
            column: 15,
            span: 26834..26848,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 957,
            column: 16,
            span: 26848..26849,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 957,
            column: 17,
            span: 26849..26850,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 958,
            column: 2,
            span: 26851..26852,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 958,
            column: 3,
            span: 26852..26853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 958,
            column: 11,
            span: 26853..26861,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 958,
            column: 12,
            span: 26861..26862,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 958,
            column: 13,
            span: 26862..26863,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 958,
            column: 14,
            span: 26863..26864,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 958,
            column: 22,
            span: 26864..26872,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 958,
            column: 23,
            span: 26872..26873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 958,
            column: 24,
            span: 26873..26874,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 958,
            column: 25,
            span: 26874..26875,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5000",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 958,
            column: 29,
            span: 26874..26879,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 958,
            column: 30,
            span: 26879..26880,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "checkerr",
        ),
        position: Position {
            line: 959,
            column: 9,
            span: 26913..26921,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 959,
            column: 10,
            span: 26921..26922,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"not enough memory\"",
        ),
        position: Position {
            line: 959,
            column: 29,
            span: 26922..26941,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 959,
            column: 30,
            span: 26941..26942,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 959,
            column: 35,
            span: 26943..26947,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"local a={}; for i=1,100000 do a[i]=i end\"",
        ),
        position: Position {
            line: 959,
            column: 77,
            span: 26947..26989,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 959,
            column: 78,
            span: 26989..26990,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 960,
            column: 2,
            span: 26991..26992,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 960,
            column: 3,
            span: 26992..26993,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 960,
            column: 11,
            span: 26993..27001,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 960,
            column: 12,
            span: 27001..27002,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 960,
            column: 13,
            span: 27001..27003,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 960,
            column: 14,
            span: 27003..27004,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 965,
            column: 9,
            span: 27234..27242,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 965,
            column: 18,
            span: 27243..27251,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 965,
            column: 20,
            span: 27252..27253,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 965,
            column: 21,
            span: 27253..27254,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 965,
            column: 22,
            span: 27254..27255,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 965,
            column: 24,
            span: 27256..27257,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 965,
            column: 25,
            span: 27257..27258,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 966,
            column: 17,
            span: 27261..27275,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 966,
            column: 18,
            span: 27275..27276,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 966,
            column: 19,
            span: 27276..27277,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 966,
            column: 20,
            span: 27277..27278,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 966,
            column: 35,
            span: 27279..27293,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 966,
            column: 36,
            span: 27293..27294,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 966,
            column: 37,
            span: 27294..27295,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 967,
            column: 8,
            span: 27298..27303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 967,
            column: 10,
            span: 27304..27305,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 967,
            column: 12,
            span: 27306..27307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 967,
            column: 14,
            span: 27308..27309,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 967,
            column: 15,
            span: 27309..27310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 967,
            column: 23,
            span: 27310..27318,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 967,
            column: 24,
            span: 27318..27319,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 967,
            column: 25,
            span: 27319..27320,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 968,
            column: 8,
            span: 27323..27328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldM",
        ),
        position: Position {
            line: 968,
            column: 13,
            span: 27329..27333,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 968,
            column: 15,
            span: 27334..27335,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 968,
            column: 0,
            span: 27336..27337,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 969,
            column: 8,
            span: 27340..27345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 969,
            column: 10,
            span: 27346..27347,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 969,
            column: 11,
            span: 27347..27348,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 969,
            column: 12,
            span: 27348..27349,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 969,
            column: 14,
            span: 27350..27351,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 969,
            column: 0,
            span: 27352..27355,
        },
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        position: Position {
            line: 970,
            column: 8,
            span: 27358..27363,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 970,
            column: 10,
            span: 27363..27365,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 970,
            column: 0,
            span: 27366..27368,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 971,
            column: 6,
            span: 27373..27374,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 971,
            column: 8,
            span: 27375..27376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 971,
            column: 10,
            span: 27377..27378,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 971,
            column: 11,
            span: 27378..27379,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 971,
            column: 12,
            span: 27378..27380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 972,
            column: 6,
            span: 27427..27428,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 972,
            column: 7,
            span: 27428..27429,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 972,
            column: 15,
            span: 27429..27437,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 972,
            column: 16,
            span: 27437..27438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 972,
            column: 17,
            span: 27438..27439,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 972,
            column: 18,
            span: 27439..27440,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 973,
            column: 6,
            span: 27445..27446,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 973,
            column: 7,
            span: 27446..27447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 973,
            column: 9,
            span: 27448..27449,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 973,
            column: 11,
            span: 27450..27451,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        position: Position {
            line: 973,
            column: 17,
            span: 27452..27457,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 973,
            column: 18,
            span: 27457..27458,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 973,
            column: 19,
            span: 27458..27459,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 973,
            column: 20,
            span: 27459..27460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 974,
            column: 6,
            span: 27465..27466,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 974,
            column: 7,
            span: 27466..27467,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "totalmem",
        ),
        position: Position {
            line: 974,
            column: 15,
            span: 27467..27475,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 974,
            column: 16,
            span: 27475..27476,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 974,
            column: 17,
            span: 27475..27477,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 974,
            column: 18,
            span: 27477..27478,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 975,
            column: 7,
            span: 27506..27508,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 975,
            column: 9,
            span: 27509..27510,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 975,
            column: 13,
            span: 27511..27514,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 975,
            column: 15,
            span: 27515..27516,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 975,
            column: 20,
            span: 27517..27521,
        },
    },
    Token {
        kind: Break,
        lexeme: Symbol(
            "break",
        ),
        position: Position {
            line: 975,
            column: 26,
            span: 27522..27527,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 975,
            column: 30,
            span: 27528..27531,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 976,
            column: 19,
            span: 27570..27584,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 976,
            column: 20,
            span: 27584..27585,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 976,
            column: 21,
            span: 27585..27586,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 977,
            column: 7,
            span: 27591..27593,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 977,
            column: 11,
            span: 27594..27597,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 977,
            column: 13,
            span: 27598..27599,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 977,
            column: 17,
            span: 27600..27603,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 977,
            column: 21,
            span: 27604..27607,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 978,
            column: 8,
            span: 27634..27635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 978,
            column: 14,
            span: 27635..27641,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 978,
            column: 15,
            span: 27641..27642,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 978,
            column: 19,
            span: 27642..27646,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 978,
            column: 20,
            span: 27646..27647,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 978,
            column: 21,
            span: 27647..27648,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 978,
            column: 22,
            span: 27648..27649,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"memory\"",
        ),
        position: Position {
            line: 978,
            column: 31,
            span: 27650..27658,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 978,
            column: 32,
            span: 27658..27659,
        },
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        position: Position {
            line: 978,
            column: 35,
            span: 27660..27662,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 978,
            column: 42,
            span: 27663..27669,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 978,
            column: 43,
            span: 27669..27670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        position: Position {
            line: 978,
            column: 47,
            span: 27670..27674,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 978,
            column: 48,
            span: 27674..27675,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 978,
            column: 49,
            span: 27675..27676,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 978,
            column: 50,
            span: 27676..27677,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"overflow\"",
        ),
        position: Position {
            line: 978,
            column: 61,
            span: 27678..27688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 978,
            column: 62,
            span: 27688..27689,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 978,
            column: 63,
            span: 27689..27690,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 978,
            column: 0,
            span: 27691..27695,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "error",
        ),
        position: Position {
            line: 979,
            column: 12,
            span: 27702..27707,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 979,
            column: 13,
            span: 27707..27708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 979,
            column: 14,
            span: 27708..27709,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 979,
            column: 15,
            span: 27709..27710,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 979,
            column: 17,
            span: 27710..27712,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 979,
            column: 18,
            span: 27712..27713,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 980,
            column: 0,
            span: 27736..27739,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 981,
            column: 0,
            span: 27742..27745,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 982,
            column: 8,
            span: 27748..27753,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 982,
            column: 9,
            span: 27753..27754,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nlimit for \"",
        ),
        position: Position {
            line: 982,
            column: 23,
            span: 27754..27768,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 982,
            column: 26,
            span: 27769..27771,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 982,
            column: 28,
            span: 27772..27773,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 982,
            column: 31,
            span: 27774..27776,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\": \"",
        ),
        position: Position {
            line: 982,
            column: 36,
            span: 27777..27781,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 982,
            column: 39,
            span: 27782..27784,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "M",
        ),
        position: Position {
            line: 982,
            column: 41,
            span: 27785..27786,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 982,
            column: 42,
            span: 27786..27787,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldM",
        ),
        position: Position {
            line: 982,
            column: 46,
            span: 27787..27791,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 982,
            column: 47,
            span: 27791..27792,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 983,
            column: 9,
            span: 27795..27801,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 983,
            column: 0,
            span: 27802..27803,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 984,
            column: 0,
            span: 27804..27807,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 989,
            column: 2,
            span: 27862..27863,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 989,
            column: 4,
            span: 27864..27865,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 989,
            column: 13,
            span: 27866..27874,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 989,
            column: 14,
            span: 27874..27875,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"state creation\"",
        ),
        position: Position {
            line: 989,
            column: 30,
            span: 27875..27891,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 989,
            column: 31,
            span: 27891..27892,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 989,
            column: 33,
            span: 27893..27894,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 989,
            column: 34,
            span: 27894..27895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newstate",
        ),
        position: Position {
            line: 989,
            column: 42,
            span: 27895..27903,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 989,
            column: 43,
            span: 27903..27904,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 990,
            column: 2,
            span: 27905..27906,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 990,
            column: 3,
            span: 27906..27907,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "closestate",
        ),
        position: Position {
            line: 990,
            column: 13,
            span: 27907..27917,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 990,
            column: 14,
            span: 27917..27918,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 990,
            column: 15,
            span: 27918..27919,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 990,
            column: 16,
            span: 27919..27920,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 990,
            column: 17,
            span: 27920..27921,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 996,
            column: 3,
            span: 28033..28035,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 996,
            column: 5,
            span: 28036..28037,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 996,
            column: 7,
            span: 28038..28039,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 996,
            column: 8,
            span: 28039..28040,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 996,
            column: 13,
            span: 28040..28045,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 996,
            column: 14,
            span: 28045..28046,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"rawgeti R 1; return 1\"",
        ),
        position: Position {
            line: 996,
            column: 37,
            span: 28046..28069,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 996,
            column: 38,
            span: 28069..28070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 997,
            column: 7,
            span: 28071..28077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 997,
            column: 8,
            span: 28077..28078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 997,
            column: 12,
            span: 28078..28082,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 997,
            column: 13,
            span: 28082..28083,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 997,
            column: 15,
            span: 28083..28085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 997,
            column: 16,
            span: 28085..28086,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 997,
            column: 19,
            span: 28087..28089,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread\"",
        ),
        position: Position {
            line: 997,
            column: 28,
            span: 28090..28098,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 997,
            column: 32,
            span: 28099..28102,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 997,
            column: 42,
            span: 28103..28112,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 997,
            column: 43,
            span: 28112..28113,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "running",
        ),
        position: Position {
            line: 997,
            column: 50,
            span: 28113..28120,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 997,
            column: 51,
            span: 28120..28121,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 997,
            column: 52,
            span: 28121..28122,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 997,
            column: 55,
            span: 28123..28125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        position: Position {
            line: 997,
            column: 58,
            span: 28126..28128,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 997,
            column: 59,
            span: 28128..28129,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1001,
            column: 9,
            span: 28133..28141,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        position: Position {
            line: 1001,
            column: 16,
            span: 28142..28148,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1001,
            column: 18,
            span: 28149..28150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1001,
            column: 19,
            span: 28150..28151,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1001,
            column: 20,
            span: 28151..28152,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1001,
            column: 21,
            span: 28152..28153,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1001,
            column: 22,
            span: 28153..28154,
        },
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        position: Position {
            line: 1002,
            column: 5,
            span: 28157..28159,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1002,
            column: 7,
            span: 28160..28161,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1002,
            column: 9,
            span: 28161..28163,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1002,
            column: 10,
            span: 28162..28164,
        },
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        position: Position {
            line: 1002,
            column: 15,
            span: 28165..28169,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1002,
            column: 22,
            span: 28170..28176,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 1002,
            column: 25,
            span: 28177..28179,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1002,
            column: 0,
            span: 28180..28183,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1003,
            column: 8,
            span: 28186..28191,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 1003,
            column: 10,
            span: 28192..28193,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1003,
            column: 12,
            span: 28194..28195,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1003,
            column: 19,
            span: 28196..28202,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1003,
            column: 20,
            span: 28202..28203,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 1003,
            column: 23,
            span: 28203..28206,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1003,
            column: 24,
            span: 28206..28207,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"=\"",
        ),
        position: Position {
            line: 1003,
            column: 27,
            span: 28207..28210,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1003,
            column: 28,
            span: 28210..28211,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1003,
            column: 30,
            span: 28212..28213,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1003,
            column: 31,
            span: 28213..28214,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1004,
            column: 9,
            span: 28217..28223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1004,
            column: 16,
            span: 28224..28230,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1004,
            column: 17,
            span: 28230..28231,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        position: Position {
            line: 1004,
            column: 23,
            span: 28231..28237,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1004,
            column: 24,
            span: 28237..28238,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"T.doonnewstack([%s[ %s;\\n collectgarbage(); %s]%s])\\n\"",
        ),
        position: Position {
            line: 1004,
            column: 79,
            span: 28238..28293,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1004,
            column: 80,
            span: 28293..28294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 1005,
            column: 32,
            span: 28325..28326,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1005,
            column: 33,
            span: 28326..28327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1005,
            column: 35,
            span: 28328..28329,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1005,
            column: 36,
            span: 28329..28330,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        position: Position {
            line: 1005,
            column: 43,
            span: 28331..28337,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1005,
            column: 44,
            span: 28337..28338,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        position: Position {
            line: 1005,
            column: 45,
            span: 28338..28339,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 1005,
            column: 46,
            span: 28339..28340,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1005,
            column: 47,
            span: 28339..28341,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1005,
            column: 48,
            span: 28341..28342,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        position: Position {
            line: 1005,
            column: 49,
            span: 28342..28343,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1005,
            column: 50,
            span: 28343..28344,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1005,
            column: 51,
            span: 28344..28345,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 1005,
            column: 53,
            span: 28346..28347,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1005,
            column: 54,
            span: 28347..28348,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1006,
            column: 0,
            span: 28349..28352,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "G",
        ),
        position: Position {
            line: 1008,
            column: 2,
            span: 28354..28355,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1008,
            column: 3,
            span: 28355..28356,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1008,
            column: 4,
            span: 28355..28357,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1008,
            column: 5,
            span: 28357..28358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1008,
            column: 20,
            span: 28359..28373,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1008,
            column: 21,
            span: 28373..28374,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1008,
            column: 22,
            span: 28374..28375,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1008,
            column: 23,
            span: 28375..28376,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1008,
            column: 25,
            span: 28377..28378,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1008,
            column: 27,
            span: 28379..28380,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1008,
            column: 41,
            span: 28380..28394,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1008,
            column: 42,
            span: 28394..28395,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"count\"",
        ),
        position: Position {
            line: 1008,
            column: 49,
            span: 28395..28402,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1008,
            column: 50,
            span: 28402..28403,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 1009,
            column: 5,
            span: 28404..28408,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1009,
            column: 6,
            span: 28408..28409,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "expand",
        ),
        position: Position {
            line: 1009,
            column: 12,
            span: 28409..28415,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1009,
            column: 13,
            span: 28415..28416,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1009,
            column: 15,
            span: 28415..28418,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1009,
            column: 16,
            span: 28418..28419,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"G=G+1\"",
        ),
        position: Position {
            line: 1009,
            column: 23,
            span: 28419..28426,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1009,
            column: 24,
            span: 28426..28427,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1009,
            column: 25,
            span: 28427..28428,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1009,
            column: 26,
            span: 28428..28429,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1009,
            column: 27,
            span: 28429..28430,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1010,
            column: 7,
            span: 28431..28437,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1010,
            column: 8,
            span: 28437..28438,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "G",
        ),
        position: Position {
            line: 1010,
            column: 9,
            span: 28438..28439,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1010,
            column: 11,
            span: 28439..28441,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1010,
            column: 13,
            span: 28440..28443,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1010,
            column: 14,
            span: 28443..28444,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1010,
            column: 15,
            span: 28444..28445,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        position: Position {
            line: 1010,
            column: 30,
            span: 28446..28460,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1010,
            column: 31,
            span: 28460..28461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1010,
            column: 32,
            span: 28461..28462,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1010,
            column: 33,
            span: 28462..28463,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1012,
            column: 9,
            span: 28493..28501,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1012,
            column: 10,
            span: 28501..28502,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"thread creation\"",
        ),
        position: Position {
            line: 1012,
            column: 27,
            span: 28502..28519,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1012,
            column: 28,
            span: 28519..28520,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1012,
            column: 37,
            span: 28521..28529,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1012,
            column: 39,
            span: 28530..28531,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1012,
            column: 40,
            span: 28531..28532,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1013,
            column: 9,
            span: 28535..28541,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1013,
            column: 11,
            span: 28542..28543,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1013,
            column: 12,
            span: 28543..28544,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "doonnewstack",
        ),
        position: Position {
            line: 1013,
            column: 24,
            span: 28544..28556,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1013,
            column: 25,
            span: 28556..28557,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=1\"",
        ),
        position: Position {
            line: 1013,
            column: 30,
            span: 28557..28562,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1013,
            column: 31,
            span: 28562..28563,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1013,
            column: 34,
            span: 28564..28566,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1013,
            column: 36,
            span: 28566..28568,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1014,
            column: 4,
            span: 28594..28597,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1014,
            column: 5,
            span: 28597..28598,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1019,
            column: 9,
            span: 28631..28639,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1019,
            column: 10,
            span: 28639..28640,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"loadstring\"",
        ),
        position: Position {
            line: 1019,
            column: 22,
            span: 28640..28652,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1019,
            column: 23,
            span: 28652..28653,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1019,
            column: 32,
            span: 28654..28662,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1019,
            column: 34,
            span: 28663..28664,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1019,
            column: 35,
            span: 28664..28665,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1020,
            column: 9,
            span: 28668..28674,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 1020,
            column: 14,
            span: 28675..28679,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1020,
            column: 15,
            span: 28679..28680,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x=1\"",
        ),
        position: Position {
            line: 1020,
            column: 20,
            span: 28680..28685,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1020,
            column: 21,
            span: 28685..28686,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1021,
            column: 4,
            span: 28715..28718,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1021,
            column: 5,
            span: 28718..28719,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1024,
            column: 6,
            span: 28722..28727,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        position: Position {
            line: 1024,
            column: 15,
            span: 28728..28736,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1024,
            column: 17,
            span: 28737..28738,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nlocal function foo () return end\nlocal t = {\"x\"}\na = \"aaa\"\nfor i = 1, #t do a=a..t[i] end\nreturn true\n]]",
        ),
        position: Position {
            line: 1030,
            column: 3,
            span: 28739..28846,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 1033,
            column: 3,
            span: 28875..28877,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1033,
            column: 4,
            span: 28877..28878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1033,
            column: 5,
            span: 28878..28879,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1033,
            column: 7,
            span: 28880..28881,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1033,
            column: 0,
            span: 28882..28885,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1034,
            column: 6,
            span: 28886..28891,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1034,
            column: 8,
            span: 28892..28893,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1034,
            column: 10,
            span: 28894..28895,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 1034,
            column: 12,
            span: 28895..28897,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1034,
            column: 13,
            span: 28897..28898,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 1034,
            column: 20,
            span: 28898..28905,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1034,
            column: 21,
            span: 28905..28906,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1034,
            column: 22,
            span: 28906..28907,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1035,
            column: 6,
            span: 28908..28913,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1035,
            column: 8,
            span: 28914..28915,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1035,
            column: 10,
            span: 28916..28917,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1035,
            column: 17,
            span: 28918..28924,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1035,
            column: 18,
            span: 28924..28925,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 1035,
            column: 20,
            span: 28925..28927,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1035,
            column: 21,
            span: 28927..28928,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1035,
            column: 25,
            span: 28928..28932,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1035,
            column: 26,
            span: 28932..28933,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1035,
            column: 27,
            span: 28933..28934,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1035,
            column: 28,
            span: 28934..28935,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"w\"",
        ),
        position: Position {
            line: 1035,
            column: 32,
            span: 28936..28939,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1035,
            column: 33,
            span: 28939..28940,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1035,
            column: 34,
            span: 28940..28941,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1036,
            column: 2,
            span: 28942..28943,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 1036,
            column: 3,
            span: 28943..28944,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        position: Position {
            line: 1036,
            column: 8,
            span: 28944..28949,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1036,
            column: 9,
            span: 28949..28950,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        position: Position {
            line: 1036,
            column: 17,
            span: 28950..28958,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1036,
            column: 18,
            span: 28958..28959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1037,
            column: 2,
            span: 28960..28961,
        },
    },
    Token {
        kind: Colon,
        lexeme: Symbol(
            ":",
        ),
        position: Position {
            line: 1037,
            column: 3,
            span: 28961..28962,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1037,
            column: 8,
            span: 28962..28967,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1037,
            column: 9,
            span: 28967..28968,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1037,
            column: 10,
            span: 28968..28969,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1038,
            column: 9,
            span: 28970..28978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1038,
            column: 10,
            span: 28978..28979,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dofile\"",
        ),
        position: Position {
            line: 1038,
            column: 18,
            span: 28979..28987,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1038,
            column: 19,
            span: 28987..28988,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1038,
            column: 28,
            span: 28989..28997,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1038,
            column: 30,
            span: 28998..28999,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1038,
            column: 31,
            span: 28999..29000,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1039,
            column: 8,
            span: 29003..29008,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1039,
            column: 10,
            span: 29009..29010,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1039,
            column: 12,
            span: 29011..29012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 1039,
            column: 21,
            span: 29013..29021,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1039,
            column: 22,
            span: 29021..29022,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1039,
            column: 23,
            span: 29022..29023,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1039,
            column: 24,
            span: 29023..29024,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1040,
            column: 9,
            span: 29027..29033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1040,
            column: 11,
            span: 29034..29035,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1040,
            column: 15,
            span: 29036..29039,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1040,
            column: 17,
            span: 29040..29041,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1040,
            column: 18,
            span: 29041..29042,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1040,
            column: 19,
            span: 29042..29043,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1041,
            column: 4,
            span: 29044..29047,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1041,
            column: 5,
            span: 29047..29048,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1042,
            column: 7,
            span: 29049..29055,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1042,
            column: 8,
            span: 29055..29056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 1042,
            column: 10,
            span: 29056..29058,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1042,
            column: 11,
            span: 29058..29059,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 1042,
            column: 17,
            span: 29059..29065,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1042,
            column: 18,
            span: 29065..29066,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1042,
            column: 19,
            span: 29066..29067,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1042,
            column: 20,
            span: 29067..29068,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1042,
            column: 21,
            span: 29068..29069,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1043,
            column: 7,
            span: 29070..29076,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1043,
            column: 8,
            span: 29076..29077,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        position: Position {
            line: 1043,
            column: 10,
            span: 29077..29079,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1043,
            column: 11,
            span: 29079..29080,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1043,
            column: 12,
            span: 29080..29081,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1043,
            column: 15,
            span: 29082..29084,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"aaax\"",
        ),
        position: Position {
            line: 1043,
            column: 22,
            span: 29085..29091,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1043,
            column: 23,
            span: 29091..29092,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1048,
            column: 9,
            span: 29119..29127,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1048,
            column: 10,
            span: 29127..29128,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string creation\"",
        ),
        position: Position {
            line: 1048,
            column: 27,
            span: 29128..29145,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1048,
            column: 28,
            span: 29145..29146,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1048,
            column: 37,
            span: 29147..29155,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1048,
            column: 39,
            span: 29156..29157,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1048,
            column: 40,
            span: 29157..29158,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1049,
            column: 8,
            span: 29161..29166,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1049,
            column: 10,
            span: 29167..29168,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1049,
            column: 11,
            span: 29168..29169,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1049,
            column: 13,
            span: 29170..29171,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1049,
            column: 15,
            span: 29172..29173,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1049,
            column: 22,
            span: 29174..29180,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1049,
            column: 23,
            span: 29180..29181,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1049,
            column: 27,
            span: 29181..29185,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1049,
            column: 28,
            span: 29185..29186,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo alo\"",
        ),
        position: Position {
            line: 1049,
            column: 37,
            span: 29186..29195,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1049,
            column: 38,
            span: 29195..29196,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"(a)\"",
        ),
        position: Position {
            line: 1049,
            column: 44,
            span: 29197..29202,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1049,
            column: 45,
            span: 29202..29203,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1049,
            column: 54,
            span: 29204..29212,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1049,
            column: 56,
            span: 29213..29214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1049,
            column: 57,
            span: 29214..29215,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1049,
            column: 58,
            span: 29215..29216,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1049,
            column: 65,
            span: 29217..29223,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1049,
            column: 67,
            span: 29224..29225,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 1049,
            column: 69,
            span: 29225..29227,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        position: Position {
            line: 1049,
            column: 72,
            span: 29227..29230,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1049,
            column: 76,
            span: 29231..29234,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1049,
            column: 77,
            span: 29234..29235,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1050,
            column: 9,
            span: 29238..29244,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1050,
            column: 11,
            span: 29245..29246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1050,
            column: 12,
            span: 29246..29247,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1050,
            column: 15,
            span: 29248..29250,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ablo ablo'",
        ),
        position: Position {
            line: 1050,
            column: 27,
            span: 29251..29262,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1050,
            column: 28,
            span: 29262..29263,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1051,
            column: 4,
            span: 29264..29267,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1051,
            column: 5,
            span: 29267..29268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1053,
            column: 9,
            span: 29270..29278,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1053,
            column: 10,
            span: 29278..29279,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dump/undump\"",
        ),
        position: Position {
            line: 1053,
            column: 23,
            span: 29279..29292,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1053,
            column: 24,
            span: 29292..29293,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1053,
            column: 33,
            span: 29294..29302,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1053,
            column: 35,
            span: 29303..29304,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1053,
            column: 36,
            span: 29304..29305,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1054,
            column: 8,
            span: 29308..29313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1054,
            column: 10,
            span: 29314..29315,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1054,
            column: 12,
            span: 29316..29317,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 1054,
            column: 17,
            span: 29318..29322,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1054,
            column: 18,
            span: 29322..29323,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testprog",
        ),
        position: Position {
            line: 1054,
            column: 26,
            span: 29323..29331,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1054,
            column: 27,
            span: 29331..29332,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1055,
            column: 8,
            span: 29335..29340,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1055,
            column: 10,
            span: 29341..29342,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1055,
            column: 12,
            span: 29343..29344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1055,
            column: 14,
            span: 29345..29346,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1055,
            column: 18,
            span: 29347..29350,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1055,
            column: 25,
            span: 29351..29357,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1055,
            column: 26,
            span: 29357..29358,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dump",
        ),
        position: Position {
            line: 1055,
            column: 30,
            span: 29358..29362,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1055,
            column: 31,
            span: 29362..29363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1055,
            column: 32,
            span: 29363..29364,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1055,
            column: 33,
            span: 29364..29365,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1056,
            column: 4,
            span: 29368..29369,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1056,
            column: 6,
            span: 29370..29371,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1056,
            column: 8,
            span: 29372..29373,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1056,
            column: 12,
            span: 29374..29377,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "load",
        ),
        position: Position {
            line: 1056,
            column: 17,
            span: 29378..29382,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1056,
            column: 18,
            span: 29382..29383,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1056,
            column: 19,
            span: 29383..29384,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1056,
            column: 20,
            span: 29384..29385,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1057,
            column: 9,
            span: 29388..29394,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1057,
            column: 11,
            span: 29395..29396,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1057,
            column: 15,
            span: 29397..29400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1057,
            column: 17,
            span: 29401..29402,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1057,
            column: 18,
            span: 29402..29403,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1057,
            column: 19,
            span: 29403..29404,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1058,
            column: 4,
            span: 29405..29408,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1058,
            column: 5,
            span: 29408..29409,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1060,
            column: 6,
            span: 29411..29416,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1060,
            column: 8,
            span: 29417..29418,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1060,
            column: 10,
            span: 29419..29420,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 1060,
            column: 13,
            span: 29421..29423,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1060,
            column: 14,
            span: 29423..29424,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tmpname",
        ),
        position: Position {
            line: 1060,
            column: 21,
            span: 29424..29431,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1060,
            column: 22,
            span: 29431..29432,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1060,
            column: 23,
            span: 29432..29433,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1061,
            column: 9,
            span: 29434..29442,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1061,
            column: 10,
            span: 29442..29443,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file creation\"",
        ),
        position: Position {
            line: 1061,
            column: 25,
            span: 29443..29458,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1061,
            column: 26,
            span: 29458..29459,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1061,
            column: 35,
            span: 29460..29468,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1061,
            column: 37,
            span: 29469..29470,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1061,
            column: 38,
            span: 29470..29471,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1062,
            column: 8,
            span: 29474..29479,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1062,
            column: 10,
            span: 29480..29481,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1062,
            column: 12,
            span: 29482..29483,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1062,
            column: 19,
            span: 29484..29490,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1062,
            column: 20,
            span: 29490..29491,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 1062,
            column: 22,
            span: 29491..29493,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1062,
            column: 23,
            span: 29493..29494,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1062,
            column: 27,
            span: 29494..29498,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1062,
            column: 28,
            span: 29498..29499,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1062,
            column: 29,
            span: 29499..29500,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1062,
            column: 30,
            span: 29500..29501,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'w'",
        ),
        position: Position {
            line: 1062,
            column: 34,
            span: 29502..29505,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1062,
            column: 35,
            span: 29505..29506,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1062,
            column: 36,
            span: 29506..29507,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1063,
            column: 9,
            span: 29510..29516,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1063,
            column: 11,
            span: 29517..29518,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1063,
            column: 14,
            span: 29518..29521,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 1063,
            column: 17,
            span: 29522..29524,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1063,
            column: 18,
            span: 29524..29525,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "open",
        ),
        position: Position {
            line: 1063,
            column: 22,
            span: 29525..29529,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"nomenaoexistente\"",
        ),
        position: Position {
            line: 1063,
            column: 40,
            span: 29529..29547,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1063,
            column: 41,
            span: 29547..29548,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        position: Position {
            line: 1064,
            column: 5,
            span: 29551..29553,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1064,
            column: 6,
            span: 29553..29554,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1064,
            column: 11,
            span: 29554..29559,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1064,
            column: 12,
            span: 29559..29560,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        position: Position {
            line: 1064,
            column: 13,
            span: 29560..29561,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1064,
            column: 14,
            span: 29561..29562,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1064,
            column: 15,
            span: 29562..29563,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1065,
            column: 9,
            span: 29566..29572,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1065,
            column: 13,
            span: 29573..29576,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadfile",
        ),
        position: Position {
            line: 1065,
            column: 22,
            span: 29577..29585,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'nomenaoexistente'",
        ),
        position: Position {
            line: 1065,
            column: 40,
            span: 29585..29603,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1066,
            column: 4,
            span: 29604..29607,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1066,
            column: 5,
            span: 29607..29608,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1067,
            column: 7,
            span: 29609..29615,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1067,
            column: 8,
            span: 29615..29616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        position: Position {
            line: 1067,
            column: 10,
            span: 29616..29618,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1067,
            column: 11,
            span: 29618..29619,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        position: Position {
            line: 1067,
            column: 17,
            span: 29619..29625,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1067,
            column: 18,
            span: 29625..29626,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        position: Position {
            line: 1067,
            column: 19,
            span: 29626..29627,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1067,
            column: 20,
            span: 29627..29628,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1067,
            column: 21,
            span: 29628..29629,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1069,
            column: 9,
            span: 29631..29639,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1069,
            column: 10,
            span: 29639..29640,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table creation\"",
        ),
        position: Position {
            line: 1069,
            column: 26,
            span: 29640..29656,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1069,
            column: 27,
            span: 29656..29657,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1069,
            column: 36,
            span: 29658..29666,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1069,
            column: 38,
            span: 29667..29668,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1069,
            column: 39,
            span: 29668..29669,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1070,
            column: 8,
            span: 29672..29677,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1070,
            column: 10,
            span: 29678..29679,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1070,
            column: 11,
            span: 29679..29680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1070,
            column: 15,
            span: 29681..29684,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1070,
            column: 17,
            span: 29685..29686,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1070,
            column: 19,
            span: 29687..29688,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1070,
            column: 20,
            span: 29688..29689,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1070,
            column: 21,
            span: 29689..29690,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1070,
            column: 0,
            span: 29690..29693,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1071,
            column: 6,
            span: 29696..29699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1071,
            column: 8,
            span: 29700..29701,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1071,
            column: 9,
            span: 29701..29702,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1071,
            column: 10,
            span: 29701..29703,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1071,
            column: 11,
            span: 29703..29704,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1071,
            column: 14,
            span: 29704..29707,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1071,
            column: 17,
            span: 29708..29710,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1071,
            column: 19,
            span: 29711..29712,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1071,
            column: 20,
            span: 29712..29713,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1071,
            column: 21,
            span: 29713..29714,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1071,
            column: 22,
            span: 29714..29715,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1071,
            column: 24,
            span: 29716..29717,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1071,
            column: 26,
            span: 29718..29719,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1071,
            column: 27,
            span: 29719..29720,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1071,
            column: 29,
            span: 29721..29722,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1071,
            column: 30,
            span: 29722..29723,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1071,
            column: 31,
            span: 29723..29724,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 1071,
            column: 33,
            span: 29724..29726,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 1071,
            column: 36,
            span: 29726..29729,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1071,
            column: 37,
            span: 29729..29730,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1071,
            column: 39,
            span: 29731..29732,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1071,
            column: 41,
            span: 29733..29734,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1071,
            column: 42,
            span: 29734..29735,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1071,
            column: 0,
            span: 29736..29739,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1072,
            column: 9,
            span: 29742..29748,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1072,
            column: 11,
            span: 29749..29750,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 1072,
            column: 15,
            span: 29750..29754,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1072,
            column: 16,
            span: 29754..29755,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1072,
            column: 17,
            span: 29755..29756,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1072,
            column: 18,
            span: 29756..29757,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1072,
            column: 21,
            span: 29757..29760,
        },
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        position: Position {
            line: 1072,
            column: 23,
            span: 29760..29762,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        position: Position {
            line: 1072,
            column: 26,
            span: 29762..29765,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1072,
            column: 27,
            span: 29765..29766,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1072,
            column: 28,
            span: 29766..29767,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1072,
            column: 31,
            span: 29768..29770,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 1072,
            column: 39,
            span: 29771..29778,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1072,
            column: 43,
            span: 29779..29782,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1072,
            column: 45,
            span: 29783..29784,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1072,
            column: 46,
            span: 29784..29785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1072,
            column: 49,
            span: 29785..29788,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1072,
            column: 50,
            span: 29788..29789,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1072,
            column: 53,
            span: 29790..29792,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1072,
            column: 57,
            span: 29793..29796,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1072,
            column: 58,
            span: 29796..29797,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1073,
            column: 4,
            span: 29798..29801,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1073,
            column: 5,
            span: 29801..29802,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1075,
            column: 9,
            span: 29804..29812,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1075,
            column: 10,
            span: 29812..29813,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"constructors\"",
        ),
        position: Position {
            line: 1075,
            column: 24,
            span: 29813..29827,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1075,
            column: 25,
            span: 29827..29828,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1075,
            column: 34,
            span: 29829..29837,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1075,
            column: 36,
            span: 29838..29839,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1075,
            column: 37,
            span: 29839..29840,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1076,
            column: 8,
            span: 29843..29848,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1076,
            column: 10,
            span: 29849..29850,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1076,
            column: 12,
            span: 29851..29852,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1076,
            column: 14,
            span: 29853..29854,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1076,
            column: 16,
            span: 29853..29856,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1076,
            column: 17,
            span: 29856..29857,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1076,
            column: 20,
            span: 29857..29860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1076,
            column: 21,
            span: 29860..29861,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1076,
            column: 24,
            span: 29861..29864,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1076,
            column: 25,
            span: 29864..29865,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "40",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1076,
            column: 28,
            span: 29865..29868,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1076,
            column: 29,
            span: 29868..29869,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "50",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1076,
            column: 32,
            span: 29869..29872,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1076,
            column: 33,
            span: 29872..29873,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1076,
            column: 35,
            span: 29874..29875,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1076,
            column: 36,
            span: 29875..29876,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1076,
            column: 37,
            span: 29875..29877,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1076,
            column: 38,
            span: 29877..29878,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1076,
            column: 40,
            span: 29879..29880,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1076,
            column: 41,
            span: 29880..29881,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1076,
            column: 42,
            span: 29880..29882,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1076,
            column: 43,
            span: 29882..29883,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1076,
            column: 45,
            span: 29884..29885,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1076,
            column: 46,
            span: 29885..29886,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1076,
            column: 47,
            span: 29885..29887,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1076,
            column: 48,
            span: 29887..29888,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1076,
            column: 50,
            span: 29889..29890,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1076,
            column: 51,
            span: 29890..29891,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1076,
            column: 52,
            span: 29890..29892,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1076,
            column: 53,
            span: 29892..29893,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 1076,
            column: 55,
            span: 29894..29895,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1076,
            column: 56,
            span: 29895..29896,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1076,
            column: 57,
            span: 29895..29897,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1076,
            column: 58,
            span: 29897..29898,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1077,
            column: 9,
            span: 29901..29907,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1077,
            column: 11,
            span: 29908..29909,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 1077,
            column: 15,
            span: 29909..29913,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1077,
            column: 16,
            span: 29913..29914,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1077,
            column: 17,
            span: 29914..29915,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1077,
            column: 18,
            span: 29915..29916,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1077,
            column: 21,
            span: 29917..29919,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        position: Position {
            line: 1077,
            column: 29,
            span: 29920..29927,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1077,
            column: 33,
            span: 29928..29931,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1077,
            column: 35,
            span: 29932..29933,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1077,
            column: 36,
            span: 29933..29934,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        position: Position {
            line: 1077,
            column: 37,
            span: 29934..29935,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1077,
            column: 40,
            span: 29936..29938,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1077,
            column: 42,
            span: 29938..29940,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1077,
            column: 43,
            span: 29940..29941,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1078,
            column: 4,
            span: 29942..29945,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1078,
            column: 5,
            span: 29945..29946,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1080,
            column: 6,
            span: 29948..29953,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1080,
            column: 8,
            span: 29954..29955,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1080,
            column: 10,
            span: 29956..29957,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1080,
            column: 0,
            span: 29957..29959,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1081,
            column: 6,
            span: 29960..29965,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1081,
            column: 8,
            span: 29966..29967,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1081,
            column: 0,
            span: 29968..29971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1082,
            column: 9,
            span: 29972..29980,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1082,
            column: 10,
            span: 29980..29981,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"closure creation\"",
        ),
        position: Position {
            line: 1082,
            column: 28,
            span: 29981..29999,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1082,
            column: 29,
            span: 29999..30000,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1082,
            column: 38,
            span: 30001..30009,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1082,
            column: 40,
            span: 30010..30011,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1082,
            column: 41,
            span: 30011..30012,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1083,
            column: 11,
            span: 30015..30023,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1083,
            column: 17,
            span: 30024..30029,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1083,
            column: 19,
            span: 30030..30031,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1083,
            column: 20,
            span: 30031..30032,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1083,
            column: 21,
            span: 30032..30033,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1083,
            column: 22,
            span: 30033..30034,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1083,
            column: 23,
            span: 30034..30035,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1084,
            column: 10,
            span: 30039..30045,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1084,
            column: 19,
            span: 30046..30054,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1084,
            column: 21,
            span: 30055..30056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1084,
            column: 22,
            span: 30056..30057,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1084,
            column: 23,
            span: 30057..30058,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1084,
            column: 30,
            span: 30059..30065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1084,
            column: 32,
            span: 30066..30067,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1084,
            column: 33,
            span: 30067..30068,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1084,
            column: 34,
            span: 30068..30069,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1084,
            column: 35,
            span: 30069..30070,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1084,
            column: 36,
            span: 30070..30071,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1084,
            column: 37,
            span: 30071..30072,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1084,
            column: 38,
            span: 30072..30073,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1084,
            column: 0,
            span: 30074..30077,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1085,
            column: 0,
            span: 30080..30083,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1086,
            column: 9,
            span: 30086..30092,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1086,
            column: 11,
            span: 30093..30094,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        position: Position {
            line: 1086,
            column: 16,
            span: 30094..30099,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1086,
            column: 17,
            span: 30099..30100,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1086,
            column: 18,
            span: 30099..30101,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1086,
            column: 19,
            span: 30101..30102,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1086,
            column: 20,
            span: 30101..30103,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1086,
            column: 21,
            span: 30103..30104,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1086,
            column: 22,
            span: 30104..30105,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1086,
            column: 23,
            span: 30104..30106,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1086,
            column: 24,
            span: 30106..30107,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1086,
            column: 27,
            span: 30108..30110,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1086,
            column: 30,
            span: 30110..30113,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1086,
            column: 31,
            span: 30113..30114,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1087,
            column: 4,
            span: 30115..30118,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1087,
            column: 5,
            span: 30118..30119,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1089,
            column: 9,
            span: 30121..30129,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1089,
            column: 10,
            span: 30129..30130,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutines\"",
        ),
        position: Position {
            line: 1089,
            column: 22,
            span: 30130..30142,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1089,
            column: 23,
            span: 30142..30143,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1089,
            column: 32,
            span: 30144..30152,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1089,
            column: 34,
            span: 30153..30154,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1089,
            column: 35,
            span: 30154..30155,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1090,
            column: 8,
            span: 30158..30163,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1090,
            column: 10,
            span: 30164..30165,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1090,
            column: 12,
            span: 30166..30167,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1090,
            column: 22,
            span: 30168..30177,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1090,
            column: 23,
            span: 30177..30178,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "wrap",
        ),
        position: Position {
            line: 1090,
            column: 27,
            span: 30178..30182,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1090,
            column: 28,
            span: 30182..30183,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1090,
            column: 36,
            span: 30183..30191,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1090,
            column: 38,
            span: 30192..30193,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1090,
            column: 39,
            span: 30193..30194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        position: Position {
            line: 1091,
            column: 24,
            span: 30209..30218,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1091,
            column: 25,
            span: 30218..30219,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "yield",
        ),
        position: Position {
            line: 1091,
            column: 30,
            span: 30219..30224,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1091,
            column: 31,
            span: 30224..30225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1091,
            column: 37,
            span: 30225..30231,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1091,
            column: 38,
            span: 30231..30232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        position: Position {
            line: 1091,
            column: 41,
            span: 30232..30235,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1091,
            column: 42,
            span: 30235..30236,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        position: Position {
            line: 1091,
            column: 45,
            span: 30236..30239,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1091,
            column: 46,
            span: 30239..30240,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1091,
            column: 49,
            span: 30240..30243,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1091,
            column: 50,
            span: 30243..30244,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1091,
            column: 51,
            span: 30244..30245,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1092,
            column: 21,
            span: 30260..30266,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1092,
            column: 23,
            span: 30267..30268,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1092,
            column: 24,
            span: 30268..30269,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1093,
            column: 16,
            span: 30282..30285,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1093,
            column: 17,
            span: 30285..30286,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1094,
            column: 9,
            span: 30289..30295,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1094,
            column: 10,
            span: 30295..30296,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        position: Position {
            line: 1094,
            column: 16,
            span: 30296..30302,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1094,
            column: 17,
            span: 30302..30303,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "len",
        ),
        position: Position {
            line: 1094,
            column: 20,
            span: 30303..30306,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1094,
            column: 21,
            span: 30306..30307,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1094,
            column: 22,
            span: 30307..30308,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1094,
            column: 23,
            span: 30308..30309,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1094,
            column: 24,
            span: 30309..30310,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1094,
            column: 25,
            span: 30310..30311,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1094,
            column: 28,
            span: 30312..30314,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1094,
            column: 31,
            span: 30314..30317,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1094,
            column: 32,
            span: 30317..30318,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1095,
            column: 9,
            span: 30321..30327,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1095,
            column: 11,
            span: 30328..30329,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1095,
            column: 12,
            span: 30329..30330,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1095,
            column: 13,
            span: 30330..30331,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1096,
            column: 4,
            span: 30332..30335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1096,
            column: 5,
            span: 30335..30336,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1098,
            column: 3,
            span: 30338..30340,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1099,
            column: 8,
            span: 30365..30370,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1099,
            column: 12,
            span: 30371..30374,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1099,
            column: 14,
            span: 30375..30376,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1099,
            column: 0,
            span: 30376..30380,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1100,
            column: 8,
            span: 30383..30388,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1100,
            column: 10,
            span: 30389..30390,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1100,
            column: 12,
            span: 30391..30392,
        },
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        position: Position {
            line: 1100,
            column: 14,
            span: 30393..30394,
        },
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        position: Position {
            line: 1100,
            column: 15,
            span: 30394..30395,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1100,
            column: 16,
            span: 30395..30396,
        },
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        position: Position {
            line: 1100,
            column: 20,
            span: 30397..30400,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1100,
            column: 22,
            span: 30401..30402,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1100,
            column: 24,
            span: 30403..30404,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1100,
            column: 26,
            span: 30404..30406,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1100,
            column: 27,
            span: 30406..30407,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1100,
            column: 31,
            span: 30408..30411,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1100,
            column: 34,
            span: 30412..30414,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1100,
            column: 36,
            span: 30415..30416,
        },
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        position: Position {
            line: 1100,
            column: 37,
            span: 30416..30417,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        position: Position {
            line: 1100,
            column: 38,
            span: 30417..30418,
        },
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        position: Position {
            line: 1100,
            column: 39,
            span: 30418..30419,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1100,
            column: 41,
            span: 30420..30421,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"01234567890123456789\"",
        ),
        position: Position {
            line: 1100,
            column: 64,
            span: 30422..30444,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1100,
            column: 0,
            span: 30445..30448,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testamem",
        ),
        position: Position {
            line: 1101,
            column: 11,
            span: 30451..30459,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1101,
            column: 12,
            span: 30459..30460,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"auxiliary buffer\"",
        ),
        position: Position {
            line: 1101,
            column: 30,
            span: 30460..30478,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1101,
            column: 31,
            span: 30478..30479,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1101,
            column: 40,
            span: 30480..30488,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1101,
            column: 42,
            span: 30489..30490,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1101,
            column: 43,
            span: 30490..30491,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1102,
            column: 11,
            span: 30496..30502,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1102,
            column: 13,
            span: 30503..30504,
        },
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        position: Position {
            line: 1102,
            column: 14,
            span: 30504..30505,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        position: Position {
            line: 1102,
            column: 19,
            span: 30505..30510,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1102,
            column: 20,
            span: 30510..30511,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        position: Position {
            line: 1102,
            column: 26,
            span: 30511..30517,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1102,
            column: 27,
            span: 30517..30518,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1102,
            column: 28,
            span: 30518..30519,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1102,
            column: 29,
            span: 30519..30520,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\",\"",
        ),
        position: Position {
            line: 1102,
            column: 33,
            span: 30521..30524,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1102,
            column: 34,
            span: 30524..30525,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1102,
            column: 37,
            span: 30526..30528,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1102,
            column: 40,
            span: 30528..30531,
        },
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        position: Position {
            line: 1102,
            column: 41,
            span: 30531..30532,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1102,
            column: 44,
            span: 30532..30535,
        },
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        position: Position {
            line: 1102,
            column: 46,
            span: 30536..30537,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lim",
        ),
        position: Position {
            line: 1102,
            column: 50,
            span: 30538..30541,
        },
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        position: Position {
            line: 1102,
            column: 52,
            span: 30542..30543,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1102,
            column: 54,
            span: 30543..30545,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1102,
            column: 55,
            span: 30545..30546,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1103,
            column: 6,
            span: 30549..30552,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1103,
            column: 7,
            span: 30552..30553,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1104,
            column: 0,
            span: 30554..30557,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1106,
            column: 6,
            span: 30559..30564,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        position: Position {
            line: 1106,
            column: 9,
            span: 30564..30567,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1109,
            column: 6,
            span: 30602..30607,
        },
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        position: Position {
            line: 1109,
            column: 15,
            span: 30608..30616,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1109,
            column: 20,
            span: 30617..30621,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1109,
            column: 22,
            span: 30622..30623,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1109,
            column: 23,
            span: 30623..30624,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1109,
            column: 24,
            span: 30624..30625,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1109,
            column: 26,
            span: 30626..30627,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1109,
            column: 27,
            span: 30627..30628,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1109,
            column: 29,
            span: 30629..30630,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1109,
            column: 30,
            span: 30630..30631,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1110,
            column: 4,
            span: 30634..30635,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1110,
            column: 5,
            span: 30635..30636,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1110,
            column: 7,
            span: 30637..30638,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1110,
            column: 9,
            span: 30639..30640,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1110,
            column: 11,
            span: 30641..30642,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1110,
            column: 12,
            span: 30642..30643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1110,
            column: 17,
            span: 30643..30648,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1110,
            column: 18,
            span: 30648..30649,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gsub 2 3 4; gettop; return 2\"",
        ),
        position: Position {
            line: 1110,
            column: 48,
            span: 30649..30679,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1110,
            column: 49,
            span: 30679..30680,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1110,
            column: 51,
            span: 30681..30682,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1110,
            column: 52,
            span: 30682..30683,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1110,
            column: 54,
            span: 30684..30685,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1110,
            column: 55,
            span: 30685..30686,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        position: Position {
            line: 1110,
            column: 57,
            span: 30687..30688,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1110,
            column: 58,
            span: 30688..30689,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1111,
            column: 9,
            span: 30692..30698,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1111,
            column: 10,
            span: 30698..30699,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        position: Position {
            line: 1111,
            column: 11,
            span: 30699..30700,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1111,
            column: 14,
            span: 30701..30703,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1111,
            column: 16,
            span: 30703..30705,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1111,
            column: 17,
            span: 30705..30706,
        },
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        position: Position {
            line: 1112,
            column: 9,
            span: 30709..30715,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        position: Position {
            line: 1112,
            column: 0,
            span: 30716..30717,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1113,
            column: 0,
            span: 30718..30721,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1115,
            column: 7,
            span: 30723..30729,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1115,
            column: 8,
            span: 30729..30730,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1115,
            column: 12,
            span: 30730..30734,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1115,
            column: 13,
            span: 30734..30735,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo.alo.uhuh.\"",
        ),
        position: Position {
            line: 1115,
            column: 28,
            span: 30735..30750,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1115,
            column: 29,
            span: 30750..30751,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 1115,
            column: 33,
            span: 30752..30755,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1115,
            column: 34,
            span: 30755..30756,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        position: Position {
            line: 1115,
            column: 39,
            span: 30757..30761,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1115,
            column: 40,
            span: 30761..30762,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1115,
            column: 43,
            span: 30763..30765,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo//alo//uhuh//\"",
        ),
        position: Position {
            line: 1115,
            column: 62,
            span: 30766..30784,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1115,
            column: 63,
            span: 30784..30785,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1116,
            column: 7,
            span: 30786..30792,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1116,
            column: 8,
            span: 30792..30793,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1116,
            column: 12,
            span: 30793..30797,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1116,
            column: 13,
            span: 30797..30798,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo.alo.uhuh.\"",
        ),
        position: Position {
            line: 1116,
            column: 28,
            span: 30798..30813,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1116,
            column: 29,
            span: 30813..30814,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 1116,
            column: 35,
            span: 30815..30820,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1116,
            column: 36,
            span: 30820..30821,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        position: Position {
            line: 1116,
            column: 41,
            span: 30822..30826,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1116,
            column: 42,
            span: 30826..30827,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1116,
            column: 45,
            span: 30828..30830,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//.//.uhuh.\"",
        ),
        position: Position {
            line: 1116,
            column: 59,
            span: 30831..30844,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1116,
            column: 60,
            span: 30844..30845,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1117,
            column: 7,
            span: 30846..30852,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1117,
            column: 8,
            span: 30852..30853,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1117,
            column: 12,
            span: 30853..30857,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1117,
            column: 13,
            span: 30857..30858,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 1117,
            column: 15,
            span: 30858..30860,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1117,
            column: 16,
            span: 30860..30861,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        position: Position {
            line: 1117,
            column: 22,
            span: 30862..30867,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1117,
            column: 23,
            span: 30867..30868,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"//\"",
        ),
        position: Position {
            line: 1117,
            column: 28,
            span: 30869..30873,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1117,
            column: 29,
            span: 30873..30874,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1117,
            column: 32,
            span: 30875..30877,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 1117,
            column: 35,
            span: 30878..30880,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1117,
            column: 36,
            span: 30880..30881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1118,
            column: 7,
            span: 30882..30888,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1118,
            column: 8,
            span: 30888..30889,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1118,
            column: 12,
            span: 30889..30893,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1118,
            column: 13,
            span: 30893..30894,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        position: Position {
            line: 1118,
            column: 18,
            span: 30894..30899,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1118,
            column: 19,
            span: 30899..30900,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        position: Position {
            line: 1118,
            column: 23,
            span: 30901..30904,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1118,
            column: 24,
            span: 30904..30905,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/.\"",
        ),
        position: Position {
            line: 1118,
            column: 29,
            span: 30906..30910,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1118,
            column: 30,
            span: 30910..30911,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1118,
            column: 33,
            span: 30912..30914,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/././.\"",
        ),
        position: Position {
            line: 1118,
            column: 42,
            span: 30915..30923,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1118,
            column: 43,
            span: 30923..30924,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1119,
            column: 7,
            span: 30925..30931,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1119,
            column: 8,
            span: 30931..30932,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        position: Position {
            line: 1119,
            column: 12,
            span: 30932..30936,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1119,
            column: 13,
            span: 30936..30937,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        position: Position {
            line: 1119,
            column: 18,
            span: 30937..30942,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1119,
            column: 19,
            span: 30942..30943,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"...\"",
        ),
        position: Position {
            line: 1119,
            column: 25,
            span: 30944..30949,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1119,
            column: 26,
            span: 30949..30950,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 1119,
            column: 29,
            span: 30951..30953,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1119,
            column: 30,
            span: 30953..30954,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1119,
            column: 33,
            span: 30955..30957,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        position: Position {
            line: 1119,
            column: 36,
            span: 30958..30960,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1119,
            column: 37,
            span: 30960..30961,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1123,
            column: 6,
            span: 30993..30998,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1123,
            column: 14,
            span: 30999..31006,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1123,
            column: 15,
            span: 31006..31007,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1123,
            column: 19,
            span: 31008..31011,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1123,
            column: 20,
            span: 31011..31012,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1123,
            column: 24,
            span: 31013..31016,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1123,
            column: 26,
            span: 31017..31018,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1123,
            column: 28,
            span: 31019..31020,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1123,
            column: 29,
            span: 31020..31021,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1123,
            column: 34,
            span: 31021..31026,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1123,
            column: 35,
            span: 31026..31027,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newmetatable xuxu; gettop; return 3\"",
        ),
        position: Position {
            line: 1123,
            column: 72,
            span: 31027..31064,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1123,
            column: 73,
            span: 31064..31065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1124,
            column: 7,
            span: 31066..31072,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1124,
            column: 8,
            span: 31072..31073,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        position: Position {
            line: 1124,
            column: 12,
            span: 31073..31077,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1124,
            column: 13,
            span: 31077..31078,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1124,
            column: 20,
            span: 31078..31085,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1124,
            column: 21,
            span: 31085..31086,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1124,
            column: 24,
            span: 31087..31089,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        position: Position {
            line: 1124,
            column: 32,
            span: 31090..31097,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1124,
            column: 36,
            span: 31098..31101,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1124,
            column: 40,
            span: 31102..31105,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1124,
            column: 44,
            span: 31106..31109,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1124,
            column: 48,
            span: 31110..31113,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1124,
            column: 51,
            span: 31114..31116,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1124,
            column: 53,
            span: 31116..31118,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1124,
            column: 54,
            span: 31118..31119,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1125,
            column: 6,
            span: 31120..31125,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1125,
            column: 8,
            span: 31126..31127,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1125,
            column: 9,
            span: 31127..31128,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1125,
            column: 13,
            span: 31129..31132,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1125,
            column: 14,
            span: 31132..31133,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1125,
            column: 18,
            span: 31134..31137,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1125,
            column: 20,
            span: 31138..31139,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1125,
            column: 22,
            span: 31140..31141,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1125,
            column: 23,
            span: 31141..31142,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1125,
            column: 28,
            span: 31142..31147,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1125,
            column: 29,
            span: 31147..31148,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newmetatable xuxu; gettop; return 3\"",
        ),
        position: Position {
            line: 1125,
            column: 66,
            span: 31148..31185,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1125,
            column: 67,
            span: 31185..31186,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1126,
            column: 7,
            span: 31187..31193,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1126,
            column: 8,
            span: 31193..31194,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1126,
            column: 15,
            span: 31194..31201,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1126,
            column: 18,
            span: 31202..31204,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1126,
            column: 20,
            span: 31205..31206,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1126,
            column: 24,
            span: 31207..31210,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1126,
            column: 28,
            span: 31211..31214,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1126,
            column: 32,
            span: 31215..31218,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1126,
            column: 36,
            span: 31219..31222,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1126,
            column: 40,
            span: 31223..31226,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1126,
            column: 43,
            span: 31227..31229,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1126,
            column: 45,
            span: 31229..31231,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1126,
            column: 46,
            span: 31231..31232,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1127,
            column: 2,
            span: 31233..31234,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1127,
            column: 3,
            span: 31234..31235,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1127,
            column: 7,
            span: 31236..31239,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1127,
            column: 8,
            span: 31239..31240,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1127,
            column: 12,
            span: 31241..31244,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1127,
            column: 14,
            span: 31245..31246,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1127,
            column: 16,
            span: 31247..31248,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1127,
            column: 17,
            span: 31248..31249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1127,
            column: 22,
            span: 31249..31254,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1127,
            column: 23,
            span: 31254..31255,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"newmetatable xuxu1; gettop; return 3\"",
        ),
        position: Position {
            line: 1127,
            column: 61,
            span: 31255..31293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1127,
            column: 62,
            span: 31293..31294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1128,
            column: 7,
            span: 31295..31301,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1128,
            column: 8,
            span: 31301..31302,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1128,
            column: 15,
            span: 31302..31309,
        },
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        position: Position {
            line: 1128,
            column: 18,
            span: 31310..31312,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1128,
            column: 20,
            span: 31313..31314,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1128,
            column: 24,
            span: 31315..31318,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        position: Position {
            line: 1128,
            column: 28,
            span: 31319..31322,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1128,
            column: 32,
            span: 31323..31326,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1128,
            column: 36,
            span: 31327..31330,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1128,
            column: 39,
            span: 31331..31333,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1128,
            column: 41,
            span: 31333..31335,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1128,
            column: 42,
            span: 31335..31336,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1130,
            column: 2,
            span: 31338..31339,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1130,
            column: 4,
            span: 31340..31341,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1130,
            column: 6,
            span: 31342..31343,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1130,
            column: 7,
            span: 31343..31344,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 1130,
            column: 18,
            span: 31344..31355,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1130,
            column: 19,
            span: 31355..31356,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1130,
            column: 20,
            span: 31355..31357,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1130,
            column: 21,
            span: 31357..31358,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1130,
            column: 22,
            span: 31358..31359,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1131,
            column: 2,
            span: 31360..31361,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1131,
            column: 4,
            span: 31362..31363,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1131,
            column: 6,
            span: 31364..31365,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1131,
            column: 7,
            span: 31365..31366,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        position: Position {
            line: 1131,
            column: 18,
            span: 31366..31377,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1131,
            column: 19,
            span: 31377..31378,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1131,
            column: 20,
            span: 31377..31379,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1131,
            column: 21,
            span: 31379..31380,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1131,
            column: 22,
            span: 31380..31381,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1132,
            column: 2,
            span: 31382..31383,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1132,
            column: 3,
            span: 31383..31384,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1132,
            column: 8,
            span: 31384..31389,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1132,
            column: 9,
            span: 31389..31390,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pushstring xuxu; gettable R; setmetatable 2\"",
        ),
        position: Position {
            line: 1132,
            column: 54,
            span: 31390..31435,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1132,
            column: 55,
            span: 31435..31436,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1132,
            column: 57,
            span: 31437..31438,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1132,
            column: 58,
            span: 31438..31439,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1133,
            column: 7,
            span: 31440..31446,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1133,
            column: 8,
            span: 31446..31447,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        position: Position {
            line: 1133,
            column: 20,
            span: 31447..31459,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1133,
            column: 21,
            span: 31459..31460,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1133,
            column: 22,
            span: 31460..31461,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1133,
            column: 23,
            span: 31461..31462,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1133,
            column: 26,
            span: 31463..31465,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1133,
            column: 34,
            span: 31466..31473,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1133,
            column: 35,
            span: 31473..31474,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1137,
            column: 6,
            span: 31523..31528,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1137,
            column: 11,
            span: 31529..31533,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1137,
            column: 12,
            span: 31533..31534,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1137,
            column: 17,
            span: 31535..31539,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1137,
            column: 18,
            span: 31539..31540,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1137,
            column: 22,
            span: 31541..31544,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1137,
            column: 24,
            span: 31545..31546,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1137,
            column: 26,
            span: 31547..31548,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1137,
            column: 27,
            span: 31548..31549,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1137,
            column: 32,
            span: 31549..31554,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1137,
            column: 33,
            span: 31554..31555,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu\n   \t \t\t\t  testudata 2 xuxu\n\t\t\t\t  gettop\n\t\t\t\t  return 3]]",
        ),
        position: Position {
            line: 1140,
            column: 17,
            span: 31555..31631,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1140,
            column: 18,
            span: 31631..31632,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1140,
            column: 20,
            span: 31633..31634,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1140,
            column: 21,
            span: 31634..31635,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1141,
            column: 7,
            span: 31636..31642,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1141,
            column: 8,
            span: 31642..31643,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1141,
            column: 12,
            span: 31643..31647,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1141,
            column: 16,
            span: 31648..31651,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1141,
            column: 21,
            span: 31652..31656,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1141,
            column: 25,
            span: 31657..31660,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1141,
            column: 29,
            span: 31661..31664,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1141,
            column: 32,
            span: 31665..31667,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1141,
            column: 34,
            span: 31667..31669,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1141,
            column: 35,
            span: 31669..31670,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1144,
            column: 5,
            span: 31691..31695,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1144,
            column: 6,
            span: 31695..31696,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1144,
            column: 11,
            span: 31697..31701,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1144,
            column: 12,
            span: 31701..31702,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1144,
            column: 16,
            span: 31703..31706,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1144,
            column: 18,
            span: 31707..31708,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1144,
            column: 20,
            span: 31709..31710,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1144,
            column: 21,
            span: 31710..31711,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1144,
            column: 26,
            span: 31711..31716,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1144,
            column: 27,
            span: 31716..31717,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu1\n\t\t\t    testudata 2 xuxu1\n\t\t\t    gettop\n\t\t\t    return 3]]",
        ),
        position: Position {
            line: 1147,
            column: 18,
            span: 31717..31794,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1147,
            column: 19,
            span: 31794..31795,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1147,
            column: 21,
            span: 31796..31797,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1147,
            column: 22,
            span: 31797..31798,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1148,
            column: 7,
            span: 31799..31805,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1148,
            column: 8,
            span: 31805..31806,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1148,
            column: 11,
            span: 31806..31809,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1148,
            column: 16,
            span: 31810..31814,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1148,
            column: 20,
            span: 31815..31818,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1148,
            column: 24,
            span: 31819..31822,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1148,
            column: 29,
            span: 31823..31827,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1148,
            column: 33,
            span: 31828..31831,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1148,
            column: 37,
            span: 31832..31835,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1148,
            column: 40,
            span: 31836..31838,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1148,
            column: 42,
            span: 31838..31840,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1148,
            column: 43,
            span: 31840..31841,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1151,
            column: 5,
            span: 31864..31868,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1151,
            column: 6,
            span: 31868..31869,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1151,
            column: 11,
            span: 31870..31874,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1151,
            column: 12,
            span: 31874..31875,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1151,
            column: 16,
            span: 31876..31879,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1151,
            column: 18,
            span: 31880..31881,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1151,
            column: 20,
            span: 31882..31883,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1151,
            column: 21,
            span: 31883..31884,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1151,
            column: 26,
            span: 31884..31889,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1151,
            column: 27,
            span: 31889..31890,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu2\n\t\t\t    testudata 2 xuxu2\n\t\t\t    gettop\n\t\t\t    return 3]]",
        ),
        position: Position {
            line: 1154,
            column: 18,
            span: 31890..31967,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1154,
            column: 19,
            span: 31967..31968,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        position: Position {
            line: 1154,
            column: 21,
            span: 31969..31970,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1154,
            column: 22,
            span: 31970..31971,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1155,
            column: 7,
            span: 31972..31978,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1155,
            column: 8,
            span: 31978..31979,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1155,
            column: 11,
            span: 31979..31982,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1155,
            column: 16,
            span: 31983..31987,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1155,
            column: 20,
            span: 31988..31991,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1155,
            column: 24,
            span: 31992..31995,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1155,
            column: 29,
            span: 31996..32000,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1155,
            column: 33,
            span: 32001..32004,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1155,
            column: 37,
            span: 32005..32008,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1155,
            column: 40,
            span: 32009..32011,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1155,
            column: 42,
            span: 32011..32013,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1155,
            column: 43,
            span: 32013..32014,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1158,
            column: 5,
            span: 32045..32049,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1158,
            column: 6,
            span: 32049..32050,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1158,
            column: 11,
            span: 32051..32055,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1158,
            column: 12,
            span: 32055..32056,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1158,
            column: 16,
            span: 32057..32060,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1158,
            column: 18,
            span: 32061..32062,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        position: Position {
            line: 1158,
            column: 20,
            span: 32063..32064,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1158,
            column: 21,
            span: 32064..32065,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "testC",
        ),
        position: Position {
            line: 1158,
            column: 26,
            span: 32065..32070,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1158,
            column: 27,
            span: 32070..32071,
        },
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[testudata -1 xuxu\n\t\t\t    testudata 2 xuxu\n\t\t\t    gettop\n\t\t\t    return 3]]",
        ),
        position: Position {
            line: 1161,
            column: 18,
            span: 32071..32146,
        },
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        position: Position {
            line: 1161,
            column: 19,
            span: 32146..32147,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        position: Position {
            line: 1161,
            column: 21,
            span: 32148..32149,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1161,
            column: 22,
            span: 32149..32150,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1162,
            column: 7,
            span: 32151..32157,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1162,
            column: 8,
            span: 32157..32158,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1162,
            column: 11,
            span: 32158..32161,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res1",
        ),
        position: Position {
            line: 1162,
            column: 16,
            span: 32162..32166,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1162,
            column: 20,
            span: 32167..32170,
        },
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        position: Position {
            line: 1162,
            column: 24,
            span: 32171..32174,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        position: Position {
            line: 1162,
            column: 29,
            span: 32175..32179,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1162,
            column: 33,
            span: 32180..32183,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "top",
        ),
        position: Position {
            line: 1162,
            column: 37,
            span: 32184..32187,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1162,
            column: 40,
            span: 32188..32190,
        },
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        position: Position {
            line: 1162,
            column: 42,
            span: 32190..32192,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1162,
            column: 43,
            span: 32192..32193,
        },
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        position: Position {
            line: 1165,
            column: 0,
            span: 32215..32217,
        },
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        position: Position {
            line: 1166,
            column: 8,
            span: 32220..32225,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 1166,
            column: 10,
            span: 32226..32227,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1166,
            column: 12,
            span: 32228..32229,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        position: Position {
            line: 1166,
            column: 18,
            span: 32230..32235,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1166,
            column: 19,
            span: 32235..32236,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getregistry",
        ),
        position: Position {
            line: 1166,
            column: 30,
            span: 32236..32247,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1166,
            column: 31,
            span: 32247..32248,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1166,
            column: 32,
            span: 32248..32249,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        position: Position {
            line: 1167,
            column: 9,
            span: 32252..32258,
        },
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        position: Position {
            line: 1167,
            column: 10,
            span: 32258..32259,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 1167,
            column: 11,
            span: 32259..32260,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1167,
            column: 12,
            span: 32260..32261,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 1167,
            column: 16,
            span: 32261..32265,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1167,
            column: 19,
            span: 32266..32268,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt_xuxu",
        ),
        position: Position {
            line: 1167,
            column: 27,
            span: 32269..32276,
        },
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        position: Position {
            line: 1167,
            column: 31,
            span: 32277..32280,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 1167,
            column: 33,
            span: 32281..32282,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1167,
            column: 34,
            span: 32282..32283,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu1",
        ),
        position: Position {
            line: 1167,
            column: 39,
            span: 32283..32288,
        },
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        position: Position {
            line: 1167,
            column: 42,
            span: 32289..32291,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        position: Position {
            line: 1167,
            column: 44,
            span: 32292..32293,
        },
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        position: Position {
            line: 1167,
            column: 45,
            span: 32293..32294,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 1168,
            column: 4,
            span: 32297..32298,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1168,
            column: 5,
            span: 32298..32299,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        position: Position {
            line: 1168,
            column: 9,
            span: 32299..32303,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1168,
            column: 11,
            span: 32304..32305,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1168,
            column: 15,
            span: 32306..32309,
        },
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        position: Position {
            line: 1168,
            column: 16,
            span: 32309..32310,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        position: Position {
            line: 1168,
            column: 18,
            span: 32311..32312,
        },
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        position: Position {
            line: 1168,
            column: 19,
            span: 32312..32313,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu1",
        ),
        position: Position {
            line: 1168,
            column: 24,
            span: 32313..32318,
        },
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        position: Position {
            line: 1168,
            column: 26,
            span: 32319..32320,
        },
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        position: Position {
            line: 1168,
            column: 0,
            span: 32321..32324,
        },
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        position: Position {
            line: 1169,
            column: 0,
            span: 32325..32328,
        },
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        position: Position {
            line: 1171,
            column: 6,
            span: 32330..32335,
        },
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        position: Position {
            line: 1171,
            column: 10,
            span: 32335..32339,
        },
    },
]
