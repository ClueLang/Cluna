---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/events.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 101..106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 4,
        column: 7,
        span: 106..107,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'testing metatables'",
        ),
        line: 4,
        column: 27,
        span: 107..127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 4,
        column: 28,
        span: 127..128,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 6,
        column: 6,
        span: 130..135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 6,
        column: 12,
        span: 136..141,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 6,
        column: 14,
        span: 142..143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 22,
        span: 144..151,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'debug'",
        ),
        line: 6,
        column: 29,
        span: 151..158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 8,
        column: 2,
        span: 160..161,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 8,
        column: 4,
        span: 162..163,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 8,
        column: 7,
        span: 163..166,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 8,
        column: 8,
        span: 166..167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 8,
        column: 10,
        span: 168..169,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 8,
        column: 12,
        span: 170..171,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 8,
        column: 0,
        span: 171..174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 10,
        column: 5,
        span: 176..180,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 7,
        span: 181..182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 10,
        column: 20,
        span: 183..195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 21,
        span: 195..196,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 10,
        column: 22,
        span: 196..197,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 10,
        column: 23,
        span: 197..198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 10,
        column: 24,
        span: 198..199,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 10,
        column: 26,
        span: 200..201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 10,
        column: 33,
        span: 201..208,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 10,
        column: 34,
        span: 208..209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 10,
        column: 36,
        span: 209..211,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 10,
        column: 37,
        span: 211..212,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 38,
        span: 212..213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 12,
        column: 15,
        span: 215..229,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 12,
        column: 16,
        span: 229..230,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 12,
        column: 17,
        span: 230..231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 14,
        column: 2,
        span: 233..234,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 14,
        column: 4,
        span: 235..236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 14,
        column: 6,
        span: 237..238,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 14,
        column: 7,
        span: 238..239,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 14,
        column: 0,
        span: 238..241,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
        column: 7,
        span: 242..248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 8,
        span: 248..249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 15,
        column: 9,
        span: 249..250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 12,
        span: 251..253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 15,
        span: 253..256,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 15,
        column: 19,
        span: 257..260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 15,
        column: 22,
        span: 261..263,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 23,
        span: 263..264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 15,
        column: 24,
        span: 264..265,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 27,
        span: 266..268,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 15,
        column: 30,
        span: 268..271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 31,
        span: 271..272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 16,
        column: 2,
        span: 273..274,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 16,
        column: 4,
        span: 275..276,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 16,
        column: 0,
        span: 277..282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 17,
        column: 7,
        span: 283..289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 17,
        column: 8,
        span: 289..290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 17,
        column: 9,
        span: 290..291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 17,
        column: 12,
        span: 292..294,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 17,
        column: 18,
        span: 295..300,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 17,
        column: 19,
        span: 300..301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 18,
        column: 2,
        span: 302..303,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 18,
        column: 4,
        span: 304..305,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 18,
        column: 0,
        span: 306..309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 19,
        column: 7,
        span: 310..316,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 8,
        span: 316..317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 19,
        column: 9,
        span: 317..318,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 19,
        column: 12,
        span: 319..321,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 19,
        column: 15,
        span: 321..324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 16,
        span: 324..325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 21,
        column: 7,
        span: 327..333,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 21,
        column: 8,
        span: 333..334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 21,
        column: 20,
        span: 334..346,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 21,
        column: 21,
        span: 346..347,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 21,
        column: 22,
        span: 347..348,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 21,
        column: 25,
        span: 349..351,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 21,
        column: 29,
        span: 352..355,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 21,
        column: 30,
        span: 355..356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 22,
        column: 7,
        span: 357..363,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 8,
        span: 363..364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 22,
        column: 20,
        span: 364..376,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 22,
        column: 21,
        span: 376..377,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 22,
        column: 22,
        span: 376..378,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 23,
        span: 378..379,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 22,
        column: 26,
        span: 380..382,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 22,
        column: 30,
        span: 383..386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 22,
        column: 31,
        span: 386..387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 23,
        column: 7,
        span: 388..394,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 8,
        span: 394..395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 23,
        column: 20,
        span: 395..407,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 23,
        column: 21,
        span: 407..408,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 23,
        column: 24,
        span: 408..411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 25,
        span: 411..412,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 23,
        column: 28,
        span: 413..415,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 23,
        column: 32,
        span: 416..419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 23,
        column: 33,
        span: 419..420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 24,
        column: 2,
        span: 421..422,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 3,
        span: 422..423,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 24,
        column: 4,
        span: 423..424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 24,
        column: 8,
        span: 424..428,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 10,
        span: 429..430,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"NAME\"",
        ),
        line: 24,
        column: 17,
        span: 431..437,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 24,
        column: 18,
        span: 437..438,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 24,
        column: 19,
        span: 438..439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 24,
        column: 32,
        span: 440..452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 24,
        column: 33,
        span: 452..453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 24,
        column: 34,
        span: 453..454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 35,
        span: 454..455,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 24,
        column: 37,
        span: 456..457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__metatable",
        ),
        line: 24,
        column: 48,
        span: 457..468,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 50,
        span: 469..470,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 24,
        column: 57,
        span: 471..477,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 24,
        column: 58,
        span: 477..478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__tostring",
        ),
        line: 25,
        column: 31,
        span: 499..509,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 32,
        span: 509..510,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 25,
        column: 40,
        span: 510..518,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 25,
        column: 41,
        span: 518..519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 25,
        column: 42,
        span: 519..520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 43,
        span: 520..521,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 25,
        column: 50,
        span: 522..528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 25,
        column: 52,
        span: 529..530,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 25,
        column: 53,
        span: 530..531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 25,
        column: 57,
        span: 531..535,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 25,
        column: 61,
        span: 536..539,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 25,
        column: 62,
        span: 539..540,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 25,
        column: 63,
        span: 540..541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 26,
        column: 7,
        span: 542..548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 8,
        span: 548..549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 26,
        column: 20,
        span: 549..561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 21,
        span: 561..562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 26,
        column: 22,
        span: 562..563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 23,
        span: 563..564,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 26,
        column: 26,
        span: 565..567,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 26,
        column: 33,
        span: 568..574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 34,
        span: 574..575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 27,
        column: 7,
        span: 576..582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 8,
        span: 582..583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 27,
        column: 16,
        span: 583..591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 27,
        column: 17,
        span: 591..592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 27,
        column: 18,
        span: 592..593,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 19,
        span: 593..594,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 27,
        column: 22,
        span: 595..597,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"NAME\"",
        ),
        line: 27,
        column: 29,
        span: 598..604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 27,
        column: 30,
        span: 604..605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 29,
        column: 7,
        span: 645..651,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 8,
        span: 651..652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 29,
        column: 13,
        span: 652..657,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 29,
        column: 14,
        span: 657..658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 29,
        column: 26,
        span: 658..670,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 27,
        span: 670..671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 29,
        column: 29,
        span: 672..673,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 29,
        column: 30,
        span: 673..674,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 29,
        column: 32,
        span: 675..676,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 29,
        column: 33,
        span: 676..677,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 34,
        span: 677..678,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 29,
        column: 37,
        span: 679..681,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 29,
        column: 43,
        span: 682..687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 29,
        column: 44,
        span: 687..688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 30,
        column: 2,
        span: 689..690,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
        column: 3,
        span: 690..691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "name",
        ),
        line: 30,
        column: 7,
        span: 691..695,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 9,
        span: 696..697,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gororoba\"",
        ),
        line: 30,
        column: 20,
        span: 698..708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 31,
        column: 7,
        span: 709..715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 8,
        span: 715..716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tostring",
        ),
        line: 31,
        column: 16,
        span: 716..724,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 31,
        column: 17,
        span: 724..725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 31,
        column: 18,
        span: 725..726,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 19,
        span: 726..727,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 31,
        column: 22,
        span: 728..730,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"gororoba\"",
        ),
        line: 31,
        column: 33,
        span: 731..741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 31,
        column: 34,
        span: 741..742,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 33,
        column: 6,
        span: 744..749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 33,
        column: 8,
        span: 750..751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 9,
        span: 751..752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 33,
        column: 11,
        span: 753..754,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 13,
        span: 755..756,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 33,
        column: 15,
        span: 757..758,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 17,
        span: 757..760,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 18,
        span: 760..761,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 20,
        span: 760..763,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 21,
        span: 763..764,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 33,
        column: 23,
        span: 763..766,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 33,
        column: 24,
        span: 766..767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 33,
        column: 26,
        span: 768..769,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 27,
        span: 769..770,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 33,
        column: 31,
        span: 770..774,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 32,
        span: 774..775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 33,
        column: 34,
        span: 776..777,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 33,
        column: 35,
        span: 777..778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"20\"",
        ),
        line: 33,
        column: 39,
        span: 778..782,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 33,
        column: 40,
        span: 782..783,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 33,
        column: 41,
        span: 783..784,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 33,
        column: 43,
        span: 785..786,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 33,
        column: 44,
        span: 786..787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 34,
        column: 7,
        span: 788..794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 8,
        span: 794..795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 34,
        column: 20,
        span: 795..807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 21,
        span: 807..808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 22,
        span: 808..809,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 23,
        span: 809..810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 34,
        column: 24,
        span: 810..811,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 25,
        span: 811..812,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 34,
        column: 28,
        span: 813..815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 34,
        column: 30,
        span: 816..817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 31,
        span: 817..818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 35,
        column: 7,
        span: 819..825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 8,
        span: 825..826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 35,
        column: 20,
        span: 826..838,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 21,
        span: 838..839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 35,
        column: 22,
        span: 839..840,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 23,
        span: 840..841,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 35,
        column: 26,
        span: 842..844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 35,
        column: 28,
        span: 845..846,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 29,
        span: 846..847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 36,
        column: 7,
        span: 848..854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 8,
        span: 854..855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 36,
        column: 20,
        span: 855..867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 36,
        column: 21,
        span: 867..868,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 22,
        span: 868..869,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 36,
        column: 23,
        span: 869..870,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 36,
        column: 26,
        span: 870..873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 27,
        span: 873..874,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 36,
        column: 30,
        span: 875..877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 36,
        column: 32,
        span: 878..879,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 36,
        column: 33,
        span: 879..880,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 37,
        column: 7,
        span: 881..887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 8,
        span: 887..888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 37,
        column: 20,
        span: 888..900,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 21,
        span: 900..901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 37,
        column: 22,
        span: 901..902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 23,
        span: 902..903,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 37,
        column: 26,
        span: 904..906,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 37,
        column: 30,
        span: 907..910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 31,
        span: 910..911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 38,
        column: 7,
        span: 912..918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 8,
        span: 918..919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 38,
        column: 20,
        span: 919..931,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 21,
        span: 931..932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 22,
        span: 932..933,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 23,
        span: 933..934,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 38,
        column: 24,
        span: 934..935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 25,
        span: 935..936,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 38,
        column: 28,
        span: 937..939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 38,
        column: 30,
        span: 940..941,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 31,
        span: 941..942,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 41,
        column: 9,
        span: 945..953,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 41,
        column: 11,
        span: 954..955,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 41,
        column: 13,
        span: 956..957,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 41,
        column: 14,
        span: 957..958,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 15,
        span: 958..959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 41,
        column: 17,
        span: 960..961,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 41,
        column: 18,
        span: 961..962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 41,
        column: 20,
        span: 963..964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 41,
        column: 21,
        span: 964..965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 42,
        column: 9,
        span: 968..974,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 42,
        column: 10,
        span: 974..975,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 42,
        column: 13,
        span: 975..978,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "e",
        ),
        line: 42,
        column: 15,
        span: 979..980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 42,
        column: 16,
        span: 980..981,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 43,
        column: 8,
        span: 984..989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 43,
        column: 10,
        span: 990..991,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 12,
        span: 992..993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 43,
        column: 19,
        span: 994..1000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 43,
        column: 20,
        span: 1000..1001,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 43,
        column: 21,
        span: 1001..1002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 43,
        column: 22,
        span: 1002..1003,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"parent\"",
        ),
        line: 43,
        column: 31,
        span: 1004..1012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 43,
        column: 32,
        span: 1012..1013,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 44,
        column: 9,
        span: 1016..1022,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 44,
        column: 11,
        span: 1023..1024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 44,
        column: 12,
        span: 1024..1025,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 44,
        column: 16,
        span: 1026..1029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 44,
        column: 18,
        span: 1030..1031,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 44,
        column: 19,
        span: 1031..1032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 44,
        column: 20,
        span: 1032..1033,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 44,
        column: 21,
        span: 1033..1034,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 44,
        column: 22,
        span: 1034..1035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 44,
        column: 23,
        span: 1034..1036,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 44,
        column: 24,
        span: 1036..1037,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 44,
        column: 25,
        span: 1037..1038,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dummy return\"",
        ),
        line: 44,
        column: 40,
        span: 1039..1053,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 45,
        column: 0,
        span: 1054..1057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 47,
        column: 2,
        span: 1059..1060,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 3,
        span: 1060..1061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 47,
        column: 10,
        span: 1061..1068,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 12,
        span: 1069..1070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 47,
        column: 0,
        span: 1071..1072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 49,
        column: 2,
        span: 1074..1075,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 49,
        column: 3,
        span: 1075..1076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 49,
        column: 9,
        span: 1076..1082,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 11,
        span: 1083..1084,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 49,
        column: 13,
        span: 1085..1086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 49,
        column: 14,
        span: 1086..1087,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 15,
        span: 1087..1088,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 17,
        span: 1087..1090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 18,
        span: 1090..1091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 49,
        column: 20,
        span: 1092..1093,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 21,
        span: 1093..1094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 23,
        span: 1093..1096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 49,
        column: 24,
        span: 1096..1097,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 49,
        column: 26,
        span: 1098..1099,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 27,
        span: 1098..1100,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 49,
        column: 28,
        span: 1100..1101,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 49,
        column: 30,
        span: 1102..1103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "24",
                    after_decimal: "",
                },
            ),
        ),
        line: 49,
        column: 33,
        span: 1103..1106,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 49,
        column: 34,
        span: 1106..1107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 50,
        column: 7,
        span: 1108..1114,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 8,
        span: 1114..1115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 9,
        span: 1115..1116,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 10,
        span: 1116..1117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 11,
        span: 1116..1118,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 12,
        span: 1118..1119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 15,
        span: 1120..1122,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 18,
        span: 1122..1125,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 50,
        column: 22,
        span: 1126..1129,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 24,
        span: 1130..1131,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 25,
        span: 1131..1132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "z",
        ),
        line: 50,
        column: 26,
        span: 1132..1133,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 29,
        span: 1134..1136,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "28",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 32,
        span: 1136..1139,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 50,
        column: 36,
        span: 1140..1143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 38,
        span: 1144..1145,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 50,
        column: 39,
        span: 1145..1146,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 40,
        span: 1145..1147,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 50,
        column: 41,
        span: 1147..1148,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 44,
        span: 1149..1151,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        line: 50,
        column: 47,
        span: 1151..1154,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 50,
        column: 51,
        span: 1155..1158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 50,
        column: 53,
        span: 1159..1160,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 50,
        column: 54,
        span: 1160..1161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 50,
        column: 55,
        span: 1161..1162,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 50,
        column: 58,
        span: 1163..1165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10\"",
        ),
        line: 50,
        column: 63,
        span: 1166..1170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 64,
        span: 1170..1171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 52,
        column: 15,
        span: 1173..1187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 52,
        column: 16,
        span: 1187..1188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 52,
        column: 17,
        span: 1188..1189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 54,
        column: 2,
        span: 1191..1192,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 54,
        column: 4,
        span: 1193..1194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 54,
        column: 17,
        span: 1195..1207,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 54,
        column: 18,
        span: 1207..1208,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 54,
        column: 19,
        span: 1208..1209,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 54,
        column: 20,
        span: 1209..1210,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 54,
        column: 21,
        span: 1210..1211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 54,
        column: 23,
        span: 1212..1213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 54,
        column: 24,
        span: 1213..1214,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 55,
        column: 9,
        span: 1215..1223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 55,
        column: 11,
        span: 1224..1225,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 12,
        span: 1225..1226,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 55,
        column: 13,
        span: 1226..1227,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 14,
        span: 1227..1228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 55,
        column: 16,
        span: 1229..1230,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 17,
        span: 1230..1231,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 55,
        column: 19,
        span: 1232..1233,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 20,
        span: 1233..1234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 55,
        column: 27,
        span: 1235..1241,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 55,
        column: 28,
        span: 1241..1242,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 55,
        column: 29,
        span: 1242..1243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 30,
        span: 1243..1244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 55,
        column: 32,
        span: 1245..1246,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 55,
        column: 33,
        span: 1246..1247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 55,
        column: 35,
        span: 1248..1249,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 55,
        column: 36,
        span: 1249..1250,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 55,
        column: 37,
        span: 1249..1251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 55,
        column: 38,
        span: 1251..1252,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 55,
        column: 0,
        span: 1253..1256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 56,
        column: 13,
        span: 1257..1269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 56,
        column: 14,
        span: 1269..1270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 56,
        column: 15,
        span: 1270..1271,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 56,
        column: 16,
        span: 1271..1272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 56,
        column: 18,
        span: 1273..1274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 56,
        column: 19,
        span: 1274..1275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 57,
        column: 2,
        span: 1303..1304,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 57,
        column: 3,
        span: 1304..1305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 57,
        column: 13,
        span: 1305..1315,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 57,
        column: 15,
        span: 1316..1317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 57,
        column: 0,
        span: 1318..1319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 2,
        span: 1320..1321,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 58,
        column: 3,
        span: 1321..1322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 4,
        span: 1321..1323,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 58,
        column: 5,
        span: 1323..1324,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 7,
        span: 1325..1326,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 10,
        span: 1326..1329,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 58,
        column: 11,
        span: 1329..1330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 13,
        span: 1331..1332,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 14,
        span: 1332..1333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 58,
        column: 15,
        span: 1333..1334,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 17,
        span: 1335..1336,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"101\"",
        ),
        line: 58,
        column: 23,
        span: 1337..1342,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 58,
        column: 24,
        span: 1342..1343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 58,
        column: 26,
        span: 1344..1345,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 58,
        column: 27,
        span: 1345..1346,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 28,
        span: 1345..1347,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 58,
        column: 29,
        span: 1347..1348,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 31,
        span: 1349..1350,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "200",
                    after_decimal: "",
                },
            ),
        ),
        line: 58,
        column: 0,
        span: 1350..1354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 59,
        column: 7,
        span: 1355..1361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 59,
        column: 8,
        span: 1361..1362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 9,
        span: 1362..1363,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 59,
        column: 10,
        span: 1363..1364,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 11,
        span: 1363..1365,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 59,
        column: 12,
        span: 1365..1366,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 15,
        span: 1367..1369,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 18,
        span: 1369..1372,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 59,
        column: 22,
        span: 1373..1376,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 24,
        span: 1377..1378,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 59,
        column: 25,
        span: 1378..1379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 59,
        column: 26,
        span: 1379..1380,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 29,
        span: 1381..1383,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "98",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 32,
        span: 1383..1386,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 59,
        column: 36,
        span: 1387..1390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 59,
        column: 38,
        span: 1391..1392,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 59,
        column: 39,
        span: 1392..1393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 40,
        span: 1392..1394,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 59,
        column: 41,
        span: 1394..1395,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 59,
        column: 44,
        span: 1396..1398,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "197",
                    after_decimal: "",
                },
            ),
        ),
        line: 59,
        column: 48,
        span: 1398..1402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 59,
        column: 49,
        span: 1402..1403,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 61,
        column: 3,
        span: 1405..1407,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 62,
        column: 8,
        span: 1433..1438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 62,
        column: 11,
        span: 1439..1441,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 62,
        column: 13,
        span: 1442..1443,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 62,
        column: 15,
        span: 1444..1445,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 62,
        column: 16,
        span: 1445..1446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 63,
        column: 5,
        span: 1449..1451,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 63,
        column: 6,
        span: 1451..1452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 63,
        column: 16,
        span: 1452..1462,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 63,
        column: 18,
        span: 1463..1464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 63,
        column: 0,
        span: 1465..1467,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 64,
        column: 8,
        span: 1470..1475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 64,
        column: 10,
        span: 1476..1477,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 64,
        column: 12,
        span: 1478..1479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 64,
        column: 25,
        span: 1480..1492,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 26,
        span: 1492..1493,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 64,
        column: 27,
        span: 1493..1494,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 64,
        column: 28,
        span: 1494..1495,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 64,
        column: 29,
        span: 1495..1496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 64,
        column: 32,
        span: 1497..1499,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 33,
        span: 1499..1500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 65,
        column: 4,
        span: 1503..1504,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 65,
        column: 5,
        span: 1504..1505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 6,
        span: 1504..1506,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 65,
        column: 7,
        span: 1506..1507,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
        column: 9,
        span: 1508..1509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 65,
        column: 12,
        span: 1509..1512,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 66,
        column: 9,
        span: 1553..1559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 66,
        column: 10,
        span: 1559..1560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 66,
        column: 12,
        span: 1560..1562,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 66,
        column: 13,
        span: 1562..1563,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 14,
        span: 1562..1564,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 66,
        column: 15,
        span: 1564..1565,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 66,
        column: 18,
        span: 1566..1568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 66,
        column: 21,
        span: 1568..1571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 66,
        column: 22,
        span: 1571..1572,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 67,
        column: 0,
        span: 1573..1576,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 70,
        column: 6,
        span: 1579..1584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 70,
        column: 8,
        span: 1585..1586,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 70,
        column: 10,
        span: 1587..1588,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 70,
        column: 12,
        span: 1589..1590,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 70,
        column: 13,
        span: 1590..1591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 71,
        column: 2,
        span: 1592..1593,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 4,
        span: 1594..1595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 71,
        column: 17,
        span: 1596..1608,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 18,
        span: 1608..1609,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 71,
        column: 19,
        span: 1609..1610,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 71,
        column: 20,
        span: 1610..1611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 71,
        column: 21,
        span: 1611..1612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 71,
        column: 23,
        span: 1613..1614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 24,
        span: 1614..1615,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 72,
        column: 2,
        span: 1616..1617,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 72,
        column: 3,
        span: 1617..1618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 72,
        column: 13,
        span: 1618..1628,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 72,
        column: 15,
        span: 1629..1630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 72,
        column: 0,
        span: 1631..1632,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 73,
        column: 2,
        span: 1633..1634,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
        column: 3,
        span: 1634..1635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 4,
        span: 1634..1636,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
        column: 5,
        span: 1636..1637,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 7,
        span: 1638..1639,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 10,
        span: 1639..1642,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 73,
        column: 11,
        span: 1642..1643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 73,
        column: 13,
        span: 1644..1645,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
        column: 14,
        span: 1645..1646,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 15,
        span: 1645..1647,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
        column: 16,
        span: 1647..1648,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 18,
        span: 1649..1650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 21,
        span: 1650..1653,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 73,
        column: 22,
        span: 1653..1654,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 73,
        column: 24,
        span: 1655..1656,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 73,
        column: 25,
        span: 1656..1657,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 26,
        span: 1656..1658,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 73,
        column: 27,
        span: 1658..1659,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 73,
        column: 29,
        span: 1660..1661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 73,
        column: 0,
        span: 1661..1664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 74,
        column: 7,
        span: 1665..1671,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 74,
        column: 8,
        span: 1671..1672,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 74,
        column: 9,
        span: 1672..1673,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 74,
        column: 10,
        span: 1673..1674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 11,
        span: 1673..1675,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 74,
        column: 12,
        span: 1675..1676,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 15,
        span: 1677..1679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 18,
        span: 1679..1682,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 74,
        column: 22,
        span: 1683..1686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 74,
        column: 24,
        span: 1687..1688,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 74,
        column: 25,
        span: 1688..1689,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 26,
        span: 1688..1690,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 74,
        column: 27,
        span: 1690..1691,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 30,
        span: 1692..1694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 33,
        span: 1694..1697,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 74,
        column: 37,
        span: 1698..1701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 74,
        column: 39,
        span: 1702..1703,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 74,
        column: 40,
        span: 1703..1704,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 41,
        span: 1703..1705,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 74,
        column: 42,
        span: 1705..1706,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 74,
        column: 45,
        span: 1707..1709,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "90",
                    after_decimal: "",
                },
            ),
        ),
        line: 74,
        column: 48,
        span: 1709..1712,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 74,
        column: 49,
        span: 1712..1713,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 77,
        column: 0,
        span: 1716..1718,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 78,
        column: 8,
        span: 1721..1726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 78,
        column: 10,
        span: 1727..1728,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 78,
        column: 11,
        span: 1728..1729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 79,
        column: 4,
        span: 1732..1733,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 6,
        span: 1734..1735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 79,
        column: 19,
        span: 1736..1748,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 20,
        span: 1748..1749,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 79,
        column: 21,
        span: 1749..1750,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 79,
        column: 22,
        span: 1750..1751,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 23,
        span: 1751..1752,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 79,
        column: 25,
        span: 1753..1754,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 79,
        column: 32,
        span: 1754..1761,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 79,
        column: 34,
        span: 1762..1763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 79,
        column: 47,
        span: 1764..1776,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 48,
        span: 1776..1777,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 79,
        column: 49,
        span: 1777..1778,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 79,
        column: 50,
        span: 1778..1779,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 51,
        span: 1779..1780,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 80,
        column: 23,
        span: 1802..1803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 80,
        column: 30,
        span: 1803..1810,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 80,
        column: 32,
        span: 1811..1812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 80,
        column: 45,
        span: 1813..1825,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 46,
        span: 1825..1826,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 80,
        column: 47,
        span: 1826..1827,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 80,
        column: 48,
        span: 1827..1828,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 80,
        column: 49,
        span: 1828..1829,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 81,
        column: 23,
        span: 1851..1852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 81,
        column: 30,
        span: 1852..1859,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 81,
        column: 32,
        span: 1860..1861,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 81,
        column: 41,
        span: 1862..1870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 43,
        span: 1871..1872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 81,
        column: 44,
        span: 1872..1873,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 45,
        span: 1873..1874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 81,
        column: 46,
        span: 1874..1875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 47,
        span: 1875..1876,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 81,
        column: 54,
        span: 1877..1883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 81,
        column: 56,
        span: 1884..1885,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 81,
        column: 57,
        span: 1885..1886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 81,
        column: 58,
        span: 1886..1887,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 81,
        column: 59,
        span: 1887..1888,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 60,
        span: 1887..1889,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 81,
        column: 61,
        span: 1889..1890,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 81,
        column: 62,
        span: 1890..1891,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 81,
        column: 63,
        span: 1890..1892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 64,
        span: 1892..1893,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lixo\"",
        ),
        line: 81,
        column: 71,
        span: 1894..1900,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 81,
        column: 75,
        span: 1901..1904,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 81,
        column: 76,
        span: 1904..1905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 77,
        span: 1905..1906,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 81,
        column: 78,
        span: 1906..1907,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 79,
        span: 1907..1908,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 81,
        column: 80,
        span: 1908..1909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 81,
        span: 1909..1910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 82,
        column: 4,
        span: 1913..1914,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 82,
        column: 5,
        span: 1914..1915,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 6,
        span: 1914..1916,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 82,
        column: 7,
        span: 1916..1917,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 82,
        column: 9,
        span: 1918..1919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 82,
        column: 0,
        span: 1919..1922,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 83,
        column: 6,
        span: 1925..1928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 83,
        column: 8,
        span: 1929..1930,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 83,
        column: 9,
        span: 1930..1931,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 10,
        span: 1930..1932,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 83,
        column: 11,
        span: 1932..1933,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 83,
        column: 13,
        span: 1932..1935,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 83,
        column: 0,
        span: 1936..1938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 84,
        column: 11,
        span: 1943..1949,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 84,
        column: 12,
        span: 1949..1950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 84,
        column: 13,
        span: 1950..1951,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 84,
        column: 14,
        span: 1951..1952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 84,
        column: 15,
        span: 1952..1953,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 84,
        column: 16,
        span: 1953..1954,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 17,
        span: 1953..1955,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 84,
        column: 18,
        span: 1955..1956,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 84,
        column: 21,
        span: 1957..1959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 24,
        span: 1959..1962,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 84,
        column: 26,
        span: 1963..1964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 84,
        column: 28,
        span: 1965..1966,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 84,
        column: 29,
        span: 1966..1967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 84,
        column: 30,
        span: 1966..1968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 84,
        column: 31,
        span: 1968..1969,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 85,
        column: 0,
        span: 1972..1975,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 86,
        column: 0,
        span: 1976..1979,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 89,
        column: 3,
        span: 1982..1984,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 90,
        column: 8,
        span: 2000..2005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 90,
        column: 0,
        span: 2006..2009,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 91,
        column: 8,
        span: 2012..2017,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 91,
        column: 10,
        span: 2018..2019,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 91,
        column: 12,
        span: 2020..2021,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 91,
        column: 14,
        span: 2022..2023,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 91,
        column: 15,
        span: 2023..2024,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 92,
        column: 6,
        span: 2027..2030,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 92,
        column: 8,
        span: 2031..2032,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 9,
        span: 2032..2033,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 10,
        span: 2032..2034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 92,
        column: 11,
        span: 2034..2035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 13,
        span: 2034..2037,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 92,
        column: 16,
        span: 2038..2040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 92,
        column: 18,
        span: 2041..2042,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 92,
        column: 19,
        span: 2042..2043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 92,
        column: 20,
        span: 2043..2044,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 92,
        column: 21,
        span: 2044..2045,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 23,
        span: 2046..2047,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 25,
        span: 2047..2049,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 92,
        column: 26,
        span: 2049..2050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 92,
        column: 28,
        span: 2051..2052,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 92,
        column: 29,
        span: 2052..2053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 92,
        column: 32,
        span: 2053..2056,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 92,
        column: 34,
        span: 2056..2058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 92,
        column: 35,
        span: 2058..2059,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 92,
        column: 36,
        span: 2059..2060,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 38,
        span: 2061..2062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 92,
        column: 40,
        span: 2062..2064,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 92,
        column: 41,
        span: 2064..2065,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 92,
        column: 0,
        span: 2066..2069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 93,
        column: 15,
        span: 2072..2084,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 16,
        span: 2084..2085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 93,
        column: 17,
        span: 2085..2086,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 18,
        span: 2086..2087,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 93,
        column: 20,
        span: 2088..2089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 93,
        column: 30,
        span: 2089..2099,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 32,
        span: 2100..2101,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 93,
        column: 41,
        span: 2102..2110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 43,
        span: 2111..2112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 93,
        column: 44,
        span: 2112..2113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 45,
        span: 2113..2114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 93,
        column: 46,
        span: 2114..2115,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 47,
        span: 2115..2116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 93,
        column: 48,
        span: 2116..2117,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 49,
        span: 2117..2118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 93,
        column: 53,
        span: 2119..2122,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 54,
        span: 2122..2123,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 93,
        column: 58,
        span: 2123..2127,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 93,
        column: 59,
        span: 2127..2128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 93,
        column: 66,
        span: 2129..2135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 93,
        column: 67,
        span: 2135..2136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 93,
        column: 68,
        span: 2136..2137,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 69,
        span: 2137..2138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 93,
        column: 70,
        span: 2138..2139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 71,
        span: 2139..2140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 93,
        column: 72,
        span: 2140..2141,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 73,
        span: 2141..2142,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 93,
        column: 77,
        span: 2143..2146,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 93,
        column: 78,
        span: 2146..2147,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 93,
        column: 79,
        span: 2147..2148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 94,
        column: 6,
        span: 2151..2154,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 94,
        column: 8,
        span: 2155..2156,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 94,
        column: 14,
        span: 2157..2162,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 94,
        column: 15,
        span: 2162..2163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 94,
        column: 17,
        span: 2164..2165,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 94,
        column: 18,
        span: 2165..2166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 19,
        span: 2165..2167,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 94,
        column: 20,
        span: 2167..2168,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 94,
        column: 21,
        span: 2168..2169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 94,
        column: 22,
        span: 2168..2170,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 94,
        column: 23,
        span: 2170..2171,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 94,
        column: 30,
        span: 2172..2178,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 94,
        column: 31,
        span: 2178..2179,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 94,
        column: 34,
        span: 2179..2182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 94,
        column: 38,
        span: 2183..2186,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 94,
        column: 39,
        span: 2186..2187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 95,
        column: 6,
        span: 2190..2193,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 8,
        span: 2194..2195,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 95,
        column: 14,
        span: 2196..2201,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 95,
        column: 15,
        span: 2201..2202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 95,
        column: 17,
        span: 2203..2204,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 95,
        column: 18,
        span: 2204..2205,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a1'",
        ),
        line: 95,
        column: 22,
        span: 2205..2209,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 95,
        column: 23,
        span: 2209..2210,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 24,
        span: 2210..2211,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 95,
        column: 25,
        span: 2210..2212,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 95,
        column: 26,
        span: 2212..2213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 95,
        column: 33,
        span: 2214..2220,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 95,
        column: 34,
        span: 2220..2221,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 95,
        column: 37,
        span: 2221..2224,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 95,
        column: 41,
        span: 2225..2228,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 95,
        column: 42,
        span: 2228..2229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 96,
        column: 6,
        span: 2232..2235,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 96,
        column: 8,
        span: 2236..2237,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 96,
        column: 14,
        span: 2238..2243,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 96,
        column: 15,
        span: 2243..2244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 96,
        column: 17,
        span: 2245..2246,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 96,
        column: 18,
        span: 2246..2247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a11'",
        ),
        line: 96,
        column: 23,
        span: 2247..2252,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 96,
        column: 24,
        span: 2252..2253,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 96,
        column: 25,
        span: 2253..2254,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 96,
        column: 26,
        span: 2253..2255,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 96,
        column: 27,
        span: 2255..2256,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 96,
        column: 34,
        span: 2257..2263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 96,
        column: 35,
        span: 2263..2264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 96,
        column: 38,
        span: 2264..2267,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 96,
        column: 39,
        span: 2267..2268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 97,
        column: 6,
        span: 2271..2274,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 8,
        span: 2275..2276,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 97,
        column: 14,
        span: 2277..2282,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 97,
        column: 15,
        span: 2282..2283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 97,
        column: 17,
        span: 2284..2285,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 97,
        column: 18,
        span: 2285..2286,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 20,
        span: 2285..2288,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 97,
        column: 21,
        span: 2288..2289,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 22,
        span: 2289..2290,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 97,
        column: 23,
        span: 2289..2291,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 97,
        column: 24,
        span: 2291..2292,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 97,
        column: 31,
        span: 2293..2299,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 97,
        column: 32,
        span: 2299..2300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 97,
        column: 35,
        span: 2300..2303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 97,
        column: 36,
        span: 2303..2304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 98,
        column: 6,
        span: 2307..2310,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
        column: 8,
        span: 2311..2312,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 98,
        column: 14,
        span: 2313..2318,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 98,
        column: 15,
        span: 2318..2319,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 98,
        column: 17,
        span: 2320..2321,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 98,
        column: 18,
        span: 2321..2322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 98,
        column: 19,
        span: 2321..2323,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 98,
        column: 20,
        span: 2323..2324,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
        column: 21,
        span: 2324..2325,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 98,
        column: 24,
        span: 2325..2328,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 98,
        column: 25,
        span: 2328..2329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 98,
        column: 32,
        span: 2330..2336,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 98,
        column: 33,
        span: 2336..2337,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 98,
        column: 36,
        span: 2337..2340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 98,
        column: 40,
        span: 2341..2344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 98,
        column: 41,
        span: 2344..2345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 99,
        column: 6,
        span: 2348..2351,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 8,
        span: 2352..2353,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 99,
        column: 14,
        span: 2354..2359,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 99,
        column: 15,
        span: 2359..2360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 99,
        column: 17,
        span: 2361..2362,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 99,
        column: 18,
        span: 2362..2363,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 99,
        column: 19,
        span: 2362..2364,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 99,
        column: 20,
        span: 2364..2365,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 21,
        span: 2365..2366,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 99,
        column: 24,
        span: 2366..2369,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 99,
        column: 25,
        span: 2369..2370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 99,
        column: 32,
        span: 2371..2377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 99,
        column: 33,
        span: 2377..2378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foi",
        ),
        line: 99,
        column: 36,
        span: 2378..2381,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 99,
        column: 37,
        span: 2381..2382,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 100,
        column: 0,
        span: 2383..2386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 103,
        column: 13,
        span: 2389..2401,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 103,
        column: 14,
        span: 2401..2402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 103,
        column: 15,
        span: 2402..2403,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 103,
        column: 16,
        span: 2403..2404,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 103,
        column: 20,
        span: 2405..2408,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 103,
        column: 21,
        span: 2408..2409,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 104,
        column: 9,
        span: 2410..2418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 104,
        column: 11,
        span: 2419..2420,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 104,
        column: 13,
        span: 2421..2422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 104,
        column: 14,
        span: 2422..2423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 15,
        span: 2423..2424,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 104,
        column: 19,
        span: 2425..2428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 104,
        column: 20,
        span: 2428..2429,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 104,
        column: 27,
        span: 2430..2436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 104,
        column: 29,
        span: 2437..2438,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 104,
        column: 30,
        span: 2438..2439,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 104,
        column: 32,
        span: 2440..2441,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 104,
        column: 35,
        span: 2441..2444,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 104,
        column: 36,
        span: 2444..2445,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 104,
        column: 0,
        span: 2446..2449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 105,
        column: 2,
        span: 2450..2451,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 105,
        column: 3,
        span: 2451..2452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        line: 105,
        column: 9,
        span: 2452..2458,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 11,
        span: 2459..2460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 105,
        column: 0,
        span: 2461..2462,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 107,
        column: 0,
        span: 2464..2466,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 108,
        column: 8,
        span: 2469..2474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 108,
        column: 10,
        span: 2475..2476,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 11,
        span: 2476..2477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 108,
        column: 12,
        span: 2477..2478,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 108,
        column: 14,
        span: 2479..2480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 108,
        column: 16,
        span: 2481..2482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 108,
        column: 17,
        span: 2482..2483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 108,
        column: 22,
        span: 2483..2488,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 108,
        column: 23,
        span: 2488..2489,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 108,
        column: 29,
        span: 2489..2495,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 108,
        column: 30,
        span: 2495..2496,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 108,
        column: 33,
        span: 2496..2499,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 108,
        column: 34,
        span: 2499..2500,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 108,
        column: 36,
        span: 2500..2502,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 108,
        column: 37,
        span: 2502..2503,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 108,
        column: 38,
        span: 2503..2504,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 109,
        column: 9,
        span: 2507..2513,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 109,
        column: 10,
        span: 2513..2514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 109,
        column: 11,
        span: 2514..2515,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 13,
        span: 2515..2517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 109,
        column: 14,
        span: 2517..2518,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 109,
        column: 18,
        span: 2519..2522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 109,
        column: 20,
        span: 2523..2524,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 109,
        column: 21,
        span: 2524..2525,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 22,
        span: 2524..2526,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 109,
        column: 23,
        span: 2526..2527,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 25,
        span: 2527..2529,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 109,
        column: 28,
        span: 2529..2532,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 109,
        column: 32,
        span: 2533..2536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 109,
        column: 34,
        span: 2537..2538,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 109,
        column: 35,
        span: 2538..2539,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 36,
        span: 2538..2540,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 109,
        column: 37,
        span: 2540..2541,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 39,
        span: 2541..2543,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 40,
        span: 2542..2544,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 109,
        column: 44,
        span: 2545..2548,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 109,
        column: 46,
        span: 2549..2550,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 109,
        column: 47,
        span: 2550..2551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 109,
        column: 48,
        span: 2550..2552,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 109,
        column: 49,
        span: 2552..2553,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 109,
        column: 51,
        span: 2553..2555,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 109,
        column: 54,
        span: 2555..2558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 109,
        column: 55,
        span: 2558..2559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 110,
        column: 4,
        span: 2562..2563,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 110,
        column: 5,
        span: 2563..2564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 110,
        column: 6,
        span: 2564..2565,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 110,
        column: 8,
        span: 2566..2567,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 110,
        column: 10,
        span: 2568..2569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 110,
        column: 11,
        span: 2569..2570,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 110,
        column: 12,
        span: 2570..2571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 111,
        column: 9,
        span: 2574..2580,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 10,
        span: 2580..2581,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 111,
        column: 11,
        span: 2581..2582,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 111,
        column: 13,
        span: 2582..2584,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 111,
        column: 14,
        span: 2584..2585,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 111,
        column: 18,
        span: 2586..2589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 111,
        column: 20,
        span: 2590..2591,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 111,
        column: 21,
        span: 2591..2592,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 111,
        column: 22,
        span: 2591..2593,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 111,
        column: 23,
        span: 2593..2594,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 111,
        column: 25,
        span: 2594..2596,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 111,
        column: 28,
        span: 2596..2599,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 29,
        span: 2599..2600,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 112,
        column: 0,
        span: 2601..2604,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 115,
        column: 6,
        span: 2607..2612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 115,
        column: 8,
        span: 2613..2614,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 115,
        column: 10,
        span: 2615..2616,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 115,
        column: 23,
        span: 2617..2629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 24,
        span: 2629..2630,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 115,
        column: 25,
        span: 2630..2631,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 115,
        column: 26,
        span: 2631..2632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 27,
        span: 2632..2633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 115,
        column: 29,
        span: 2634..2635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 30,
        span: 2635..2636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 116,
        column: 13,
        span: 2637..2649,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 14,
        span: 2649..2650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 116,
        column: 15,
        span: 2650..2651,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 16,
        span: 2651..2652,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 116,
        column: 17,
        span: 2652..2653,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 18,
        span: 2653..2654,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 118,
        column: 9,
        span: 2656..2664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 118,
        column: 11,
        span: 2665..2666,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 12,
        span: 2666..2667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 118,
        column: 14,
        span: 2667..2669,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 15,
        span: 2669..2670,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 119,
        column: 9,
        span: 2673..2679,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 119,
        column: 18,
        span: 2680..2688,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 20,
        span: 2689..2690,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 119,
        column: 23,
        span: 2690..2693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 24,
        span: 2693..2694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 119,
        column: 28,
        span: 2695..2698,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 30,
        span: 2699..2700,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 119,
        column: 32,
        span: 2701..2702,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 119,
        column: 33,
        span: 2702..2703,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 119,
        column: 34,
        span: 2702..2704,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 119,
        column: 35,
        span: 2704..2705,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 119,
        column: 37,
        span: 2706..2707,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "op",
        ),
        line: 119,
        column: 40,
        span: 2708..2710,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 41,
        span: 2710..2711,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 119,
        column: 45,
        span: 2712..2715,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 119,
        column: 46,
        span: 2715..2716,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 119,
        column: 48,
        span: 2717..2718,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 119,
        column: 55,
        span: 2719..2725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 57,
        span: 2726..2727,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 119,
        column: 60,
        span: 2727..2730,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 61,
        span: 2730..2731,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 119,
        column: 0,
        span: 2732..2735,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 120,
        column: 0,
        span: 2736..2739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 121,
        column: 2,
        span: 2740..2741,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
        column: 3,
        span: 2741..2742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        line: 121,
        column: 8,
        span: 2742..2747,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 121,
        column: 10,
        span: 2748..2749,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 121,
        column: 12,
        span: 2750..2751,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 121,
        column: 13,
        span: 2751..2752,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 121,
        column: 18,
        span: 2752..2757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 121,
        column: 19,
        span: 2757..2758,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 122,
        column: 2,
        span: 2759..2760,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 122,
        column: 3,
        span: 2760..2761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__sub",
        ),
        line: 122,
        column: 8,
        span: 2761..2766,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 122,
        column: 10,
        span: 2767..2768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 122,
        column: 12,
        span: 2769..2770,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 122,
        column: 13,
        span: 2770..2771,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        line: 122,
        column: 18,
        span: 2771..2776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 122,
        column: 19,
        span: 2776..2777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 123,
        column: 2,
        span: 2778..2779,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 3,
        span: 2779..2780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mul",
        ),
        line: 123,
        column: 8,
        span: 2780..2785,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
        column: 10,
        span: 2786..2787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 123,
        column: 12,
        span: 2788..2789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 13,
        span: 2789..2790,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mul\"",
        ),
        line: 123,
        column: 18,
        span: 2790..2795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 19,
        span: 2795..2796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 124,
        column: 2,
        span: 2797..2798,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 124,
        column: 3,
        span: 2798..2799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__div",
        ),
        line: 124,
        column: 8,
        span: 2799..2804,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 124,
        column: 10,
        span: 2805..2806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 124,
        column: 12,
        span: 2807..2808,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 124,
        column: 13,
        span: 2808..2809,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"div\"",
        ),
        line: 124,
        column: 18,
        span: 2809..2814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 124,
        column: 19,
        span: 2814..2815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 125,
        column: 2,
        span: 2816..2817,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 125,
        column: 3,
        span: 2817..2818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__idiv",
        ),
        line: 125,
        column: 9,
        span: 2818..2824,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 125,
        column: 11,
        span: 2825..2826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 125,
        column: 13,
        span: 2827..2828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 14,
        span: 2828..2829,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"idiv\"",
        ),
        line: 125,
        column: 20,
        span: 2829..2835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 21,
        span: 2835..2836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 126,
        column: 2,
        span: 2837..2838,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 126,
        column: 3,
        span: 2838..2839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__mod",
        ),
        line: 126,
        column: 8,
        span: 2839..2844,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 126,
        column: 10,
        span: 2845..2846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 126,
        column: 12,
        span: 2847..2848,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 126,
        column: 13,
        span: 2848..2849,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mod\"",
        ),
        line: 126,
        column: 18,
        span: 2849..2854,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 126,
        column: 19,
        span: 2854..2855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 127,
        column: 2,
        span: 2856..2857,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 127,
        column: 3,
        span: 2857..2858,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__unm",
        ),
        line: 127,
        column: 8,
        span: 2858..2863,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 127,
        column: 10,
        span: 2864..2865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 127,
        column: 12,
        span: 2866..2867,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 13,
        span: 2867..2868,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unm\"",
        ),
        line: 127,
        column: 18,
        span: 2868..2873,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 19,
        span: 2873..2874,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 128,
        column: 2,
        span: 2875..2876,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 128,
        column: 3,
        span: 2876..2877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__pow",
        ),
        line: 128,
        column: 8,
        span: 2877..2882,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 128,
        column: 10,
        span: 2883..2884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 128,
        column: 12,
        span: 2885..2886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 13,
        span: 2886..2887,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 128,
        column: 18,
        span: 2887..2892,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 19,
        span: 2892..2893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 129,
        column: 2,
        span: 2894..2895,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 129,
        column: 3,
        span: 2895..2896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 129,
        column: 8,
        span: 2896..2901,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 129,
        column: 10,
        span: 2902..2903,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 129,
        column: 12,
        span: 2904..2905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 13,
        span: 2905..2906,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"len\"",
        ),
        line: 129,
        column: 18,
        span: 2906..2911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 19,
        span: 2911..2912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 130,
        column: 2,
        span: 2913..2914,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 130,
        column: 3,
        span: 2914..2915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__band",
        ),
        line: 130,
        column: 9,
        span: 2915..2921,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 130,
        column: 11,
        span: 2922..2923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 130,
        column: 13,
        span: 2924..2925,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 14,
        span: 2925..2926,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"band\"",
        ),
        line: 130,
        column: 20,
        span: 2926..2932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 21,
        span: 2932..2933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 131,
        column: 2,
        span: 2934..2935,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 131,
        column: 3,
        span: 2935..2936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bor",
        ),
        line: 131,
        column: 8,
        span: 2936..2941,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 131,
        column: 10,
        span: 2942..2943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 131,
        column: 12,
        span: 2944..2945,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 131,
        column: 13,
        span: 2945..2946,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bor\"",
        ),
        line: 131,
        column: 18,
        span: 2946..2951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 131,
        column: 19,
        span: 2951..2952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 132,
        column: 2,
        span: 2953..2954,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 132,
        column: 3,
        span: 2954..2955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bxor",
        ),
        line: 132,
        column: 9,
        span: 2955..2961,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 132,
        column: 11,
        span: 2962..2963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 132,
        column: 13,
        span: 2964..2965,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 132,
        column: 14,
        span: 2965..2966,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bxor\"",
        ),
        line: 132,
        column: 20,
        span: 2966..2972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 132,
        column: 21,
        span: 2972..2973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 133,
        column: 2,
        span: 2974..2975,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 133,
        column: 3,
        span: 2975..2976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__shl",
        ),
        line: 133,
        column: 8,
        span: 2976..2981,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 133,
        column: 10,
        span: 2982..2983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 133,
        column: 12,
        span: 2984..2985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 133,
        column: 13,
        span: 2985..2986,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"shl\"",
        ),
        line: 133,
        column: 18,
        span: 2986..2991,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 133,
        column: 19,
        span: 2991..2992,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 134,
        column: 2,
        span: 2993..2994,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 134,
        column: 3,
        span: 2994..2995,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__shr",
        ),
        line: 134,
        column: 8,
        span: 2995..3000,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 134,
        column: 10,
        span: 3001..3002,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 134,
        column: 12,
        span: 3003..3004,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 13,
        span: 3004..3005,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"shr\"",
        ),
        line: 134,
        column: 18,
        span: 3005..3010,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 19,
        span: 3010..3011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 135,
        column: 2,
        span: 3012..3013,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 135,
        column: 3,
        span: 3013..3014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__bnot",
        ),
        line: 135,
        column: 9,
        span: 3014..3020,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 135,
        column: 11,
        span: 3021..3022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 135,
        column: 13,
        span: 3023..3024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 135,
        column: 14,
        span: 3024..3025,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bnot\"",
        ),
        line: 135,
        column: 20,
        span: 3025..3031,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 135,
        column: 21,
        span: 3031..3032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 137,
        column: 7,
        span: 3034..3040,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 8,
        span: 3040..3041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 137,
        column: 9,
        span: 3041..3042,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 137,
        column: 10,
        span: 3042..3043,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 137,
        column: 11,
        span: 3042..3044,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 137,
        column: 14,
        span: 3045..3047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 137,
        column: 16,
        span: 3048..3049,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 17,
        span: 3049..3050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 3051..3057,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 3057..3058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 138,
        column: 11,
        span: 3058..3061,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 138,
        column: 12,
        span: 3061..3062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 13,
        span: 3061..3063,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 138,
        column: 14,
        span: 3063..3064,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 17,
        span: 3065..3067,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 138,
        column: 23,
        span: 3068..3073,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 138,
        column: 27,
        span: 3074..3077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 138,
        column: 31,
        span: 3078..3081,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 138,
        column: 32,
        span: 3081..3082,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 33,
        span: 3081..3083,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 138,
        column: 34,
        span: 3083..3084,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 37,
        span: 3085..3087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 138,
        column: 39,
        span: 3088..3089,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 138,
        column: 43,
        span: 3090..3093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 138,
        column: 47,
        span: 3094..3097,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 138,
        column: 48,
        span: 3097..3098,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 49,
        span: 3097..3099,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 138,
        column: 50,
        span: 3099..3100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 53,
        span: 3101..3103,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 55,
        span: 3103..3105,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 138,
        column: 59,
        span: 3106..3109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 138,
        column: 63,
        span: 3110..3113,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 138,
        column: 64,
        span: 3113..3114,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 65,
        span: 3113..3115,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 138,
        column: 66,
        span: 3115..3116,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 68,
        span: 3116..3118,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 138,
        column: 71,
        span: 3118..3121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 72,
        span: 3121..3122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 139,
        column: 7,
        span: 3123..3129,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 8,
        span: 3129..3130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 139,
        column: 9,
        span: 3130..3131,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 139,
        column: 10,
        span: 3131..3132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 139,
        column: 13,
        span: 3132..3135,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 139,
        column: 16,
        span: 3136..3138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 139,
        column: 18,
        span: 3139..3140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 19,
        span: 3140..3141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 3142..3148,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 3148..3149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 140,
        column: 11,
        span: 3149..3152,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
        column: 12,
        span: 3152..3153,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 13,
        span: 3152..3154,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
        column: 14,
        span: 3154..3155,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 17,
        span: 3156..3158,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 140,
        column: 23,
        span: 3159..3164,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 140,
        column: 27,
        span: 3165..3168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 140,
        column: 31,
        span: 3169..3172,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
        column: 32,
        span: 3172..3173,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 33,
        span: 3172..3174,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
        column: 34,
        span: 3174..3175,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 37,
        span: 3176..3178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 140,
        column: 39,
        span: 3179..3180,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 140,
        column: 43,
        span: 3181..3184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 140,
        column: 47,
        span: 3185..3188,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
        column: 48,
        span: 3188..3189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 49,
        span: 3188..3190,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
        column: 50,
        span: 3190..3191,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 53,
        span: 3192..3194,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 140,
        column: 57,
        span: 3195..3198,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 140,
        column: 61,
        span: 3199..3202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 140,
        column: 65,
        span: 3203..3206,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 140,
        column: 66,
        span: 3206..3207,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 140,
        column: 67,
        span: 3206..3208,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 140,
        column: 68,
        span: 3208..3209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 140,
        column: 70,
        span: 3209..3211,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 140,
        column: 73,
        span: 3211..3214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 74,
        span: 3214..3215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 141,
        column: 7,
        span: 3216..3222,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 141,
        column: 8,
        span: 3222..3223,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 9,
        span: 3222..3224,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 141,
        column: 10,
        span: 3224..3225,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 141,
        column: 11,
        span: 3225..3226,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 141,
        column: 14,
        span: 3227..3229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 141,
        column: 16,
        span: 3229..3231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 141,
        column: 17,
        span: 3231..3232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
        column: 7,
        span: 3233..3239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 8,
        span: 3239..3240,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 142,
        column: 11,
        span: 3240..3243,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 142,
        column: 12,
        span: 3243..3244,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 13,
        span: 3243..3245,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 142,
        column: 14,
        span: 3245..3246,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 17,
        span: 3247..3249,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 142,
        column: 23,
        span: 3250..3255,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 142,
        column: 27,
        span: 3256..3259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 142,
        column: 31,
        span: 3260..3263,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 142,
        column: 32,
        span: 3263..3264,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 33,
        span: 3263..3265,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 142,
        column: 34,
        span: 3265..3266,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 37,
        span: 3267..3269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 39,
        span: 3269..3271,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 142,
        column: 43,
        span: 3272..3275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 142,
        column: 47,
        span: 3276..3279,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 142,
        column: 48,
        span: 3279..3280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 49,
        span: 3279..3281,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 142,
        column: 50,
        span: 3281..3282,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 53,
        span: 3283..3285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 142,
        column: 55,
        span: 3286..3287,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 142,
        column: 59,
        span: 3288..3291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 142,
        column: 63,
        span: 3292..3295,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 142,
        column: 64,
        span: 3295..3296,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 142,
        column: 65,
        span: 3295..3297,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 142,
        column: 66,
        span: 3297..3298,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 68,
        span: 3298..3300,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 142,
        column: 71,
        span: 3300..3303,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 72,
        span: 3303..3304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 143,
        column: 7,
        span: 3305..3311,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 8,
        span: 3311..3312,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 143,
        column: 11,
        span: 3312..3315,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 143,
        column: 12,
        span: 3315..3316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 143,
        column: 13,
        span: 3316..3317,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 16,
        span: 3318..3320,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 143,
        column: 20,
        span: 3321..3324,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 21,
        span: 3324..3325,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
        column: 7,
        span: 3326..3332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 8,
        span: 3332..3333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 144,
        column: 11,
        span: 3333..3336,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 144,
        column: 12,
        span: 3336..3337,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 13,
        span: 3336..3338,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 144,
        column: 14,
        span: 3338..3339,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 17,
        span: 3340..3342,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"add\"",
        ),
        line: 144,
        column: 23,
        span: 3343..3348,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 144,
        column: 27,
        span: 3349..3352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 144,
        column: 31,
        span: 3353..3356,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 144,
        column: 32,
        span: 3356..3357,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 33,
        span: 3356..3358,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 144,
        column: 34,
        span: 3358..3359,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 37,
        span: 3360..3362,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 144,
        column: 41,
        span: 3363..3366,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 144,
        column: 45,
        span: 3367..3370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 144,
        column: 49,
        span: 3371..3374,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 144,
        column: 50,
        span: 3374..3375,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 51,
        span: 3374..3376,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 144,
        column: 52,
        span: 3376..3377,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 55,
        span: 3378..3380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 144,
        column: 57,
        span: 3381..3382,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 144,
        column: 61,
        span: 3383..3386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 144,
        column: 65,
        span: 3387..3390,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 144,
        column: 66,
        span: 3390..3391,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 67,
        span: 3390..3392,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 144,
        column: 68,
        span: 3392..3393,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 70,
        span: 3393..3395,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 144,
        column: 73,
        span: 3395..3398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 74,
        span: 3398..3399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 145,
        column: 2,
        span: 3400..3401,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 3,
        span: 3401..3402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 145,
        column: 4,
        span: 3402..3403,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 145,
        column: 5,
        span: 3403..3404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 145,
        column: 6,
        span: 3403..3405,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 145,
        column: 7,
        span: 3405..3406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 145,
        column: 14,
        span: 3407..3413,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 15,
        span: 3413..3414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 145,
        column: 27,
        span: 3414..3426,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 145,
        column: 28,
        span: 3426..3427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 145,
        column: 29,
        span: 3427..3428,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 30,
        span: 3428..3429,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 145,
        column: 33,
        span: 3430..3432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 145,
        column: 35,
        span: 3433..3434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 145,
        column: 36,
        span: 3434..3435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 146,
        column: 7,
        span: 3436..3442,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 8,
        span: 3442..3443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 9,
        span: 3442..3444,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 146,
        column: 10,
        span: 3444..3445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 146,
        column: 11,
        span: 3445..3446,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 146,
        column: 14,
        span: 3447..3449,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 146,
        column: 16,
        span: 3449..3451,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 17,
        span: 3451..3452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 7,
        span: 3453..3459,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 8,
        span: 3459..3460,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 147,
        column: 11,
        span: 3460..3463,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 147,
        column: 12,
        span: 3463..3464,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 13,
        span: 3463..3465,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 147,
        column: 14,
        span: 3465..3466,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 17,
        span: 3467..3469,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        line: 147,
        column: 23,
        span: 3470..3475,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 147,
        column: 27,
        span: 3476..3479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 147,
        column: 31,
        span: 3480..3483,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 147,
        column: 32,
        span: 3483..3484,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 33,
        span: 3483..3485,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 147,
        column: 34,
        span: 3485..3486,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 37,
        span: 3487..3489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 39,
        span: 3489..3491,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 147,
        column: 43,
        span: 3492..3495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 147,
        column: 47,
        span: 3496..3499,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 147,
        column: 48,
        span: 3499..3500,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 49,
        span: 3499..3501,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 147,
        column: 50,
        span: 3501..3502,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 53,
        span: 3503..3505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 147,
        column: 55,
        span: 3506..3507,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 147,
        column: 59,
        span: 3508..3511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 147,
        column: 63,
        span: 3512..3515,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 147,
        column: 64,
        span: 3515..3516,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 147,
        column: 65,
        span: 3515..3517,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 147,
        column: 66,
        span: 3517..3518,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 147,
        column: 68,
        span: 3518..3520,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 147,
        column: 71,
        span: 3520..3523,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 72,
        span: 3523..3524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 7,
        span: 3525..3531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 8,
        span: 3531..3532,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 148,
        column: 11,
        span: 3532..3535,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 148,
        column: 12,
        span: 3535..3536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 148,
        column: 13,
        span: 3536..3537,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 16,
        span: 3538..3540,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 148,
        column: 20,
        span: 3541..3544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 21,
        span: 3544..3545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 7,
        span: 3546..3552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 8,
        span: 3552..3553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 149,
        column: 11,
        span: 3553..3556,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 149,
        column: 12,
        span: 3556..3557,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 13,
        span: 3556..3558,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 149,
        column: 14,
        span: 3558..3559,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 17,
        span: 3560..3562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"sub\"",
        ),
        line: 149,
        column: 23,
        span: 3563..3568,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 149,
        column: 27,
        span: 3569..3572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 149,
        column: 31,
        span: 3573..3576,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 149,
        column: 32,
        span: 3576..3577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 33,
        span: 3576..3578,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 149,
        column: 34,
        span: 3578..3579,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 37,
        span: 3580..3582,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'5'",
        ),
        line: 149,
        column: 41,
        span: 3583..3586,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 149,
        column: 45,
        span: 3587..3590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 149,
        column: 49,
        span: 3591..3594,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 149,
        column: 50,
        span: 3594..3595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 51,
        span: 3594..3596,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 149,
        column: 52,
        span: 3596..3597,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 55,
        span: 3598..3600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 149,
        column: 57,
        span: 3601..3602,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 149,
        column: 61,
        span: 3603..3606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 149,
        column: 65,
        span: 3607..3610,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 149,
        column: 66,
        span: 3610..3611,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 149,
        column: 67,
        span: 3610..3612,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 149,
        column: 68,
        span: 3612..3613,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 149,
        column: 70,
        span: 3613..3615,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 149,
        column: 73,
        span: 3615..3618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 74,
        span: 3618..3619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
        column: 7,
        span: 3620..3626,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 8,
        span: 3626..3627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 150,
        column: 9,
        span: 3627..3628,
    },
    Token {
        kind: Star,
        lexeme: Symbol(
            "*",
        ),
        line: 150,
        column: 10,
        span: 3628..3629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 150,
        column: 11,
        span: 3629..3630,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 14,
        span: 3631..3633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 150,
        column: 16,
        span: 3634..3635,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 17,
        span: 3635..3636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 151,
        column: 7,
        span: 3637..3643,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 151,
        column: 8,
        span: 3643..3644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 151,
        column: 11,
        span: 3644..3647,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 151,
        column: 12,
        span: 3647..3648,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 13,
        span: 3647..3649,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 151,
        column: 14,
        span: 3649..3650,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 151,
        column: 17,
        span: 3651..3653,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mul\"",
        ),
        line: 151,
        column: 23,
        span: 3654..3659,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 151,
        column: 27,
        span: 3660..3663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 151,
        column: 31,
        span: 3664..3667,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 151,
        column: 32,
        span: 3667..3668,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 33,
        span: 3667..3669,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 151,
        column: 34,
        span: 3669..3670,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 151,
        column: 37,
        span: 3671..3673,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 151,
        column: 39,
        span: 3674..3675,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 151,
        column: 43,
        span: 3676..3679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 151,
        column: 47,
        span: 3680..3683,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 151,
        column: 48,
        span: 3683..3684,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 49,
        span: 3683..3685,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 151,
        column: 50,
        span: 3685..3686,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 151,
        column: 53,
        span: 3687..3689,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 151,
        column: 55,
        span: 3690..3691,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 151,
        column: 59,
        span: 3692..3695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 151,
        column: 63,
        span: 3696..3699,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 151,
        column: 64,
        span: 3699..3700,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 151,
        column: 65,
        span: 3699..3701,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 151,
        column: 66,
        span: 3701..3702,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 151,
        column: 68,
        span: 3702..3704,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 151,
        column: 71,
        span: 3704..3707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 151,
        column: 72,
        span: 3707..3708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 152,
        column: 7,
        span: 3709..3715,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 8,
        span: 3715..3716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 152,
        column: 9,
        span: 3716..3717,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 152,
        column: 10,
        span: 3717..3718,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 152,
        column: 11,
        span: 3717..3719,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 152,
        column: 14,
        span: 3720..3722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 152,
        column: 16,
        span: 3723..3724,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 17,
        span: 3724..3725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 153,
        column: 7,
        span: 3726..3732,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 8,
        span: 3732..3733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 153,
        column: 11,
        span: 3733..3736,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 153,
        column: 12,
        span: 3736..3737,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 13,
        span: 3736..3738,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 153,
        column: 14,
        span: 3738..3739,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 17,
        span: 3740..3742,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"div\"",
        ),
        line: 153,
        column: 23,
        span: 3743..3748,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 153,
        column: 27,
        span: 3749..3752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 153,
        column: 31,
        span: 3753..3756,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 153,
        column: 32,
        span: 3756..3757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 33,
        span: 3756..3758,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 153,
        column: 34,
        span: 3758..3759,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 37,
        span: 3760..3762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 153,
        column: 39,
        span: 3763..3764,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 153,
        column: 43,
        span: 3765..3768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 153,
        column: 47,
        span: 3769..3772,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 153,
        column: 48,
        span: 3772..3773,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 49,
        span: 3772..3774,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 153,
        column: 50,
        span: 3774..3775,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 53,
        span: 3776..3778,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 55,
        span: 3778..3780,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 153,
        column: 59,
        span: 3781..3784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 153,
        column: 63,
        span: 3785..3788,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 153,
        column: 64,
        span: 3788..3789,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 153,
        column: 65,
        span: 3788..3790,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 153,
        column: 66,
        span: 3790..3791,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 153,
        column: 68,
        span: 3791..3793,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 153,
        column: 71,
        span: 3793..3796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 72,
        span: 3796..3797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 154,
        column: 7,
        span: 3798..3804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 154,
        column: 8,
        span: 3804..3805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 154,
        column: 9,
        span: 3805..3806,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 154,
        column: 10,
        span: 3806..3807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 154,
        column: 11,
        span: 3806..3808,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 154,
        column: 14,
        span: 3809..3811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 154,
        column: 16,
        span: 3812..3813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 154,
        column: 17,
        span: 3813..3814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 155,
        column: 7,
        span: 3815..3821,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 8,
        span: 3821..3822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 155,
        column: 11,
        span: 3822..3825,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 155,
        column: 12,
        span: 3825..3826,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 13,
        span: 3825..3827,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 155,
        column: 14,
        span: 3827..3828,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 155,
        column: 17,
        span: 3829..3831,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"mod\"",
        ),
        line: 155,
        column: 23,
        span: 3832..3837,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 155,
        column: 27,
        span: 3838..3841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 155,
        column: 31,
        span: 3842..3845,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 155,
        column: 32,
        span: 3845..3846,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 33,
        span: 3845..3847,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 155,
        column: 34,
        span: 3847..3848,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 155,
        column: 37,
        span: 3849..3851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 155,
        column: 39,
        span: 3852..3853,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 155,
        column: 43,
        span: 3854..3857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 155,
        column: 47,
        span: 3858..3861,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 155,
        column: 48,
        span: 3861..3862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 49,
        span: 3861..3863,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 155,
        column: 50,
        span: 3863..3864,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 155,
        column: 53,
        span: 3865..3867,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 55,
        span: 3867..3869,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 155,
        column: 59,
        span: 3870..3873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 155,
        column: 63,
        span: 3874..3877,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 155,
        column: 64,
        span: 3877..3878,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 155,
        column: 65,
        span: 3877..3879,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 155,
        column: 66,
        span: 3879..3880,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 155,
        column: 68,
        span: 3880..3882,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 155,
        column: 71,
        span: 3882..3885,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 72,
        span: 3885..3886,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 156,
        column: 7,
        span: 3887..3893,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 8,
        span: 3893..3894,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 156,
        column: 9,
        span: 3894..3895,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 156,
        column: 12,
        span: 3896..3898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 156,
        column: 14,
        span: 3899..3900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 15,
        span: 3899..3901,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 156,
        column: 16,
        span: 3901..3902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 156,
        column: 17,
        span: 3901..3903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 18,
        span: 3903..3904,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 156,
        column: 21,
        span: 3905..3907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 156,
        column: 23,
        span: 3908..3909,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 156,
        column: 24,
        span: 3909..3910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 157,
        column: 7,
        span: 3911..3917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 8,
        span: 3917..3918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 157,
        column: 11,
        span: 3918..3921,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 157,
        column: 12,
        span: 3921..3922,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 13,
        span: 3921..3923,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 157,
        column: 14,
        span: 3923..3924,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 157,
        column: 17,
        span: 3925..3927,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"idiv\"",
        ),
        line: 157,
        column: 24,
        span: 3928..3934,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 157,
        column: 28,
        span: 3935..3938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 157,
        column: 32,
        span: 3939..3942,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 157,
        column: 33,
        span: 3942..3943,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 34,
        span: 3942..3944,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 157,
        column: 35,
        span: 3944..3945,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 157,
        column: 38,
        span: 3946..3948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 157,
        column: 40,
        span: 3949..3950,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 157,
        column: 44,
        span: 3951..3954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 157,
        column: 48,
        span: 3955..3958,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 157,
        column: 49,
        span: 3958..3959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 50,
        span: 3958..3960,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 157,
        column: 51,
        span: 3960..3961,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 157,
        column: 54,
        span: 3962..3964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 56,
        span: 3964..3966,
    },
    Token {
        kind: Slash,
        lexeme: Symbol(
            "/",
        ),
        line: 157,
        column: 57,
        span: 3966..3967,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 58,
        span: 3966..3968,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 157,
        column: 62,
        span: 3969..3972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 157,
        column: 66,
        span: 3973..3976,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 157,
        column: 67,
        span: 3976..3977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 157,
        column: 68,
        span: 3976..3978,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 157,
        column: 69,
        span: 3978..3979,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 157,
        column: 71,
        span: 3979..3981,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 157,
        column: 74,
        span: 3981..3984,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 75,
        span: 3984..3985,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 158,
        column: 7,
        span: 3986..3992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 8,
        span: 3992..3993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 158,
        column: 9,
        span: 3993..3994,
    },
    Token {
        kind: BitAnd,
        lexeme: Symbol(
            "&",
        ),
        line: 158,
        column: 11,
        span: 3995..3996,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 158,
        column: 16,
        span: 3997..4001,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 158,
        column: 19,
        span: 4002..4004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 158,
        column: 21,
        span: 4005..4006,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 22,
        span: 4006..4007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
        column: 7,
        span: 4008..4014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 8,
        span: 4014..4015,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 159,
        column: 11,
        span: 4015..4018,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 159,
        column: 12,
        span: 4018..4019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 13,
        span: 4018..4020,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 159,
        column: 14,
        span: 4020..4021,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
        column: 17,
        span: 4022..4024,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"band\"",
        ),
        line: 159,
        column: 24,
        span: 4025..4031,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 159,
        column: 28,
        span: 4032..4035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 159,
        column: 32,
        span: 4036..4039,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 159,
        column: 33,
        span: 4039..4040,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 34,
        span: 4039..4041,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 159,
        column: 35,
        span: 4041..4042,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
        column: 38,
        span: 4043..4045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 159,
        column: 40,
        span: 4046..4047,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 159,
        column: 44,
        span: 4048..4051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 159,
        column: 48,
        span: 4052..4055,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 159,
        column: 49,
        span: 4055..4056,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 50,
        span: 4055..4057,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 159,
        column: 51,
        span: 4057..4058,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
        column: 54,
        span: 4059..4061,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 159,
        column: 59,
        span: 4062..4066,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 159,
        column: 63,
        span: 4067..4070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 159,
        column: 67,
        span: 4071..4074,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 159,
        column: 68,
        span: 4074..4075,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 159,
        column: 69,
        span: 4074..4076,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 159,
        column: 70,
        span: 4076..4077,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
        column: 72,
        span: 4077..4079,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 159,
        column: 75,
        span: 4079..4082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 76,
        span: 4082..4083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 160,
        column: 7,
        span: 4084..4090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 160,
        column: 8,
        span: 4090..4091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 160,
        column: 9,
        span: 4091..4092,
    },
    Token {
        kind: BitOr,
        lexeme: Symbol(
            "|",
        ),
        line: 160,
        column: 11,
        span: 4093..4094,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 160,
        column: 16,
        span: 4095..4099,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 160,
        column: 19,
        span: 4100..4102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 160,
        column: 21,
        span: 4103..4104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 160,
        column: 22,
        span: 4104..4105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 161,
        column: 7,
        span: 4106..4112,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 8,
        span: 4112..4113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 161,
        column: 11,
        span: 4113..4116,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 161,
        column: 12,
        span: 4116..4117,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 13,
        span: 4116..4118,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 161,
        column: 14,
        span: 4118..4119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
        column: 17,
        span: 4120..4122,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bor\"",
        ),
        line: 161,
        column: 23,
        span: 4123..4128,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 161,
        column: 27,
        span: 4129..4132,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 161,
        column: 31,
        span: 4133..4136,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 161,
        column: 32,
        span: 4136..4137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 33,
        span: 4136..4138,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 161,
        column: 34,
        span: 4138..4139,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
        column: 37,
        span: 4140..4142,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 161,
        column: 39,
        span: 4143..4144,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 161,
        column: 43,
        span: 4145..4148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 161,
        column: 47,
        span: 4149..4152,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 161,
        column: 48,
        span: 4152..4153,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 49,
        span: 4152..4154,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 161,
        column: 50,
        span: 4154..4155,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
        column: 53,
        span: 4156..4158,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 161,
        column: 58,
        span: 4159..4163,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 161,
        column: 62,
        span: 4164..4167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 161,
        column: 66,
        span: 4168..4171,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 161,
        column: 67,
        span: 4171..4172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 161,
        column: 68,
        span: 4171..4173,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 161,
        column: 69,
        span: 4173..4174,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 161,
        column: 71,
        span: 4174..4176,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 161,
        column: 74,
        span: 4176..4179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 75,
        span: 4179..4180,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 162,
        column: 7,
        span: 4181..4187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 8,
        span: 4187..4188,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 162,
        column: 12,
        span: 4188..4192,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 162,
        column: 14,
        span: 4193..4194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 162,
        column: 16,
        span: 4195..4196,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 162,
        column: 19,
        span: 4197..4199,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 162,
        column: 24,
        span: 4200..4204,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 25,
        span: 4204..4205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 163,
        column: 7,
        span: 4206..4212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 8,
        span: 4212..4213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 163,
        column: 11,
        span: 4213..4216,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 163,
        column: 12,
        span: 4216..4217,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 13,
        span: 4216..4218,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 163,
        column: 14,
        span: 4218..4219,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 17,
        span: 4220..4222,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bxor\"",
        ),
        line: 163,
        column: 24,
        span: 4223..4229,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 163,
        column: 28,
        span: 4230..4233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 163,
        column: 32,
        span: 4234..4237,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 163,
        column: 33,
        span: 4237..4238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 34,
        span: 4237..4239,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 163,
        column: 35,
        span: 4239..4240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 38,
        span: 4241..4243,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"hi\"",
        ),
        line: 163,
        column: 43,
        span: 4244..4248,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 163,
        column: 47,
        span: 4249..4252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 163,
        column: 51,
        span: 4253..4256,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 163,
        column: 52,
        span: 4256..4257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 53,
        span: 4256..4258,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 163,
        column: 54,
        span: 4258..4259,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 57,
        span: 4260..4262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 163,
        column: 59,
        span: 4263..4264,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 163,
        column: 63,
        span: 4265..4268,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 163,
        column: 67,
        span: 4269..4272,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 163,
        column: 68,
        span: 4272..4273,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 163,
        column: 69,
        span: 4272..4274,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 163,
        column: 70,
        span: 4274..4275,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 72,
        span: 4275..4277,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 163,
        column: 75,
        span: 4277..4280,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 76,
        span: 4280..4281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 164,
        column: 7,
        span: 4282..4288,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 164,
        column: 8,
        span: 4288..4289,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 164,
        column: 9,
        span: 4289..4290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
        column: 10,
        span: 4290..4291,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 164,
        column: 13,
        span: 4292..4294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 164,
        column: 15,
        span: 4295..4296,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 164,
        column: 16,
        span: 4296..4297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 165,
        column: 7,
        span: 4298..4304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 165,
        column: 8,
        span: 4304..4305,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 165,
        column: 11,
        span: 4305..4308,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 165,
        column: 12,
        span: 4308..4309,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 13,
        span: 4308..4310,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 165,
        column: 14,
        span: 4310..4311,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 165,
        column: 17,
        span: 4312..4314,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"unm\"",
        ),
        line: 165,
        column: 23,
        span: 4315..4320,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 165,
        column: 27,
        span: 4321..4324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 165,
        column: 31,
        span: 4325..4328,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 165,
        column: 32,
        span: 4328..4329,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 165,
        column: 33,
        span: 4328..4330,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 165,
        column: 34,
        span: 4330..4331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 165,
        column: 37,
        span: 4332..4334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 165,
        column: 39,
        span: 4335..4336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 165,
        column: 40,
        span: 4336..4337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 166,
        column: 7,
        span: 4338..4344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 8,
        span: 4344..4345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 166,
        column: 9,
        span: 4345..4346,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 166,
        column: 10,
        span: 4346..4347,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 166,
        column: 11,
        span: 4346..4348,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 166,
        column: 14,
        span: 4349..4351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 166,
        column: 16,
        span: 4352..4353,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 17,
        span: 4353..4354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 167,
        column: 7,
        span: 4355..4361,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 167,
        column: 8,
        span: 4361..4362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 167,
        column: 11,
        span: 4362..4365,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 167,
        column: 12,
        span: 4365..4366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 13,
        span: 4365..4367,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 167,
        column: 14,
        span: 4367..4368,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 167,
        column: 17,
        span: 4369..4371,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 167,
        column: 23,
        span: 4372..4377,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 167,
        column: 27,
        span: 4378..4381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 167,
        column: 31,
        span: 4382..4385,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 167,
        column: 32,
        span: 4385..4386,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 33,
        span: 4385..4387,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 167,
        column: 34,
        span: 4387..4388,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 167,
        column: 37,
        span: 4389..4391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 167,
        column: 39,
        span: 4392..4393,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 167,
        column: 43,
        span: 4394..4397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 167,
        column: 47,
        span: 4398..4401,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 167,
        column: 48,
        span: 4401..4402,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 49,
        span: 4401..4403,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 167,
        column: 50,
        span: 4403..4404,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 167,
        column: 53,
        span: 4405..4407,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 55,
        span: 4407..4409,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 167,
        column: 59,
        span: 4410..4413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 167,
        column: 63,
        span: 4414..4417,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 167,
        column: 64,
        span: 4417..4418,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 167,
        column: 65,
        span: 4417..4419,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 167,
        column: 66,
        span: 4419..4420,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 167,
        column: 68,
        span: 4420..4422,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 167,
        column: 71,
        span: 4422..4425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 167,
        column: 72,
        span: 4425..4426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 168,
        column: 7,
        span: 4427..4433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 168,
        column: 8,
        span: 4433..4434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 168,
        column: 9,
        span: 4434..4435,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 168,
        column: 10,
        span: 4435..4436,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'4'",
        ),
        line: 168,
        column: 13,
        span: 4436..4439,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 168,
        column: 16,
        span: 4440..4442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 168,
        column: 18,
        span: 4443..4444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 168,
        column: 19,
        span: 4444..4445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 169,
        column: 7,
        span: 4446..4452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 8,
        span: 4452..4453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 169,
        column: 11,
        span: 4453..4456,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 12,
        span: 4456..4457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 13,
        span: 4456..4458,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 14,
        span: 4458..4459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 17,
        span: 4460..4462,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 169,
        column: 23,
        span: 4463..4468,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 27,
        span: 4469..4472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 169,
        column: 31,
        span: 4473..4476,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 32,
        span: 4476..4477,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 33,
        span: 4476..4478,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 34,
        span: 4478..4479,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 37,
        span: 4480..4482,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 169,
        column: 39,
        span: 4483..4484,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 43,
        span: 4485..4488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 169,
        column: 47,
        span: 4489..4492,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 48,
        span: 4492..4493,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 49,
        span: 4492..4494,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 50,
        span: 4494..4495,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 53,
        span: 4496..4498,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'4'",
        ),
        line: 169,
        column: 57,
        span: 4499..4502,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 169,
        column: 61,
        span: 4503..4506,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 169,
        column: 65,
        span: 4507..4510,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 169,
        column: 66,
        span: 4510..4511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 169,
        column: 67,
        span: 4510..4512,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 169,
        column: 68,
        span: 4512..4513,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 169,
        column: 70,
        span: 4513..4515,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 169,
        column: 73,
        span: 4515..4518,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 74,
        span: 4518..4519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 170,
        column: 7,
        span: 4520..4526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 170,
        column: 8,
        span: 4526..4527,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 9,
        span: 4526..4528,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 170,
        column: 10,
        span: 4528..4529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 170,
        column: 11,
        span: 4529..4530,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 170,
        column: 14,
        span: 4531..4533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 170,
        column: 16,
        span: 4533..4535,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 170,
        column: 17,
        span: 4535..4536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 171,
        column: 7,
        span: 4537..4543,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 171,
        column: 8,
        span: 4543..4544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 171,
        column: 11,
        span: 4544..4547,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 171,
        column: 12,
        span: 4547..4548,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 13,
        span: 4547..4549,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 171,
        column: 14,
        span: 4549..4550,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
        column: 17,
        span: 4551..4553,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 171,
        column: 23,
        span: 4554..4559,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 171,
        column: 27,
        span: 4560..4563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 171,
        column: 31,
        span: 4564..4567,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 171,
        column: 32,
        span: 4567..4568,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 33,
        span: 4567..4569,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 171,
        column: 34,
        span: 4569..4570,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
        column: 37,
        span: 4571..4573,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 39,
        span: 4573..4575,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 171,
        column: 43,
        span: 4576..4579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 171,
        column: 47,
        span: 4580..4583,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 171,
        column: 48,
        span: 4583..4584,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 49,
        span: 4583..4585,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 171,
        column: 50,
        span: 4585..4586,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
        column: 53,
        span: 4587..4589,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 171,
        column: 55,
        span: 4590..4591,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 171,
        column: 59,
        span: 4592..4595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 171,
        column: 63,
        span: 4596..4599,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 171,
        column: 64,
        span: 4599..4600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 171,
        column: 65,
        span: 4599..4601,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 171,
        column: 66,
        span: 4601..4602,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 171,
        column: 68,
        span: 4602..4604,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 171,
        column: 71,
        span: 4604..4607,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 171,
        column: 72,
        span: 4607..4608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 172,
        column: 7,
        span: 4609..4615,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 172,
        column: 8,
        span: 4615..4616,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'4'",
        ),
        line: 172,
        column: 11,
        span: 4616..4619,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 172,
        column: 12,
        span: 4619..4620,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 172,
        column: 13,
        span: 4620..4621,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 172,
        column: 16,
        span: 4622..4624,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'4'",
        ),
        line: 172,
        column: 20,
        span: 4625..4628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 172,
        column: 21,
        span: 4628..4629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 173,
        column: 7,
        span: 4630..4636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 173,
        column: 8,
        span: 4636..4637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 173,
        column: 11,
        span: 4637..4640,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 173,
        column: 12,
        span: 4640..4641,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 13,
        span: 4640..4642,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 173,
        column: 14,
        span: 4642..4643,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 17,
        span: 4644..4646,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pow\"",
        ),
        line: 173,
        column: 23,
        span: 4647..4652,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 173,
        column: 27,
        span: 4653..4656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 173,
        column: 31,
        span: 4657..4660,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 173,
        column: 32,
        span: 4660..4661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 33,
        span: 4660..4662,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 173,
        column: 34,
        span: 4662..4663,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 37,
        span: 4664..4666,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'4'",
        ),
        line: 173,
        column: 41,
        span: 4667..4670,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 173,
        column: 45,
        span: 4671..4674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 173,
        column: 49,
        span: 4675..4678,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 173,
        column: 50,
        span: 4678..4679,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 51,
        span: 4678..4680,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 173,
        column: 52,
        span: 4680..4681,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 55,
        span: 4682..4684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 173,
        column: 57,
        span: 4685..4686,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 173,
        column: 61,
        span: 4687..4690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 173,
        column: 65,
        span: 4691..4694,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 173,
        column: 66,
        span: 4694..4695,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 173,
        column: 67,
        span: 4694..4696,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 173,
        column: 68,
        span: 4696..4697,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 173,
        column: 70,
        span: 4697..4699,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 173,
        column: 73,
        span: 4699..4702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 173,
        column: 74,
        span: 4702..4703,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 174,
        column: 7,
        span: 4704..4710,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 174,
        column: 8,
        span: 4710..4711,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 174,
        column: 9,
        span: 4711..4712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 174,
        column: 10,
        span: 4712..4713,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 174,
        column: 13,
        span: 4714..4716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 174,
        column: 15,
        span: 4717..4718,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 174,
        column: 16,
        span: 4718..4719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 175,
        column: 7,
        span: 4720..4726,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 175,
        column: 8,
        span: 4726..4727,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 175,
        column: 11,
        span: 4727..4730,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 175,
        column: 12,
        span: 4730..4731,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 13,
        span: 4730..4732,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 175,
        column: 14,
        span: 4732..4733,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 17,
        span: 4734..4736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"len\"",
        ),
        line: 175,
        column: 23,
        span: 4737..4742,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 175,
        column: 27,
        span: 4743..4746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 175,
        column: 31,
        span: 4747..4750,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 175,
        column: 32,
        span: 4750..4751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 175,
        column: 33,
        span: 4750..4752,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 175,
        column: 34,
        span: 4752..4753,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 175,
        column: 37,
        span: 4754..4756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 175,
        column: 39,
        span: 4757..4758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 175,
        column: 40,
        span: 4758..4759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 176,
        column: 7,
        span: 4760..4766,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 8,
        span: 4766..4767,
    },
    Token {
        kind: Tilde,
        lexeme: Symbol(
            "~",
        ),
        line: 176,
        column: 9,
        span: 4767..4768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 176,
        column: 10,
        span: 4768..4769,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 176,
        column: 13,
        span: 4770..4772,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 176,
        column: 15,
        span: 4773..4774,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 16,
        span: 4774..4775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 177,
        column: 7,
        span: 4776..4782,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 177,
        column: 8,
        span: 4782..4783,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 177,
        column: 11,
        span: 4783..4786,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 177,
        column: 12,
        span: 4786..4787,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 13,
        span: 4786..4788,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 177,
        column: 14,
        span: 4788..4789,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
        column: 17,
        span: 4790..4792,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"bnot\"",
        ),
        line: 177,
        column: 24,
        span: 4793..4799,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 177,
        column: 28,
        span: 4800..4803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 177,
        column: 32,
        span: 4804..4807,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 177,
        column: 33,
        span: 4807..4808,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 177,
        column: 34,
        span: 4807..4809,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 177,
        column: 35,
        span: 4809..4810,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 177,
        column: 38,
        span: 4811..4813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 177,
        column: 40,
        span: 4814..4815,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 177,
        column: 41,
        span: 4815..4816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 178,
        column: 7,
        span: 4817..4823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 178,
        column: 8,
        span: 4823..4824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 178,
        column: 9,
        span: 4824..4825,
    },
    Token {
        kind: BitShiftLeft,
        lexeme: Symbol(
            "<<",
        ),
        line: 178,
        column: 12,
        span: 4826..4828,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 178,
        column: 14,
        span: 4828..4830,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 178,
        column: 17,
        span: 4831..4833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 178,
        column: 19,
        span: 4834..4835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 178,
        column: 20,
        span: 4835..4836,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 179,
        column: 7,
        span: 4837..4843,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 179,
        column: 8,
        span: 4843..4844,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 179,
        column: 11,
        span: 4844..4847,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 179,
        column: 12,
        span: 4847..4848,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 13,
        span: 4847..4849,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 179,
        column: 14,
        span: 4849..4850,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 179,
        column: 17,
        span: 4851..4853,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"shl\"",
        ),
        line: 179,
        column: 23,
        span: 4854..4859,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 179,
        column: 27,
        span: 4860..4863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 179,
        column: 31,
        span: 4864..4867,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 179,
        column: 32,
        span: 4867..4868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 33,
        span: 4867..4869,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 179,
        column: 34,
        span: 4869..4870,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 179,
        column: 37,
        span: 4871..4873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 179,
        column: 39,
        span: 4874..4875,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 179,
        column: 43,
        span: 4876..4879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 179,
        column: 47,
        span: 4880..4883,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 179,
        column: 48,
        span: 4883..4884,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 49,
        span: 4883..4885,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 179,
        column: 50,
        span: 4885..4886,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 179,
        column: 53,
        span: 4887..4889,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 179,
        column: 55,
        span: 4889..4891,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 179,
        column: 56,
        span: 4891..4892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 180,
        column: 7,
        span: 4893..4899,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 180,
        column: 8,
        span: 4899..4900,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 180,
        column: 11,
        span: 4899..4903,
    },
    Token {
        kind: BitShiftRight,
        lexeme: Symbol(
            ">>",
        ),
        line: 180,
        column: 14,
        span: 4904..4906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 180,
        column: 16,
        span: 4907..4908,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 180,
        column: 19,
        span: 4909..4911,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 180,
        column: 23,
        span: 4911..4915,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 180,
        column: 24,
        span: 4915..4916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 181,
        column: 7,
        span: 4917..4923,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 181,
        column: 8,
        span: 4923..4924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 181,
        column: 11,
        span: 4924..4927,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 181,
        column: 12,
        span: 4927..4928,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 13,
        span: 4927..4929,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 181,
        column: 14,
        span: 4929..4930,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 17,
        span: 4931..4933,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"shr\"",
        ),
        line: 181,
        column: 23,
        span: 4934..4939,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 181,
        column: 27,
        span: 4940..4943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 181,
        column: 31,
        span: 4944..4947,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 181,
        column: 32,
        span: 4947..4948,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 33,
        span: 4947..4949,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 181,
        column: 34,
        span: 4949..4950,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 37,
        span: 4951..4953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 181,
        column: 41,
        span: 4953..4957,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 181,
        column: 45,
        span: 4958..4961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cap",
        ),
        line: 181,
        column: 49,
        span: 4962..4965,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 181,
        column: 50,
        span: 4965..4966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 181,
        column: 51,
        span: 4965..4967,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 181,
        column: 52,
        span: 4967..4968,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 181,
        column: 55,
        span: 4969..4971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 181,
        column: 57,
        span: 4972..4973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 181,
        column: 58,
        span: 4973..4974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 185,
        column: 2,
        span: 4996..4997,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 4,
        span: 4998..4999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 185,
        column: 17,
        span: 5000..5012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 18,
        span: 5012..5013,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 185,
        column: 19,
        span: 5013..5014,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 20,
        span: 5013..5015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 21,
        span: 5015..5016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 22,
        span: 5015..5017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 23,
        span: 5017..5018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 24,
        span: 5017..5019,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 185,
        column: 25,
        span: 5019..5020,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 185,
        column: 26,
        span: 5020..5021,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 185,
        column: 28,
        span: 5022..5023,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 185,
        column: 33,
        span: 5023..5028,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 185,
        column: 35,
        span: 5029..5030,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 185,
        column: 44,
        span: 5031..5039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 185,
        column: 46,
        span: 5040..5041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 47,
        span: 5041..5042,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 185,
        column: 54,
        span: 5043..5049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 185,
        column: 57,
        span: 5049..5052,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 185,
        column: 61,
        span: 5053..5056,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 185,
        column: 62,
        span: 5056..5057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 185,
        column: 63,
        span: 5057..5058,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 7,
        span: 5059..5065,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 8,
        span: 5065..5066,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 186,
        column: 9,
        span: 5066..5067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 186,
        column: 10,
        span: 5067..5068,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 186,
        column: 13,
        span: 5069..5071,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 16,
        span: 5071..5074,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 186,
        column: 20,
        span: 5075..5078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 186,
        column: 27,
        span: 5079..5085,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 28,
        span: 5085..5086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 186,
        column: 29,
        span: 5086..5087,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 30,
        span: 5087..5088,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 186,
        column: 33,
        span: 5089..5091,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 186,
        column: 35,
        span: 5091..5093,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 36,
        span: 5093..5094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 7,
        span: 5095..5101,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 8,
        span: 5101..5102,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 187,
        column: 14,
        span: 5102..5108,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"abc\"",
        ),
        line: 187,
        column: 19,
        span: 5108..5113,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 22,
        span: 5114..5116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 24,
        span: 5116..5118,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 25,
        span: 5118..5119,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 188,
        column: 7,
        span: 5120..5126,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 8,
        span: 5126..5127,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 188,
        column: 11,
        span: 5127..5130,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 188,
        column: 17,
        span: 5131..5136,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 18,
        span: 5136..5137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 188,
        column: 24,
        span: 5137..5143,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 188,
        column: 25,
        span: 5143..5144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 188,
        column: 28,
        span: 5145..5147,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 188,
        column: 29,
        span: 5147..5148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "stdin",
        ),
        line: 188,
        column: 34,
        span: 5148..5153,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 35,
        span: 5153..5154,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 36,
        span: 5154..5155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 189,
        column: 7,
        span: 5156..5162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 8,
        span: 5162..5163,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 189,
        column: 11,
        span: 5163..5166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 189,
        column: 17,
        span: 5167..5172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 18,
        span: 5172..5173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 189,
        column: 24,
        span: 5173..5179,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 189,
        column: 25,
        span: 5179..5180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "34",
                    after_decimal: "",
                },
            ),
        ),
        line: 189,
        column: 28,
        span: 5180..5183,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 29,
        span: 5183..5184,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 30,
        span: 5184..5185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 190,
        column: 7,
        span: 5186..5192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 8,
        span: 5192..5193,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 190,
        column: 11,
        span: 5193..5196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 190,
        column: 17,
        span: 5197..5202,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 190,
        column: 18,
        span: 5202..5203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 190,
        column: 24,
        span: 5203..5209,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 25,
        span: 5209..5210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 190,
        column: 26,
        span: 5210..5211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 7,
        span: 5240..5246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 8,
        span: 5246..5247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawlen",
        ),
        line: 193,
        column: 14,
        span: 5247..5253,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 15,
        span: 5253..5254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 193,
        column: 21,
        span: 5254..5260,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 193,
        column: 22,
        span: 5260..5261,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 193,
        column: 25,
        span: 5261..5264,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 26,
        span: 5264..5265,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 193,
        column: 29,
        span: 5265..5268,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 193,
        column: 30,
        span: 5268..5269,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 35,
        span: 5269..5274,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 36,
        span: 5274..5275,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 37,
        span: 5275..5276,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 40,
        span: 5277..5279,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1000",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 45,
        span: 5279..5284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 46,
        span: 5284..5285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 196,
        column: 2,
        span: 5288..5289,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 196,
        column: 4,
        span: 5290..5291,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 196,
        column: 6,
        span: 5292..5293,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 196,
        column: 7,
        span: 5293..5294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 197,
        column: 2,
        span: 5295..5296,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 197,
        column: 3,
        span: 5296..5297,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 197,
        column: 7,
        span: 5297..5301,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 197,
        column: 9,
        span: 5302..5303,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 197,
        column: 18,
        span: 5304..5312,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 197,
        column: 20,
        span: 5313..5314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 197,
        column: 21,
        span: 5314..5315,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 197,
        column: 22,
        span: 5315..5316,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 197,
        column: 23,
        span: 5316..5317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 197,
        column: 24,
        span: 5317..5318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 197,
        column: 25,
        span: 5318..5319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 197,
        column: 26,
        span: 5319..5320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "collectgarbage",
        ),
        line: 198,
        column: 17,
        span: 5323..5337,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 198,
        column: 18,
        span: 5337..5338,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 198,
        column: 19,
        span: 5338..5339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 199,
        column: 9,
        span: 5342..5348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 10,
        span: 5348..5349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 199,
        column: 11,
        span: 5349..5350,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 199,
        column: 14,
        span: 5351..5353,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 199,
        column: 18,
        span: 5354..5357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 19,
        span: 5357..5358,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 200,
        column: 5,
        span: 5361..5363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 200,
        column: 10,
        span: 5364..5368,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 200,
        column: 11,
        span: 5368..5369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 200,
        column: 12,
        span: 5369..5370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 200,
        column: 13,
        span: 5370..5371,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 200,
        column: 16,
        span: 5372..5374,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 200,
        column: 24,
        span: 5375..5382,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 200,
        column: 29,
        span: 5383..5387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 200,
        column: 31,
        span: 5388..5389,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 200,
        column: 33,
        span: 5390..5391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 200,
        column: 35,
        span: 5392..5393,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 200,
        column: 36,
        span: 5393..5394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 200,
        column: 37,
        span: 5394..5395,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 200,
        column: 0,
        span: 5396..5399,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 201,
        column: 5,
        span: 5402..5404,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 201,
        column: 10,
        span: 5405..5409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 201,
        column: 11,
        span: 5409..5410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 201,
        column: 12,
        span: 5410..5411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 201,
        column: 13,
        span: 5411..5412,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 201,
        column: 16,
        span: 5413..5415,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 201,
        column: 24,
        span: 5416..5423,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 201,
        column: 29,
        span: 5424..5428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 201,
        column: 31,
        span: 5429..5430,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 201,
        column: 33,
        span: 5431..5432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 201,
        column: 35,
        span: 5433..5434,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 201,
        column: 36,
        span: 5434..5435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 201,
        column: 37,
        span: 5435..5436,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 201,
        column: 0,
        span: 5437..5440,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 202,
        column: 8,
        span: 5442..5448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 202,
        column: 10,
        span: 5449..5450,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 202,
        column: 11,
        span: 5450..5451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 202,
        column: 12,
        span: 5451..5452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 202,
        column: 13,
        span: 5452..5453,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dummy\"",
        ),
        line: 202,
        column: 21,
        span: 5454..5461,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 203,
        column: 0,
        span: 5462..5465,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 205,
        column: 9,
        span: 5467..5475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 205,
        column: 12,
        span: 5476..5478,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 13,
        span: 5478..5479,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 205,
        column: 14,
        span: 5479..5480,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 15,
        span: 5480..5481,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 205,
        column: 22,
        span: 5482..5488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 205,
        column: 35,
        span: 5489..5501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 36,
        span: 5501..5502,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 205,
        column: 37,
        span: 5502..5503,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 205,
        column: 38,
        span: 5503..5504,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 205,
        column: 39,
        span: 5504..5505,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 205,
        column: 40,
        span: 5505..5506,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 205,
        column: 41,
        span: 5506..5507,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 42,
        span: 5507..5508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 205,
        column: 44,
        span: 5509..5510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 45,
        span: 5510..5511,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 205,
        column: 0,
        span: 5512..5515,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 207,
        column: 6,
        span: 5517..5522,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 207,
        column: 15,
        span: 5523..5531,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 207,
        column: 20,
        span: 5532..5536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 207,
        column: 22,
        span: 5537..5538,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 207,
        column: 23,
        span: 5538..5539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 208,
        column: 9,
        span: 5542..5548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 10,
        span: 5548..5549,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 208,
        column: 13,
        span: 5549..5552,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 14,
        span: 5552..5553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 208,
        column: 16,
        span: 5553..5555,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 17,
        span: 5555..5556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 18,
        span: 5555..5557,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 19,
        span: 5557..5558,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 208,
        column: 20,
        span: 5558..5559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 208,
        column: 22,
        span: 5559..5561,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 23,
        span: 5561..5562,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 24,
        span: 5561..5563,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 25,
        span: 5563..5564,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 26,
        span: 5564..5565,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 208,
        column: 30,
        span: 5566..5569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 32,
        span: 5570..5571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 208,
        column: 34,
        span: 5571..5573,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 35,
        span: 5573..5574,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 36,
        span: 5573..5575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 37,
        span: 5575..5576,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 208,
        column: 38,
        span: 5576..5577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 208,
        column: 40,
        span: 5577..5579,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 41,
        span: 5579..5580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 42,
        span: 5579..5581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 43,
        span: 5581..5582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 44,
        span: 5582..5583,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 208,
        column: 48,
        span: 5584..5587,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 208,
        column: 52,
        span: 5588..5591,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 53,
        span: 5591..5592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 208,
        column: 55,
        span: 5592..5594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 56,
        span: 5594..5595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 57,
        span: 5594..5596,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 58,
        span: 5596..5597,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 208,
        column: 59,
        span: 5597..5598,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 208,
        column: 61,
        span: 5598..5600,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 208,
        column: 62,
        span: 5600..5601,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 208,
        column: 63,
        span: 5600..5602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 64,
        span: 5602..5603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 65,
        span: 5603..5604,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 208,
        column: 66,
        span: 5604..5605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 209,
        column: 9,
        span: 5608..5614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 10,
        span: 5614..5615,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 209,
        column: 13,
        span: 5615..5618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 14,
        span: 5618..5619,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 15,
        span: 5618..5620,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 209,
        column: 17,
        span: 5621..5622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 209,
        column: 20,
        span: 5623..5625,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 21,
        span: 5625..5626,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 22,
        span: 5625..5627,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 23,
        span: 5627..5628,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 24,
        span: 5628..5629,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 209,
        column: 28,
        span: 5630..5633,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 30,
        span: 5634..5635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 209,
        column: 32,
        span: 5635..5637,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 33,
        span: 5637..5638,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 34,
        span: 5637..5639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 35,
        span: 5639..5640,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 209,
        column: 37,
        span: 5641..5642,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 39,
        span: 5642..5644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 40,
        span: 5644..5645,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 209,
        column: 44,
        span: 5646..5649,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 209,
        column: 48,
        span: 5650..5653,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 49,
        span: 5653..5654,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 50,
        span: 5653..5655,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 209,
        column: 52,
        span: 5656..5657,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 209,
        column: 55,
        span: 5658..5660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 209,
        column: 56,
        span: 5660..5661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 209,
        column: 57,
        span: 5660..5662,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 58,
        span: 5662..5663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 59,
        span: 5663..5664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 209,
        column: 60,
        span: 5664..5665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 210,
        column: 9,
        span: 5668..5674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 10,
        span: 5674..5675,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 210,
        column: 13,
        span: 5675..5678,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 14,
        span: 5678..5679,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 210,
        column: 16,
        span: 5679..5681,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 17,
        span: 5681..5682,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 210,
        column: 20,
        span: 5682..5685,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 21,
        span: 5685..5686,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 210,
        column: 22,
        span: 5686..5687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 210,
        column: 24,
        span: 5687..5689,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 25,
        span: 5689..5690,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 210,
        column: 28,
        span: 5690..5693,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 29,
        span: 5693..5694,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 30,
        span: 5694..5695,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 210,
        column: 34,
        span: 5696..5699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 36,
        span: 5700..5701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 210,
        column: 38,
        span: 5701..5703,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 39,
        span: 5703..5704,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 210,
        column: 42,
        span: 5704..5707,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 43,
        span: 5707..5708,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 210,
        column: 44,
        span: 5708..5709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 210,
        column: 46,
        span: 5709..5711,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 47,
        span: 5711..5712,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 210,
        column: 50,
        span: 5712..5715,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 51,
        span: 5715..5716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 52,
        span: 5716..5717,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 210,
        column: 56,
        span: 5718..5721,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 210,
        column: 60,
        span: 5722..5725,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 61,
        span: 5725..5726,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 210,
        column: 63,
        span: 5726..5728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 64,
        span: 5728..5729,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 210,
        column: 67,
        span: 5729..5732,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 68,
        span: 5732..5733,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 210,
        column: 69,
        span: 5733..5734,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 210,
        column: 71,
        span: 5734..5736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 210,
        column: 72,
        span: 5736..5737,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 210,
        column: 75,
        span: 5737..5740,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 76,
        span: 5740..5741,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 77,
        span: 5741..5742,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 210,
        column: 78,
        span: 5742..5743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 211,
        column: 9,
        span: 5746..5752,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 10,
        span: 5752..5753,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 211,
        column: 13,
        span: 5753..5756,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 14,
        span: 5756..5757,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 211,
        column: 17,
        span: 5757..5760,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 211,
        column: 19,
        span: 5761..5762,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 211,
        column: 22,
        span: 5763..5765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 23,
        span: 5765..5766,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 211,
        column: 26,
        span: 5766..5769,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 27,
        span: 5769..5770,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 28,
        span: 5770..5771,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 211,
        column: 32,
        span: 5772..5775,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 34,
        span: 5776..5777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 211,
        column: 36,
        span: 5777..5779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 37,
        span: 5779..5780,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 211,
        column: 40,
        span: 5780..5783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 41,
        span: 5783..5784,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 211,
        column: 43,
        span: 5785..5786,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 211,
        column: 47,
        span: 5787..5790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 48,
        span: 5790..5791,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 211,
        column: 52,
        span: 5792..5795,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 211,
        column: 56,
        span: 5796..5799,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 57,
        span: 5799..5800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 211,
        column: 59,
        span: 5800..5802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 60,
        span: 5802..5803,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 211,
        column: 63,
        span: 5803..5806,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 64,
        span: 5806..5807,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 211,
        column: 66,
        span: 5808..5809,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 211,
        column: 69,
        span: 5810..5812,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 70,
        span: 5812..5813,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 211,
        column: 73,
        span: 5813..5816,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 74,
        span: 5816..5817,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 75,
        span: 5817..5818,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 76,
        span: 5818..5819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 212,
        column: 9,
        span: 5822..5828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 10,
        span: 5828..5829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 11,
        span: 5829..5830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 212,
        column: 13,
        span: 5830..5832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 14,
        span: 5832..5833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 15,
        span: 5832..5834,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 16,
        span: 5834..5835,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 212,
        column: 18,
        span: 5835..5837,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 212,
        column: 20,
        span: 5837..5839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 21,
        span: 5839..5840,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 22,
        span: 5839..5841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 23,
        span: 5841..5842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 24,
        span: 5842..5843,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 212,
        column: 28,
        span: 5844..5847,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 30,
        span: 5848..5849,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 212,
        column: 32,
        span: 5849..5851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 33,
        span: 5851..5852,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 34,
        span: 5851..5853,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 35,
        span: 5853..5854,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 212,
        column: 37,
        span: 5854..5856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 212,
        column: 39,
        span: 5856..5858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 40,
        span: 5858..5859,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 41,
        span: 5858..5860,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 42,
        span: 5860..5861,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 43,
        span: 5861..5862,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 212,
        column: 47,
        span: 5863..5866,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 212,
        column: 51,
        span: 5867..5870,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 52,
        span: 5870..5871,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 212,
        column: 54,
        span: 5871..5873,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 55,
        span: 5873..5874,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 56,
        span: 5873..5875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 57,
        span: 5875..5876,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 212,
        column: 59,
        span: 5876..5878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 212,
        column: 61,
        span: 5878..5880,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 62,
        span: 5880..5881,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 212,
        column: 63,
        span: 5880..5882,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 64,
        span: 5882..5883,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 65,
        span: 5883..5884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 66,
        span: 5884..5885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 213,
        column: 9,
        span: 5888..5894,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 10,
        span: 5894..5895,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 11,
        span: 5895..5896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 213,
        column: 13,
        span: 5896..5898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 14,
        span: 5898..5899,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 213,
        column: 17,
        span: 5899..5902,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 18,
        span: 5902..5903,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 213,
        column: 20,
        span: 5903..5905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 213,
        column: 22,
        span: 5905..5907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 23,
        span: 5907..5908,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 213,
        column: 26,
        span: 5908..5911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 27,
        span: 5911..5912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 28,
        span: 5912..5913,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 213,
        column: 32,
        span: 5914..5917,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 34,
        span: 5918..5919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 213,
        column: 36,
        span: 5919..5921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 37,
        span: 5921..5922,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 213,
        column: 40,
        span: 5922..5925,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 41,
        span: 5925..5926,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 213,
        column: 43,
        span: 5926..5928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 213,
        column: 45,
        span: 5928..5930,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 46,
        span: 5930..5931,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 213,
        column: 49,
        span: 5931..5934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 50,
        span: 5934..5935,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 51,
        span: 5935..5936,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 213,
        column: 55,
        span: 5937..5940,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 213,
        column: 59,
        span: 5941..5944,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 60,
        span: 5944..5945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 213,
        column: 62,
        span: 5945..5947,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 63,
        span: 5947..5948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 213,
        column: 66,
        span: 5948..5951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 67,
        span: 5951..5952,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 213,
        column: 69,
        span: 5952..5954,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 213,
        column: 71,
        span: 5954..5956,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 72,
        span: 5956..5957,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 213,
        column: 75,
        span: 5957..5960,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 76,
        span: 5960..5961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 77,
        span: 5961..5962,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 78,
        span: 5962..5963,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 214,
        column: 9,
        span: 5966..5972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 10,
        span: 5972..5973,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 214,
        column: 13,
        span: 5973..5976,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 14,
        span: 5976..5977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 214,
        column: 16,
        span: 5977..5979,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 17,
        span: 5979..5980,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 18,
        span: 5979..5981,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 19,
        span: 5981..5982,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 214,
        column: 20,
        span: 5982..5983,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 214,
        column: 22,
        span: 5983..5985,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 23,
        span: 5985..5986,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 24,
        span: 5985..5987,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 25,
        span: 5987..5988,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 26,
        span: 5988..5989,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 214,
        column: 30,
        span: 5990..5993,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 214,
        column: 34,
        span: 5994..5997,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 35,
        span: 5997..5998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 214,
        column: 37,
        span: 5998..6000,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 38,
        span: 6000..6001,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 39,
        span: 6000..6002,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 40,
        span: 6002..6003,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 214,
        column: 41,
        span: 6003..6004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 214,
        column: 43,
        span: 6004..6006,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 44,
        span: 6006..6007,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 45,
        span: 6006..6008,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 46,
        span: 6008..6009,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 47,
        span: 6009..6010,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 214,
        column: 51,
        span: 6011..6014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 53,
        span: 6015..6016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 214,
        column: 55,
        span: 6016..6018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 56,
        span: 6018..6019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 57,
        span: 6018..6020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 58,
        span: 6020..6021,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 214,
        column: 59,
        span: 6021..6022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 214,
        column: 61,
        span: 6022..6024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 62,
        span: 6024..6025,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 63,
        span: 6024..6026,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 64,
        span: 6026..6027,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 65,
        span: 6027..6028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 66,
        span: 6028..6029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 215,
        column: 9,
        span: 6032..6038,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 10,
        span: 6038..6039,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 215,
        column: 13,
        span: 6039..6042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 14,
        span: 6042..6043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 215,
        column: 16,
        span: 6043..6045,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 17,
        span: 6045..6046,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 215,
        column: 20,
        span: 6046..6049,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 21,
        span: 6049..6050,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 215,
        column: 22,
        span: 6050..6051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 215,
        column: 24,
        span: 6051..6053,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 25,
        span: 6053..6054,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 215,
        column: 28,
        span: 6054..6057,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 29,
        span: 6057..6058,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 30,
        span: 6058..6059,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 215,
        column: 34,
        span: 6060..6063,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 215,
        column: 38,
        span: 6064..6067,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 39,
        span: 6067..6068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 215,
        column: 41,
        span: 6068..6070,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 42,
        span: 6070..6071,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 215,
        column: 45,
        span: 6071..6074,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 46,
        span: 6074..6075,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 215,
        column: 47,
        span: 6075..6076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 215,
        column: 49,
        span: 6076..6078,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 50,
        span: 6078..6079,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 215,
        column: 53,
        span: 6079..6082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 54,
        span: 6082..6083,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 55,
        span: 6083..6084,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 215,
        column: 59,
        span: 6085..6088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 61,
        span: 6089..6090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 215,
        column: 63,
        span: 6090..6092,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 64,
        span: 6092..6093,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 215,
        column: 67,
        span: 6093..6096,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 68,
        span: 6096..6097,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 215,
        column: 69,
        span: 6097..6098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 215,
        column: 71,
        span: 6098..6100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 215,
        column: 72,
        span: 6100..6101,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 215,
        column: 75,
        span: 6101..6104,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 76,
        span: 6104..6105,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 77,
        span: 6105..6106,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 215,
        column: 78,
        span: 6106..6107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 216,
        column: 9,
        span: 6110..6116,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 10,
        span: 6116..6117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 11,
        span: 6117..6118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 216,
        column: 13,
        span: 6118..6120,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 14,
        span: 6120..6121,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 15,
        span: 6120..6122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 16,
        span: 6122..6123,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 216,
        column: 18,
        span: 6123..6125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 216,
        column: 20,
        span: 6125..6127,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 21,
        span: 6127..6128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 22,
        span: 6127..6129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 23,
        span: 6129..6130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 24,
        span: 6130..6131,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 216,
        column: 28,
        span: 6132..6135,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 216,
        column: 32,
        span: 6136..6139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 33,
        span: 6139..6140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 216,
        column: 35,
        span: 6140..6142,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 36,
        span: 6142..6143,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 37,
        span: 6142..6144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 38,
        span: 6144..6145,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 216,
        column: 40,
        span: 6145..6147,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 216,
        column: 42,
        span: 6147..6149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 43,
        span: 6149..6150,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 44,
        span: 6149..6151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 45,
        span: 6151..6152,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 46,
        span: 6152..6153,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 216,
        column: 50,
        span: 6154..6157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 52,
        span: 6158..6159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 216,
        column: 54,
        span: 6159..6161,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 55,
        span: 6161..6162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 56,
        span: 6161..6163,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 57,
        span: 6163..6164,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 216,
        column: 59,
        span: 6164..6166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 216,
        column: 61,
        span: 6166..6168,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 216,
        column: 62,
        span: 6168..6169,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 216,
        column: 63,
        span: 6168..6170,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 64,
        span: 6170..6171,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 65,
        span: 6171..6172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 216,
        column: 66,
        span: 6172..6173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 217,
        column: 9,
        span: 6176..6182,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 10,
        span: 6182..6183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 11,
        span: 6183..6184,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 12,
        span: 6183..6185,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 217,
        column: 15,
        span: 6186..6188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 217,
        column: 18,
        span: 6189..6191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 19,
        span: 6191..6192,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 20,
        span: 6191..6193,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 21,
        span: 6193..6194,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 22,
        span: 6194..6195,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 217,
        column: 26,
        span: 6196..6199,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 217,
        column: 30,
        span: 6200..6203,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 31,
        span: 6203..6204,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 32,
        span: 6203..6205,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 217,
        column: 35,
        span: 6206..6208,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 217,
        column: 38,
        span: 6209..6211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 39,
        span: 6211..6212,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 40,
        span: 6211..6213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 41,
        span: 6213..6214,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 42,
        span: 6214..6215,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 217,
        column: 46,
        span: 6216..6219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 48,
        span: 6220..6221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 217,
        column: 50,
        span: 6221..6223,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 217,
        column: 51,
        span: 6223..6224,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 52,
        span: 6223..6225,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 53,
        span: 6225..6226,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 217,
        column: 56,
        span: 6227..6229,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 217,
        column: 58,
        span: 6229..6231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 59,
        span: 6231..6232,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 217,
        column: 60,
        span: 6232..6233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 218,
        column: 9,
        span: 6236..6242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 10,
        span: 6242..6243,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 11,
        span: 6243..6244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 218,
        column: 13,
        span: 6244..6246,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 14,
        span: 6246..6247,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 218,
        column: 17,
        span: 6247..6250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 18,
        span: 6250..6251,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 218,
        column: 20,
        span: 6251..6253,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 218,
        column: 22,
        span: 6253..6255,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 23,
        span: 6255..6256,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 218,
        column: 26,
        span: 6256..6259,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 27,
        span: 6259..6260,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 28,
        span: 6260..6261,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 218,
        column: 32,
        span: 6262..6265,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 218,
        column: 36,
        span: 6266..6269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 37,
        span: 6269..6270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 218,
        column: 39,
        span: 6270..6272,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 40,
        span: 6272..6273,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 218,
        column: 43,
        span: 6273..6276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 44,
        span: 6276..6277,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 218,
        column: 46,
        span: 6277..6279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 218,
        column: 48,
        span: 6279..6281,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 49,
        span: 6281..6282,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 218,
        column: 52,
        span: 6282..6285,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 53,
        span: 6285..6286,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 54,
        span: 6286..6287,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 218,
        column: 58,
        span: 6288..6291,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 60,
        span: 6292..6293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 218,
        column: 62,
        span: 6293..6295,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 63,
        span: 6295..6296,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 218,
        column: 66,
        span: 6296..6299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 67,
        span: 6299..6300,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 218,
        column: 69,
        span: 6300..6302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 218,
        column: 71,
        span: 6302..6304,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 218,
        column: 72,
        span: 6304..6305,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 218,
        column: 75,
        span: 6305..6308,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 76,
        span: 6308..6309,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 77,
        span: 6309..6310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 218,
        column: 78,
        span: 6310..6311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 219,
        column: 9,
        span: 6314..6320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 10,
        span: 6320..6321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 11,
        span: 6321..6322,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 219,
        column: 14,
        span: 6322..6325,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 219,
        column: 17,
        span: 6326..6328,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 219,
        column: 20,
        span: 6329..6331,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 21,
        span: 6331..6332,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 219,
        column: 24,
        span: 6332..6335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 25,
        span: 6335..6336,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 26,
        span: 6336..6337,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 219,
        column: 30,
        span: 6338..6341,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 219,
        column: 34,
        span: 6342..6345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 35,
        span: 6345..6346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 219,
        column: 37,
        span: 6346..6348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 38,
        span: 6348..6349,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 219,
        column: 41,
        span: 6349..6352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 42,
        span: 6352..6353,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 219,
        column: 45,
        span: 6354..6356,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 219,
        column: 49,
        span: 6357..6360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 50,
        span: 6360..6361,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 219,
        column: 54,
        span: 6362..6365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 56,
        span: 6366..6367,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 219,
        column: 58,
        span: 6367..6369,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 59,
        span: 6369..6370,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 219,
        column: 62,
        span: 6370..6373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 63,
        span: 6373..6374,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 219,
        column: 66,
        span: 6375..6377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Op",
        ),
        line: 219,
        column: 69,
        span: 6378..6380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 219,
        column: 70,
        span: 6380..6381,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 219,
        column: 73,
        span: 6381..6384,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 74,
        span: 6384..6385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 75,
        span: 6385..6386,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 219,
        column: 76,
        span: 6386..6387,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 220,
        column: 0,
        span: 6388..6391,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 222,
        column: 5,
        span: 6393..6397,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 222,
        column: 6,
        span: 6397..6398,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 222,
        column: 7,
        span: 6398..6399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 224,
        column: 2,
        span: 6401..6402,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 224,
        column: 3,
        span: 6402..6403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        line: 224,
        column: 7,
        span: 6403..6407,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 224,
        column: 9,
        span: 6408..6409,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 224,
        column: 18,
        span: 6410..6418,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 224,
        column: 20,
        span: 6419..6420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 224,
        column: 21,
        span: 6420..6421,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 22,
        span: 6421..6422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 224,
        column: 23,
        span: 6422..6423,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 224,
        column: 24,
        span: 6423..6424,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 224,
        column: 25,
        span: 6424..6425,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 224,
        column: 26,
        span: 6425..6426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 225,
        column: 9,
        span: 6429..6435,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 10,
        span: 6435..6436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 225,
        column: 11,
        span: 6436..6437,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 225,
        column: 14,
        span: 6438..6440,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 225,
        column: 18,
        span: 6441..6444,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 19,
        span: 6444..6445,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 226,
        column: 5,
        span: 6448..6450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 226,
        column: 10,
        span: 6451..6455,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 226,
        column: 11,
        span: 6455..6456,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 226,
        column: 12,
        span: 6456..6457,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 226,
        column: 13,
        span: 6457..6458,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 226,
        column: 16,
        span: 6459..6461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 226,
        column: 24,
        span: 6462..6469,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 226,
        column: 29,
        span: 6470..6474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 226,
        column: 31,
        span: 6475..6476,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 33,
        span: 6477..6478,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 226,
        column: 35,
        span: 6479..6480,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 226,
        column: 36,
        span: 6480..6481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 226,
        column: 37,
        span: 6481..6482,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 226,
        column: 0,
        span: 6483..6486,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 227,
        column: 5,
        span: 6489..6491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 227,
        column: 10,
        span: 6492..6496,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 11,
        span: 6496..6497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 227,
        column: 12,
        span: 6497..6498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 13,
        span: 6498..6499,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 227,
        column: 16,
        span: 6500..6502,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 227,
        column: 24,
        span: 6503..6510,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 227,
        column: 29,
        span: 6511..6515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 227,
        column: 31,
        span: 6516..6517,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 227,
        column: 33,
        span: 6518..6519,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 227,
        column: 35,
        span: 6520..6521,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 227,
        column: 36,
        span: 6521..6522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 227,
        column: 37,
        span: 6522..6523,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 227,
        column: 0,
        span: 6524..6527,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 228,
        column: 8,
        span: 6529..6535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 228,
        column: 10,
        span: 6536..6537,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 228,
        column: 12,
        span: 6537..6539,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 228,
        column: 13,
        span: 6539..6540,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 14,
        span: 6540..6541,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"dummy\"",
        ),
        line: 228,
        column: 22,
        span: 6542..6549,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 229,
        column: 0,
        span: 6550..6553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "test",
        ),
        line: 231,
        column: 5,
        span: 6555..6559,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 231,
        column: 6,
        span: 6559..6560,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 231,
        column: 7,
        span: 6560..6561,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 236,
        column: 6,
        span: 6642..6647,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 236,
        column: 15,
        span: 6648..6656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawSet",
        ),
        line: 236,
        column: 22,
        span: 6657..6663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 236,
        column: 23,
        span: 6663..6664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 236,
        column: 24,
        span: 6664..6665,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 236,
        column: 25,
        span: 6665..6666,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 237,
        column: 8,
        span: 6669..6674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 237,
        column: 10,
        span: 6675..6676,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 237,
        column: 12,
        span: 6677..6678,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 237,
        column: 14,
        span: 6679..6680,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 237,
        column: 15,
        span: 6680..6681,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 238,
        column: 6,
        span: 6684..6687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 238,
        column: 8,
        span: 6688..6689,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 238,
        column: 9,
        span: 6689..6690,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 238,
        column: 10,
        span: 6690..6691,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 238,
        column: 13,
        span: 6692..6694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 238,
        column: 19,
        span: 6695..6700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 238,
        column: 20,
        span: 6700..6701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 238,
        column: 21,
        span: 6701..6702,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 238,
        column: 22,
        span: 6702..6703,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 238,
        column: 25,
        span: 6704..6706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 238,
        column: 27,
        span: 6707..6708,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 238,
        column: 28,
        span: 6708..6709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 238,
        column: 29,
        span: 6709..6710,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 238,
        column: 30,
        span: 6710..6711,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 238,
        column: 32,
        span: 6712..6713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 238,
        column: 34,
        span: 6713..6715,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 238,
        column: 0,
        span: 6716..6719,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 239,
        column: 9,
        span: 6722..6728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 239,
        column: 0,
        span: 6729..6730,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 240,
        column: 0,
        span: 6731..6734,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 242,
        column: 6,
        span: 6736..6741,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 242,
        column: 15,
        span: 6742..6750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 242,
        column: 19,
        span: 6751..6754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 242,
        column: 20,
        span: 6754..6755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 242,
        column: 21,
        span: 6755..6756,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 242,
        column: 22,
        span: 6756..6757,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 243,
        column: 9,
        span: 6760..6766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 243,
        column: 22,
        span: 6767..6779,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 23,
        span: 6779..6780,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawSet",
        ),
        line: 243,
        column: 29,
        span: 6780..6786,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 30,
        span: 6786..6787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 243,
        column: 31,
        span: 6787..6788,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 32,
        span: 6788..6789,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 33,
        span: 6789..6790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 243,
        column: 35,
        span: 6791..6792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 36,
        span: 6792..6793,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 244,
        column: 0,
        span: 6794..6797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 246,
        column: 2,
        span: 6799..6800,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 246,
        column: 3,
        span: 6800..6801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 246,
        column: 7,
        span: 6801..6805,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 246,
        column: 9,
        span: 6806..6807,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 246,
        column: 18,
        span: 6808..6816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 20,
        span: 6817..6818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 246,
        column: 21,
        span: 6818..6819,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 246,
        column: 22,
        span: 6819..6820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 246,
        column: 23,
        span: 6820..6821,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 24,
        span: 6821..6822,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 247,
        column: 6,
        span: 6825..6828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 247,
        column: 8,
        span: 6829..6830,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 247,
        column: 11,
        span: 6831..6833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 247,
        column: 17,
        span: 6834..6839,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 18,
        span: 6839..6840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 247,
        column: 19,
        span: 6840..6841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 20,
        span: 6841..6842,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 247,
        column: 0,
        span: 6843..6845,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 248,
        column: 7,
        span: 6850..6852,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 248,
        column: 11,
        span: 6853..6856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 248,
        column: 13,
        span: 6857..6858,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 248,
        column: 14,
        span: 6858..6859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 248,
        column: 15,
        span: 6859..6860,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 248,
        column: 16,
        span: 6860..6861,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 248,
        column: 21,
        span: 6862..6866,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 248,
        column: 28,
        span: 6867..6873,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 248,
        column: 34,
        span: 6874..6879,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 248,
        column: 0,
        span: 6880..6883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 249,
        column: 6,
        span: 6888..6889,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 249,
        column: 7,
        span: 6889..6890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 249,
        column: 8,
        span: 6890..6891,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 249,
        column: 9,
        span: 6891..6892,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 249,
        column: 11,
        span: 6893..6894,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 249,
        column: 0,
        span: 6895..6898,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 250,
        column: 0,
        span: 6901..6904,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 251,
        column: 9,
        span: 6907..6913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 251,
        column: 14,
        span: 6914..6918,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 15,
        span: 6918..6919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 251,
        column: 16,
        span: 6919..6920,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 17,
        span: 6920..6921,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 251,
        column: 20,
        span: 6922..6924,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 251,
        column: 0,
        span: 6925..6928,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 252,
        column: 0,
        span: 6929..6932,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 254,
        column: 2,
        span: 6934..6935,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 254,
        column: 3,
        span: 6935..6936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        line: 254,
        column: 7,
        span: 6936..6940,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 254,
        column: 9,
        span: 6941..6942,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 254,
        column: 0,
        span: 6943..6946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 7,
        span: 6948..6954,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 8,
        span: 6954..6955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 256,
        column: 11,
        span: 6955..6958,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 256,
        column: 12,
        span: 6958..6959,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 13,
        span: 6958..6960,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 14,
        span: 6960..6961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 15,
        span: 6960..6962,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 16,
        span: 6962..6963,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 17,
        span: 6962..6964,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 256,
        column: 18,
        span: 6964..6965,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 256,
        column: 20,
        span: 6966..6967,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 256,
        column: 24,
        span: 6968..6971,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 256,
        column: 25,
        span: 6971..6972,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 26,
        span: 6971..6973,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 27,
        span: 6973..6974,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 28,
        span: 6973..6975,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 29,
        span: 6975..6976,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 30,
        span: 6975..6977,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 31,
        span: 6977..6978,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 32,
        span: 6977..6979,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 256,
        column: 33,
        span: 6979..6980,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 34,
        span: 6980..6981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 257,
        column: 7,
        span: 6982..6988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 8,
        span: 6988..6989,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 257,
        column: 11,
        span: 6989..6992,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 257,
        column: 12,
        span: 6992..6993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 257,
        column: 15,
        span: 6993..6996,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 257,
        column: 16,
        span: 6996..6997,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 17,
        span: 6996..6998,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 18,
        span: 6998..6999,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 19,
        span: 6998..7000,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 20,
        span: 7000..7001,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 21,
        span: 7000..7002,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 22,
        span: 7002..7003,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 23,
        span: 7002..7004,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 257,
        column: 24,
        span: 7004..7005,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 257,
        column: 26,
        span: 7006..7007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 257,
        column: 30,
        span: 7008..7011,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 257,
        column: 31,
        span: 7011..7012,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 32,
        span: 7011..7013,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 33,
        span: 7013..7014,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 34,
        span: 7013..7015,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 35,
        span: 7015..7016,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 36,
        span: 7015..7017,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 257,
        column: 37,
        span: 7017..7018,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 257,
        column: 38,
        span: 7017..7019,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 257,
        column: 39,
        span: 7019..7020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 40,
        span: 7020..7021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 257,
        column: 41,
        span: 7021..7022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 258,
        column: 7,
        span: 7023..7029,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 8,
        span: 7029..7030,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 258,
        column: 9,
        span: 7030..7031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 258,
        column: 12,
        span: 7031..7034,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 258,
        column: 13,
        span: 7034..7035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 14,
        span: 7034..7036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 15,
        span: 7036..7037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 16,
        span: 7036..7038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 17,
        span: 7038..7039,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 18,
        span: 7038..7040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 19,
        span: 7040..7041,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 20,
        span: 7040..7042,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 258,
        column: 21,
        span: 7042..7043,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 258,
        column: 24,
        span: 7044..7046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 258,
        column: 28,
        span: 7047..7050,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 258,
        column: 29,
        span: 7050..7051,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 30,
        span: 7050..7052,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 31,
        span: 7052..7053,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 32,
        span: 7052..7054,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 33,
        span: 7054..7055,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 34,
        span: 7054..7056,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 258,
        column: 35,
        span: 7056..7057,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 258,
        column: 36,
        span: 7056..7058,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 258,
        column: 37,
        span: 7058..7059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 38,
        span: 7059..7060,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 258,
        column: 39,
        span: 7060..7061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 259,
        column: 7,
        span: 7062..7068,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 8,
        span: 7068..7069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 9,
        span: 7069..7070,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 259,
        column: 12,
        span: 7070..7073,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 259,
        column: 13,
        span: 7073..7074,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 14,
        span: 7073..7075,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 15,
        span: 7075..7076,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 16,
        span: 7075..7077,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 17,
        span: 7077..7078,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 18,
        span: 7077..7079,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 19,
        span: 7079..7080,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 20,
        span: 7079..7081,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 259,
        column: 21,
        span: 7081..7082,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 259,
        column: 24,
        span: 7083..7085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 259,
        column: 28,
        span: 7086..7089,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 259,
        column: 29,
        span: 7089..7090,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 30,
        span: 7089..7091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 31,
        span: 7091..7092,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 32,
        span: 7091..7093,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 33,
        span: 7093..7094,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 34,
        span: 7093..7095,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 35,
        span: 7095..7096,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 259,
        column: 36,
        span: 7095..7097,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 259,
        column: 37,
        span: 7097..7098,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 38,
        span: 7098..7099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 39,
        span: 7099..7100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 260,
        column: 7,
        span: 7101..7107,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 8,
        span: 7107..7108,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 9,
        span: 7108..7109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 260,
        column: 12,
        span: 7109..7112,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 260,
        column: 13,
        span: 7112..7113,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 14,
        span: 7112..7114,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
        column: 15,
        span: 7114..7115,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 16,
        span: 7114..7116,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 260,
        column: 17,
        span: 7116..7117,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 260,
        column: 20,
        span: 7118..7120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 260,
        column: 24,
        span: 7121..7124,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 260,
        column: 25,
        span: 7124..7125,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 26,
        span: 7124..7126,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 260,
        column: 27,
        span: 7126..7127,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 260,
        column: 28,
        span: 7126..7128,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 260,
        column: 29,
        span: 7128..7129,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 30,
        span: 7129..7130,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 31,
        span: 7130..7131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 262,
        column: 2,
        span: 7176..7177,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 262,
        column: 3,
        span: 7177..7178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__le",
        ),
        line: 262,
        column: 7,
        span: 7178..7182,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 262,
        column: 9,
        span: 7183..7184,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 262,
        column: 18,
        span: 7185..7193,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 20,
        span: 7194..7195,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 262,
        column: 21,
        span: 7195..7196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 262,
        column: 22,
        span: 7196..7197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 262,
        column: 23,
        span: 7197..7198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 24,
        span: 7198..7199,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 263,
        column: 6,
        span: 7202..7205,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 263,
        column: 8,
        span: 7206..7207,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 263,
        column: 11,
        span: 7208..7210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 263,
        column: 17,
        span: 7211..7216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 263,
        column: 18,
        span: 7216..7217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 263,
        column: 19,
        span: 7217..7218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 263,
        column: 20,
        span: 7218..7219,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 263,
        column: 0,
        span: 7220..7222,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 264,
        column: 7,
        span: 7227..7229,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 264,
        column: 11,
        span: 7230..7233,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 264,
        column: 13,
        span: 7234..7235,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 264,
        column: 14,
        span: 7235..7236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 264,
        column: 15,
        span: 7236..7237,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 264,
        column: 16,
        span: 7237..7238,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 264,
        column: 21,
        span: 7239..7243,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 264,
        column: 28,
        span: 7244..7250,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 264,
        column: 34,
        span: 7251..7256,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 264,
        column: 0,
        span: 7257..7260,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 265,
        column: 0,
        span: 7263..7266,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 266,
        column: 9,
        span: 7269..7275,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 266,
        column: 0,
        span: 7276..7280,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 267,
        column: 0,
        span: 7281..7284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 269,
        column: 7,
        span: 7286..7292,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 8,
        span: 7292..7293,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 269,
        column: 11,
        span: 7293..7296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 269,
        column: 13,
        span: 7297..7298,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 269,
        column: 16,
        span: 7298..7301,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
        column: 17,
        span: 7301..7302,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 18,
        span: 7301..7303,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 19,
        span: 7303..7304,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 20,
        span: 7303..7305,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
        column: 21,
        span: 7305..7306,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 269,
        column: 24,
        span: 7307..7309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 269,
        column: 28,
        span: 7310..7313,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 269,
        column: 29,
        span: 7313..7314,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 30,
        span: 7313..7315,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 269,
        column: 31,
        span: 7315..7316,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 269,
        column: 32,
        span: 7315..7317,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 269,
        column: 33,
        span: 7317..7318,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 34,
        span: 7318..7319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 269,
        column: 35,
        span: 7319..7320,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 270,
        column: 7,
        span: 7338..7344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 8,
        span: 7344..7345,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 270,
        column: 11,
        span: 7345..7348,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 270,
        column: 12,
        span: 7348..7349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 270,
        column: 15,
        span: 7349..7352,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 270,
        column: 16,
        span: 7352..7353,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 17,
        span: 7352..7354,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 18,
        span: 7354..7355,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 19,
        span: 7354..7356,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 270,
        column: 20,
        span: 7356..7357,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 270,
        column: 23,
        span: 7358..7360,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 270,
        column: 27,
        span: 7361..7364,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 270,
        column: 28,
        span: 7364..7365,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 29,
        span: 7364..7366,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 270,
        column: 30,
        span: 7366..7367,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 270,
        column: 31,
        span: 7366..7368,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 270,
        column: 32,
        span: 7368..7369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 33,
        span: 7369..7370,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 270,
        column: 34,
        span: 7370..7371,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 271,
        column: 7,
        span: 7372..7378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 8,
        span: 7378..7379,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 271,
        column: 11,
        span: 7379..7382,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 271,
        column: 12,
        span: 7382..7383,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 271,
        column: 15,
        span: 7383..7386,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 271,
        column: 16,
        span: 7386..7387,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 17,
        span: 7386..7388,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 18,
        span: 7388..7389,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 19,
        span: 7388..7390,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 271,
        column: 20,
        span: 7390..7391,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 271,
        column: 23,
        span: 7392..7394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 271,
        column: 27,
        span: 7395..7398,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 271,
        column: 28,
        span: 7398..7399,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 29,
        span: 7398..7400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 271,
        column: 30,
        span: 7400..7401,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 271,
        column: 31,
        span: 7400..7402,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 271,
        column: 32,
        span: 7402..7403,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 33,
        span: 7403..7404,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 271,
        column: 34,
        span: 7404..7405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 273,
        column: 2,
        span: 7407..7408,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 3,
        span: 7408..7409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 273,
        column: 7,
        span: 7409..7413,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 273,
        column: 9,
        span: 7414..7415,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 273,
        column: 18,
        span: 7416..7424,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 20,
        span: 7425..7426,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 273,
        column: 21,
        span: 7426..7427,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 273,
        column: 22,
        span: 7427..7428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 273,
        column: 23,
        span: 7428..7429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 24,
        span: 7429..7430,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 274,
        column: 6,
        span: 7433..7436,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 274,
        column: 8,
        span: 7437..7438,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 274,
        column: 11,
        span: 7439..7441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 274,
        column: 17,
        span: 7442..7447,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 18,
        span: 7447..7448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 274,
        column: 19,
        span: 7448..7449,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 20,
        span: 7449..7450,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 274,
        column: 0,
        span: 7451..7453,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 275,
        column: 7,
        span: 7458..7460,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 275,
        column: 11,
        span: 7461..7464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 275,
        column: 13,
        span: 7465..7466,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 275,
        column: 14,
        span: 7466..7467,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 275,
        column: 15,
        span: 7467..7468,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 275,
        column: 16,
        span: 7468..7469,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 275,
        column: 21,
        span: 7470..7474,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 275,
        column: 28,
        span: 7475..7481,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 275,
        column: 34,
        span: 7482..7487,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 275,
        column: 0,
        span: 7488..7491,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 276,
        column: 6,
        span: 7496..7497,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 276,
        column: 7,
        span: 7497..7498,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 276,
        column: 8,
        span: 7498..7499,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 276,
        column: 9,
        span: 7499..7500,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 276,
        column: 11,
        span: 7501..7502,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 276,
        column: 0,
        span: 7503..7506,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 277,
        column: 0,
        span: 7509..7512,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 278,
        column: 9,
        span: 7515..7521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "next",
        ),
        line: 278,
        column: 14,
        span: 7522..7526,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 15,
        span: 7526..7527,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 278,
        column: 16,
        span: 7527..7528,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 17,
        span: 7528..7529,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 20,
        span: 7530..7532,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 278,
        column: 0,
        span: 7533..7536,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 279,
        column: 0,
        span: 7537..7540,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 281,
        column: 6,
        span: 7542..7547,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 281,
        column: 8,
        span: 7548..7549,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 281,
        column: 10,
        span: 7550..7551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 281,
        column: 14,
        span: 7552..7555,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 281,
        column: 15,
        span: 7555..7556,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 16,
        span: 7555..7557,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 17,
        span: 7557..7558,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 18,
        span: 7557..7559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 281,
        column: 19,
        span: 7559..7560,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 281,
        column: 20,
        span: 7559..7561,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 281,
        column: 21,
        span: 7561..7562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 282,
        column: 7,
        span: 7563..7569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 282,
        column: 8,
        span: 7569..7570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 282,
        column: 9,
        span: 7570..7571,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 282,
        column: 12,
        span: 7572..7574,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 282,
        column: 16,
        span: 7575..7578,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 282,
        column: 17,
        span: 7578..7579,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
        column: 18,
        span: 7578..7580,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 19,
        span: 7580..7581,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
        column: 20,
        span: 7580..7582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 282,
        column: 21,
        span: 7582..7583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 282,
        column: 22,
        span: 7582..7584,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 282,
        column: 23,
        span: 7584..7585,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 282,
        column: 24,
        span: 7585..7586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 283,
        column: 7,
        span: 7587..7593,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 8,
        span: 7593..7594,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 283,
        column: 11,
        span: 7594..7597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawequal",
        ),
        line: 283,
        column: 20,
        span: 7598..7606,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 283,
        column: 21,
        span: 7606..7607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 283,
        column: 22,
        span: 7607..7608,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 23,
        span: 7608..7609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 283,
        column: 27,
        span: 7610..7613,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 283,
        column: 28,
        span: 7613..7614,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 283,
        column: 29,
        span: 7613..7615,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 30,
        span: 7615..7616,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 283,
        column: 31,
        span: 7615..7617,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 283,
        column: 32,
        span: 7617..7618,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 283,
        column: 33,
        span: 7617..7619,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 283,
        column: 34,
        span: 7619..7620,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 35,
        span: 7620..7621,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 283,
        column: 36,
        span: 7621..7622,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 284,
        column: 7,
        span: 7623..7629,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 8,
        span: 7629..7630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawequal",
        ),
        line: 284,
        column: 16,
        span: 7630..7638,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 284,
        column: 17,
        span: 7638..7639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 284,
        column: 18,
        span: 7639..7640,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 284,
        column: 19,
        span: 7640..7641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 284,
        column: 21,
        span: 7642..7643,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 22,
        span: 7643..7644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 284,
        column: 23,
        span: 7644..7645,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 285,
        column: 7,
        span: 7646..7652,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 285,
        column: 8,
        span: 7652..7653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 285,
        column: 11,
        span: 7653..7656,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 285,
        column: 12,
        span: 7656..7657,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 13,
        span: 7656..7658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 14,
        span: 7658..7659,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 15,
        span: 7658..7660,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 16,
        span: 7660..7661,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 17,
        span: 7660..7662,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 18,
        span: 7662..7663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 19,
        span: 7662..7664,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 285,
        column: 20,
        span: 7664..7665,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 285,
        column: 23,
        span: 7666..7668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawSet",
        ),
        line: 285,
        column: 30,
        span: 7669..7675,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 285,
        column: 31,
        span: 7675..7676,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 32,
        span: 7675..7677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 33,
        span: 7677..7678,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 34,
        span: 7677..7679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 285,
        column: 35,
        span: 7679..7680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 285,
        column: 36,
        span: 7679..7681,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 285,
        column: 37,
        span: 7681..7682,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 285,
        column: 38,
        span: 7682..7683,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 286,
        column: 7,
        span: 7684..7690,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 286,
        column: 8,
        span: 7690..7691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawSet",
        ),
        line: 286,
        column: 14,
        span: 7691..7697,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 286,
        column: 15,
        span: 7697..7698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 16,
        span: 7697..7699,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 17,
        span: 7699..7700,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 18,
        span: 7699..7701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 19,
        span: 7701..7702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 20,
        span: 7701..7703,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 21,
        span: 7703..7704,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 22,
        span: 7703..7705,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 286,
        column: 23,
        span: 7705..7706,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 286,
        column: 26,
        span: 7707..7709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 286,
        column: 30,
        span: 7710..7713,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 286,
        column: 31,
        span: 7713..7714,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 32,
        span: 7713..7715,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 33,
        span: 7715..7716,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 34,
        span: 7715..7717,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 286,
        column: 35,
        span: 7717..7718,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 286,
        column: 36,
        span: 7717..7719,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 286,
        column: 37,
        span: 7719..7720,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 286,
        column: 38,
        span: 7720..7721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 287,
        column: 7,
        span: 7722..7728,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 287,
        column: 8,
        span: 7728..7729,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 287,
        column: 11,
        span: 7729..7732,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 287,
        column: 12,
        span: 7732..7733,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 13,
        span: 7732..7734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 14,
        span: 7734..7735,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 15,
        span: 7734..7736,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 16,
        span: 7736..7737,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 17,
        span: 7736..7738,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 287,
        column: 18,
        span: 7738..7739,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 287,
        column: 21,
        span: 7740..7742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 287,
        column: 25,
        span: 7743..7746,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 287,
        column: 26,
        span: 7746..7747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 27,
        span: 7746..7748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 28,
        span: 7748..7749,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 29,
        span: 7748..7750,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 30,
        span: 7750..7751,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 31,
        span: 7750..7752,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 287,
        column: 32,
        span: 7752..7753,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 287,
        column: 33,
        span: 7752..7754,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 287,
        column: 34,
        span: 7754..7755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 287,
        column: 35,
        span: 7755..7756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 290,
        column: 2,
        span: 7799..7800,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 290,
        column: 3,
        span: 7800..7801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 290,
        column: 6,
        span: 7801..7804,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 290,
        column: 7,
        span: 7804..7805,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 8,
        span: 7804..7806,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 290,
        column: 9,
        span: 7806..7807,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 10,
        span: 7806..7808,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 290,
        column: 11,
        span: 7808..7809,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 12,
        span: 7808..7810,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 290,
        column: 13,
        span: 7810..7811,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 290,
        column: 14,
        span: 7811..7812,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
        column: 16,
        span: 7813..7814,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 290,
        column: 0,
        span: 7814..7816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 291,
        column: 7,
        span: 7817..7823,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 291,
        column: 8,
        span: 7823..7824,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 291,
        column: 9,
        span: 7824..7825,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 291,
        column: 10,
        span: 7825..7826,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Set",
        ),
        line: 291,
        column: 13,
        span: 7826..7829,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 291,
        column: 14,
        span: 7829..7830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 15,
        span: 7829..7831,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 16,
        span: 7831..7832,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 17,
        span: 7831..7833,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 291,
        column: 18,
        span: 7833..7834,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 291,
        column: 19,
        span: 7833..7835,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 291,
        column: 20,
        span: 7835..7836,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 291,
        column: 21,
        span: 7836..7837,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 291,
        column: 24,
        span: 7838..7840,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 291,
        column: 28,
        span: 7841..7844,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 291,
        column: 29,
        span: 7844..7845,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 294,
        column: 3,
        span: 7848..7850,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 294,
        column: 7,
        span: 7851..7854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 294,
        column: 9,
        span: 7855..7856,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 294,
        column: 0,
        span: 7857..7861,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 4,
        span: 7864..7865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 295,
        column: 11,
        span: 7865..7872,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 295,
        column: 14,
        span: 7873..7875,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 295,
        column: 20,
        span: 7876..7881,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 295,
        column: 21,
        span: 7881..7882,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 295,
        column: 22,
        span: 7882..7883,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> testC not active: skipping tests for \\z\nuserdata equality <<<\\n'",
        ),
        line: 296,
        column: 25,
        span: 7883..7955,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 296,
        column: 26,
        span: 7955..7956,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 297,
        column: 0,
        span: 7957..7961,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 298,
        column: 8,
        span: 7964..7969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u1",
        ),
        line: 298,
        column: 11,
        span: 7970..7972,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 298,
        column: 13,
        span: 7973..7974,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 298,
        column: 15,
        span: 7975..7976,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 16,
        span: 7976..7977,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 298,
        column: 27,
        span: 7977..7988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 28,
        span: 7988..7989,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 29,
        span: 7988..7990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 30,
        span: 7990..7991,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 299,
        column: 8,
        span: 7994..7999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        line: 299,
        column: 11,
        span: 8000..8002,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 299,
        column: 13,
        span: 8003..8004,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 299,
        column: 15,
        span: 8005..8006,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 299,
        column: 16,
        span: 8006..8007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 299,
        column: 27,
        span: 8007..8018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 28,
        span: 8018..8019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 299,
        column: 29,
        span: 8018..8020,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 30,
        span: 8020..8021,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 300,
        column: 8,
        span: 8024..8029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u3",
        ),
        line: 300,
        column: 11,
        span: 8030..8032,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 300,
        column: 13,
        span: 8033..8034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 300,
        column: 15,
        span: 8035..8036,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 300,
        column: 16,
        span: 8036..8037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "newuserdata",
        ),
        line: 300,
        column: 27,
        span: 8037..8048,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 300,
        column: 28,
        span: 8048..8049,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 300,
        column: 29,
        span: 8048..8050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 300,
        column: 30,
        span: 8050..8051,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 301,
        column: 9,
        span: 8054..8060,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 301,
        column: 10,
        span: 8060..8061,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u1",
        ),
        line: 301,
        column: 12,
        span: 8061..8063,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 301,
        column: 15,
        span: 8064..8066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        line: 301,
        column: 18,
        span: 8067..8069,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 301,
        column: 22,
        span: 8070..8073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u1",
        ),
        line: 301,
        column: 25,
        span: 8074..8076,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 301,
        column: 28,
        span: 8077..8079,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u3",
        ),
        line: 301,
        column: 31,
        span: 8080..8082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 301,
        column: 32,
        span: 8082..8083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 302,
        column: 8,
        span: 8086..8091,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 302,
        column: 9,
        span: 8091..8092,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 302,
        column: 21,
        span: 8092..8104,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 22,
        span: 8104..8105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u1",
        ),
        line: 302,
        column: 24,
        span: 8105..8107,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 302,
        column: 25,
        span: 8107..8108,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 302,
        column: 27,
        span: 8108..8110,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 28,
        span: 8110..8111,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 302,
        column: 29,
        span: 8111..8112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 303,
        column: 8,
        span: 8115..8120,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 303,
        column: 9,
        span: 8120..8121,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 303,
        column: 21,
        span: 8121..8133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 303,
        column: 22,
        span: 8133..8134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        line: 303,
        column: 24,
        span: 8134..8136,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 303,
        column: 25,
        span: 8136..8137,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 303,
        column: 27,
        span: 8137..8139,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 303,
        column: 28,
        span: 8139..8140,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 303,
        column: 29,
        span: 8140..8141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 304,
        column: 8,
        span: 8144..8149,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 304,
        column: 9,
        span: 8149..8150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setuservalue",
        ),
        line: 304,
        column: 21,
        span: 8150..8162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 304,
        column: 22,
        span: 8162..8163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u3",
        ),
        line: 304,
        column: 24,
        span: 8163..8165,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 304,
        column: 25,
        span: 8165..8166,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 304,
        column: 27,
        span: 8166..8168,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 304,
        column: 28,
        span: 8168..8169,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 304,
        column: 29,
        span: 8169..8170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 305,
        column: 8,
        span: 8173..8178,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 305,
        column: 9,
        span: 8178..8179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 305,
        column: 21,
        span: 8179..8191,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 22,
        span: 8191..8192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u1",
        ),
        line: 305,
        column: 24,
        span: 8192..8194,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 25,
        span: 8194..8195,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 305,
        column: 27,
        span: 8196..8197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 305,
        column: 31,
        span: 8197..8201,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 305,
        column: 33,
        span: 8202..8203,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 305,
        column: 42,
        span: 8204..8212,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 44,
        span: 8213..8214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 305,
        column: 45,
        span: 8214..8215,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 305,
        column: 46,
        span: 8215..8216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 305,
        column: 48,
        span: 8217..8218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 49,
        span: 8218..8219,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 306,
        column: 11,
        span: 8224..8230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 306,
        column: 17,
        span: 8231..8236,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 306,
        column: 18,
        span: 8236..8237,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        line: 306,
        column: 30,
        span: 8237..8249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 31,
        span: 8249..8250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 306,
        column: 32,
        span: 8250..8251,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 33,
        span: 8251..8252,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 306,
        column: 36,
        span: 8253..8255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 306,
        column: 42,
        span: 8256..8261,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 306,
        column: 43,
        span: 8261..8262,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getuservalue",
        ),
        line: 306,
        column: 55,
        span: 8262..8274,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 306,
        column: 56,
        span: 8274..8275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 306,
        column: 57,
        span: 8275..8276,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 306,
        column: 58,
        span: 8276..8277,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 307,
        column: 6,
        span: 8280..8283,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 307,
        column: 7,
        span: 8283..8284,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 307,
        column: 8,
        span: 8284..8285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 308,
        column: 8,
        span: 8288..8293,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 308,
        column: 9,
        span: 8293..8294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 308,
        column: 21,
        span: 8294..8306,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 22,
        span: 8306..8307,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        line: 308,
        column: 24,
        span: 8307..8309,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 25,
        span: 8309..8310,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 308,
        column: 27,
        span: 8311..8312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 308,
        column: 31,
        span: 8312..8316,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 308,
        column: 33,
        span: 8317..8318,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 308,
        column: 42,
        span: 8319..8327,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 308,
        column: 44,
        span: 8328..8329,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 308,
        column: 45,
        span: 8329..8330,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 308,
        column: 46,
        span: 8330..8331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 308,
        column: 48,
        span: 8332..8333,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 308,
        column: 49,
        span: 8333..8334,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 309,
        column: 11,
        span: 8339..8345,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 309,
        column: 0,
        span: 8346..8350,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 310,
        column: 6,
        span: 8353..8356,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 310,
        column: 7,
        span: 8356..8357,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 310,
        column: 8,
        span: 8357..8358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 311,
        column: 9,
        span: 8361..8367,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 311,
        column: 10,
        span: 8367..8368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u1",
        ),
        line: 311,
        column: 12,
        span: 8368..8370,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 311,
        column: 15,
        span: 8371..8373,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u3",
        ),
        line: 311,
        column: 18,
        span: 8374..8376,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 311,
        column: 22,
        span: 8377..8380,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u3",
        ),
        line: 311,
        column: 25,
        span: 8381..8383,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 311,
        column: 28,
        span: 8384..8386,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u1",
        ),
        line: 311,
        column: 31,
        span: 8387..8389,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 311,
        column: 35,
        span: 8390..8393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u1",
        ),
        line: 311,
        column: 38,
        span: 8394..8396,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 311,
        column: 41,
        span: 8397..8399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        line: 311,
        column: 44,
        span: 8400..8402,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 311,
        column: 45,
        span: 8402..8403,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 312,
        column: 9,
        span: 8406..8412,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 312,
        column: 10,
        span: 8412..8413,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        line: 312,
        column: 12,
        span: 8413..8415,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 312,
        column: 15,
        span: 8416..8418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u1",
        ),
        line: 312,
        column: 18,
        span: 8419..8421,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 312,
        column: 22,
        span: 8422..8425,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        line: 312,
        column: 25,
        span: 8426..8428,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 312,
        column: 28,
        span: 8429..8431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u3",
        ),
        line: 312,
        column: 31,
        span: 8432..8434,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 312,
        column: 35,
        span: 8435..8438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u3",
        ),
        line: 312,
        column: 38,
        span: 8439..8441,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 312,
        column: 41,
        span: 8442..8444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        line: 312,
        column: 44,
        span: 8445..8447,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 312,
        column: 45,
        span: 8447..8448,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 313,
        column: 9,
        span: 8451..8457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 313,
        column: 10,
        span: 8457..8458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "u2",
        ),
        line: 313,
        column: 12,
        span: 8458..8460,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 313,
        column: 15,
        span: 8461..8463,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 313,
        column: 17,
        span: 8464..8465,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 313,
        column: 18,
        span: 8465..8466,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 313,
        column: 19,
        span: 8466..8467,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 314,
        column: 0,
        span: 8505..8508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 317,
        column: 2,
        span: 8511..8512,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 317,
        column: 3,
        span: 8512..8513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        line: 317,
        column: 11,
        span: 8513..8521,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
        column: 13,
        span: 8522..8523,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 317,
        column: 22,
        span: 8524..8532,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 24,
        span: 8533..8534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 317,
        column: 25,
        span: 8534..8535,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 26,
        span: 8535..8536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 317,
        column: 27,
        span: 8536..8537,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 28,
        span: 8537..8538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 317,
        column: 29,
        span: 8538..8539,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 30,
        span: 8539..8540,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
        column: 9,
        span: 8543..8549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 10,
        span: 8549..8550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 318,
        column: 11,
        span: 8550..8551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
        column: 14,
        span: 8552..8554,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 318,
        column: 18,
        span: 8555..8558,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 19,
        span: 8558..8559,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 319,
        column: 5,
        span: 8562..8564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 319,
        column: 10,
        span: 8565..8569,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 11,
        span: 8569..8570,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 319,
        column: 12,
        span: 8570..8571,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 13,
        span: 8571..8572,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 319,
        column: 16,
        span: 8573..8575,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 319,
        column: 24,
        span: 8576..8583,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 319,
        column: 29,
        span: 8584..8588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 319,
        column: 31,
        span: 8589..8590,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 319,
        column: 33,
        span: 8591..8592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 319,
        column: 35,
        span: 8593..8594,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 319,
        column: 36,
        span: 8594..8595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 319,
        column: 39,
        span: 8595..8598,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 319,
        column: 0,
        span: 8599..8602,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 320,
        column: 5,
        span: 8605..8607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 320,
        column: 10,
        span: 8608..8612,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 11,
        span: 8612..8613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 320,
        column: 12,
        span: 8613..8614,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 13,
        span: 8614..8615,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 320,
        column: 16,
        span: 8616..8618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'table'",
        ),
        line: 320,
        column: 24,
        span: 8619..8626,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 320,
        column: 29,
        span: 8627..8631,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 320,
        column: 31,
        span: 8632..8633,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 320,
        column: 33,
        span: 8634..8635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 320,
        column: 35,
        span: 8636..8637,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 320,
        column: 36,
        span: 8637..8638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 320,
        column: 39,
        span: 8638..8641,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 320,
        column: 0,
        span: 8642..8645,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 321,
        column: 5,
        span: 8648..8650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 321,
        column: 7,
        span: 8651..8652,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 321,
        column: 12,
        span: 8653..8657,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 321,
        column: 19,
        span: 8658..8664,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 321,
        column: 21,
        span: 8665..8666,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 321,
        column: 23,
        span: 8666..8668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 321,
        column: 0,
        span: 8668..8669,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 322,
        column: 0,
        span: 8672..8676,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 323,
        column: 11,
        span: 8681..8687,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 323,
        column: 24,
        span: 8688..8700,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 25,
        span: 8700..8701,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 323,
        column: 26,
        span: 8701..8702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 323,
        column: 29,
        span: 8702..8705,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 323,
        column: 30,
        span: 8705..8706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 323,
        column: 31,
        span: 8706..8707,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 323,
        column: 33,
        span: 8707..8709,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 323,
        column: 34,
        span: 8709..8710,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 323,
        column: 35,
        span: 8710..8711,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 36,
        span: 8711..8712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 323,
        column: 38,
        span: 8713..8714,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 39,
        span: 8714..8715,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 324,
        column: 0,
        span: 8718..8721,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 325,
        column: 0,
        span: 8722..8725,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 327,
        column: 2,
        span: 8727..8728,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 327,
        column: 4,
        span: 8729..8730,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 327,
        column: 6,
        span: 8731..8732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 327,
        column: 9,
        span: 8732..8735,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 327,
        column: 10,
        span: 8735..8736,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"c\"",
        ),
        line: 327,
        column: 13,
        span: 8736..8739,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 327,
        column: 14,
        span: 8739..8740,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 327,
        column: 15,
        span: 8740..8741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 327,
        column: 28,
        span: 8742..8754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 29,
        span: 8754..8755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 327,
        column: 30,
        span: 8755..8756,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 327,
        column: 31,
        span: 8756..8757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 327,
        column: 33,
        span: 8758..8759,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 34,
        span: 8759..8760,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 328,
        column: 2,
        span: 8761..8762,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 328,
        column: 4,
        span: 8763..8764,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 328,
        column: 6,
        span: 8765..8766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 328,
        column: 9,
        span: 8766..8769,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 328,
        column: 10,
        span: 8769..8770,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"d\"",
        ),
        line: 328,
        column: 13,
        span: 8770..8773,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 328,
        column: 14,
        span: 8773..8774,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 328,
        column: 15,
        span: 8774..8775,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 328,
        column: 28,
        span: 8776..8788,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 29,
        span: 8788..8789,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 328,
        column: 30,
        span: 8789..8790,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 328,
        column: 31,
        span: 8790..8791,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 328,
        column: 33,
        span: 8792..8793,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 34,
        span: 8793..8794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 330,
        column: 2,
        span: 8796..8797,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
        column: 4,
        span: 8798..8799,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 330,
        column: 0,
        span: 8800..8804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
        column: 7,
        span: 8805..8811,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 8,
        span: 8811..8812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 331,
        column: 9,
        span: 8812..8813,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 331,
        column: 11,
        span: 8813..8815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 331,
        column: 12,
        span: 8815..8816,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
        column: 15,
        span: 8817..8819,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cd'",
        ),
        line: 331,
        column: 20,
        span: 8820..8824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 21,
        span: 8824..8825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 332,
        column: 7,
        span: 8826..8832,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 8,
        span: 8832..8833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 9,
        span: 8832..8834,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 332,
        column: 12,
        span: 8835..8837,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 332,
        column: 15,
        span: 8837..8840,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 332,
        column: 17,
        span: 8840..8842,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 332,
        column: 20,
        span: 8842..8845,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 332,
        column: 22,
        span: 8845..8847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 332,
        column: 23,
        span: 8847..8848,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 332,
        column: 25,
        span: 8848..8850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 332,
        column: 26,
        span: 8850..8851,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 332,
        column: 28,
        span: 8851..8853,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"e\"",
        ),
        line: 332,
        column: 31,
        span: 8853..8856,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 332,
        column: 33,
        span: 8856..8858,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 332,
        column: 36,
        span: 8858..8861,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 332,
        column: 38,
        span: 8861..8863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 39,
        span: 8863..8864,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 40,
        span: 8863..8865,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 332,
        column: 41,
        span: 8865..8866,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 42,
        span: 8865..8867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 43,
        span: 8867..8868,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 332,
        column: 45,
        span: 8868..8870,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"g\"",
        ),
        line: 332,
        column: 48,
        span: 8870..8873,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 332,
        column: 51,
        span: 8874..8876,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0abcdef8g\"",
        ),
        line: 332,
        column: 63,
        span: 8877..8888,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 64,
        span: 8888..8889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 334,
        column: 2,
        span: 8891..8892,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 334,
        column: 4,
        span: 8893..8894,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 334,
        column: 0,
        span: 8895..8900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 335,
        column: 7,
        span: 8901..8907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 8,
        span: 8907..8908,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 335,
        column: 9,
        span: 8908..8909,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 335,
        column: 10,
        span: 8909..8910,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 335,
        column: 12,
        span: 8910..8912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 335,
        column: 13,
        span: 8912..8913,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 335,
        column: 15,
        span: 8913..8915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 335,
        column: 16,
        span: 8915..8916,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 335,
        column: 18,
        span: 8916..8918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 335,
        column: 19,
        span: 8918..8919,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 20,
        span: 8919..8920,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 335,
        column: 21,
        span: 8920..8921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 335,
        column: 24,
        span: 8921..8924,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 335,
        column: 27,
        span: 8925..8927,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cdcd'",
        ),
        line: 335,
        column: 34,
        span: 8928..8934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 335,
        column: 35,
        span: 8934..8935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 336,
        column: 2,
        span: 8936..8937,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 336,
        column: 4,
        span: 8938..8939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 336,
        column: 6,
        span: 8940..8941,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 336,
        column: 8,
        span: 8941..8943,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 336,
        column: 0,
        span: 8943..8944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 337,
        column: 7,
        span: 8945..8951,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 8,
        span: 8951..8952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 337,
        column: 20,
        span: 8952..8964,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 21,
        span: 8964..8965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 337,
        column: 22,
        span: 8965..8966,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 23,
        span: 8966..8967,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 337,
        column: 26,
        span: 8968..8970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 337,
        column: 28,
        span: 8971..8972,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 337,
        column: 32,
        span: 8973..8976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 337,
        column: 34,
        span: 8977..8978,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 337,
        column: 35,
        span: 8978..8979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 337,
        column: 38,
        span: 8979..8982,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 337,
        column: 41,
        span: 8983..8985,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'cd'",
        ),
        line: 337,
        column: 46,
        span: 8986..8990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 47,
        span: 8990..8991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 338,
        column: 2,
        span: 8992..8993,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 338,
        column: 4,
        span: 8994..8995,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 338,
        column: 6,
        span: 8995..8997,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 338,
        column: 9,
        span: 8998..9000,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"a\"",
        ),
        line: 338,
        column: 12,
        span: 9000..9003,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 338,
        column: 14,
        span: 9003..9005,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"b\"",
        ),
        line: 338,
        column: 17,
        span: 9005..9008,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 338,
        column: 19,
        span: 9008..9010,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 338,
        column: 20,
        span: 9010..9011,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 338,
        column: 22,
        span: 9011..9013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 338,
        column: 23,
        span: 9013..9014,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 338,
        column: 25,
        span: 9014..9016,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"e\"",
        ),
        line: 338,
        column: 28,
        span: 9016..9019,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 338,
        column: 30,
        span: 9019..9021,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"f\"",
        ),
        line: 338,
        column: 33,
        span: 9021..9024,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 338,
        column: 35,
        span: 9024..9026,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"g\"",
        ),
        line: 338,
        column: 38,
        span: 9026..9029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 339,
        column: 7,
        span: 9030..9036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 339,
        column: 8,
        span: 9036..9037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 339,
        column: 9,
        span: 9037..9038,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 339,
        column: 10,
        span: 9038..9039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "val",
        ),
        line: 339,
        column: 13,
        span: 9039..9042,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 339,
        column: 16,
        span: 9043..9045,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"0abcdefg\"",
        ),
        line: 339,
        column: 27,
        span: 9046..9056,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 339,
        column: 28,
        span: 9056..9057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 343,
        column: 2,
        span: 9106..9107,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 343,
        column: 4,
        span: 9108..9109,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 343,
        column: 6,
        span: 9110..9111,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 343,
        column: 7,
        span: 9111..9112,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 344,
        column: 6,
        span: 9113..9118,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 344,
        column: 0,
        span: 9119..9120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 345,
        column: 13,
        span: 9121..9133,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 14,
        span: 9133..9134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 345,
        column: 15,
        span: 9134..9135,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 16,
        span: 9135..9136,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 345,
        column: 18,
        span: 9137..9138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__concat",
        ),
        line: 345,
        column: 26,
        span: 9138..9146,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 345,
        column: 28,
        span: 9147..9148,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 345,
        column: 37,
        span: 9149..9157,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 39,
        span: 9158..9159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 345,
        column: 40,
        span: 9159..9160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 345,
        column: 41,
        span: 9160..9161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 345,
        column: 42,
        span: 9161..9162,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 43,
        span: 9162..9163,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 346,
        column: 9,
        span: 9166..9172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 10,
        span: 9172..9173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 346,
        column: 14,
        span: 9173..9177,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 15,
        span: 9177..9178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 346,
        column: 16,
        span: 9178..9179,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 17,
        span: 9179..9180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 20,
        span: 9181..9183,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 346,
        column: 29,
        span: 9184..9192,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 346,
        column: 33,
        span: 9193..9196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 346,
        column: 35,
        span: 9197..9198,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 38,
        span: 9199..9201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 346,
        column: 40,
        span: 9202..9203,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 346,
        column: 43,
        span: 9204..9206,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 346,
        column: 48,
        span: 9207..9211,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 49,
        span: 9211..9212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 346,
        column: 50,
        span: 9212..9213,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 51,
        span: 9213..9214,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 54,
        span: 9215..9217,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"number\"",
        ),
        line: 346,
        column: 63,
        span: 9218..9226,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 346,
        column: 67,
        span: 9227..9230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 346,
        column: 69,
        span: 9231..9232,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 72,
        span: 9233..9235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 346,
        column: 74,
        span: 9236..9237,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 75,
        span: 9237..9238,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 347,
        column: 9,
        span: 9241..9247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 347,
        column: 0,
        span: 9248..9249,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 348,
        column: 4,
        span: 9250..9253,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 348,
        column: 5,
        span: 9253..9254,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 6,
        span: 9254..9255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 349,
        column: 7,
        span: 9256..9262,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 8,
        span: 9262..9263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 349,
        column: 9,
        span: 9263..9264,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 349,
        column: 11,
        span: 9264..9266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 349,
        column: 12,
        span: 9265..9267,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 349,
        column: 15,
        span: 9268..9270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 349,
        column: 17,
        span: 9271..9272,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 349,
        column: 21,
        span: 9273..9276,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 349,
        column: 23,
        span: 9276..9278,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 349,
        column: 26,
        span: 9279..9281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 349,
        column: 28,
        span: 9282..9283,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 349,
        column: 31,
        span: 9284..9286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 349,
        column: 33,
        span: 9287..9288,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 34,
        span: 9288..9289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 350,
        column: 7,
        span: 9290..9296,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 8,
        span: 9296..9297,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 350,
        column: 9,
        span: 9296..9298,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 350,
        column: 12,
        span: 9299..9301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 350,
        column: 14,
        span: 9302..9303,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 350,
        column: 17,
        span: 9304..9306,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 350,
        column: 19,
        span: 9306..9308,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 350,
        column: 22,
        span: 9309..9311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 350,
        column: 24,
        span: 9312..9313,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 350,
        column: 28,
        span: 9314..9317,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 350,
        column: 30,
        span: 9317..9319,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 350,
        column: 33,
        span: 9320..9322,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 350,
        column: 35,
        span: 9322..9324,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 350,
        column: 38,
        span: 9325..9327,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 350,
        column: 40,
        span: 9327..9329,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 350,
        column: 43,
        span: 9330..9332,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 350,
        column: 45,
        span: 9332..9334,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 350,
        column: 48,
        span: 9335..9337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 350,
        column: 50,
        span: 9338..9339,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 350,
        column: 53,
        span: 9340..9342,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 350,
        column: 55,
        span: 9343..9344,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 56,
        span: 9344..9345,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 354,
        column: 6,
        span: 9383..9388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 354,
        column: 9,
        span: 9389..9391,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 10,
        span: 9391..9392,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 354,
        column: 13,
        span: 9393..9395,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 14,
        span: 9395..9396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 354,
        column: 16,
        span: 9397..9398,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 354,
        column: 17,
        span: 9398..9399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 354,
        column: 0,
        span: 9400..9401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 355,
        column: 3,
        span: 9402..9404,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 355,
        column: 5,
        span: 9405..9406,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 355,
        column: 7,
        span: 9407..9408,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 355,
        column: 8,
        span: 9408..9409,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 355,
        column: 9,
        span: 9409..9410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 355,
        column: 12,
        span: 9412..9413,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 355,
        column: 14,
        span: 9414..9415,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 355,
        column: 16,
        span: 9416..9417,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 355,
        column: 17,
        span: 9417..9418,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 355,
        column: 18,
        span: 9418..9419,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 355,
        column: 31,
        span: 9420..9432,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 32,
        span: 9432..9433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 355,
        column: 33,
        span: 9433..9434,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 355,
        column: 34,
        span: 9434..9435,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 355,
        column: 37,
        span: 9436..9438,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 38,
        span: 9438..9439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 356,
        column: 2,
        span: 9440..9441,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 356,
        column: 4,
        span: 9442..9443,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 356,
        column: 6,
        span: 9444..9445,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 356,
        column: 7,
        span: 9445..9446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 357,
        column: 3,
        span: 9447..9449,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 357,
        column: 4,
        span: 9449..9450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 357,
        column: 8,
        span: 9450..9454,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 357,
        column: 10,
        span: 9455..9456,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 357,
        column: 19,
        span: 9457..9465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 21,
        span: 9466..9467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 22,
        span: 9467..9468,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 357,
        column: 29,
        span: 9469..9475,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 357,
        column: 34,
        span: 9476..9480,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 357,
        column: 0,
        span: 9481..9484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 358,
        column: 3,
        span: 9485..9487,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 358,
        column: 4,
        span: 9487..9488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 358,
        column: 8,
        span: 9488..9492,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 358,
        column: 10,
        span: 9493..9494,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 358,
        column: 19,
        span: 9495..9503,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 21,
        span: 9504..9505,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 22,
        span: 9505..9506,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 358,
        column: 29,
        span: 9507..9513,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 358,
        column: 34,
        span: 9514..9518,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 358,
        column: 0,
        span: 9519..9522,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 359,
        column: 13,
        span: 9523..9535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 14,
        span: 9535..9536,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 359,
        column: 15,
        span: 9536..9537,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 359,
        column: 16,
        span: 9537..9538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 359,
        column: 19,
        span: 9539..9541,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 20,
        span: 9541..9542,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
        column: 7,
        span: 9543..9549,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 8,
        span: 9549..9550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 360,
        column: 9,
        span: 9550..9551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 360,
        column: 12,
        span: 9552..9554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 360,
        column: 14,
        span: 9555..9556,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 360,
        column: 18,
        span: 9557..9560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 360,
        column: 20,
        span: 9561..9562,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 360,
        column: 22,
        span: 9563..9564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 360,
        column: 24,
        span: 9565..9566,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 360,
        column: 28,
        span: 9567..9570,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 360,
        column: 32,
        span: 9571..9574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 33,
        span: 9574..9575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 360,
        column: 34,
        span: 9575..9576,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 360,
        column: 37,
        span: 9577..9579,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 360,
        column: 39,
        span: 9580..9581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 40,
        span: 9581..9582,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 41,
        span: 9582..9583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 361,
        column: 3,
        span: 9584..9586,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 361,
        column: 5,
        span: 9587..9588,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 361,
        column: 7,
        span: 9589..9590,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 361,
        column: 8,
        span: 9590..9591,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 362,
        column: 3,
        span: 9592..9594,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 362,
        column: 4,
        span: 9594..9595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 362,
        column: 8,
        span: 9595..9599,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 362,
        column: 10,
        span: 9600..9601,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 362,
        column: 13,
        span: 9602..9604,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 362,
        column: 14,
        span: 9604..9605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__eq",
        ),
        line: 362,
        column: 0,
        span: 9605..9609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 363,
        column: 3,
        span: 9610..9612,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
        column: 4,
        span: 9612..9613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 363,
        column: 8,
        span: 9613..9617,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 363,
        column: 10,
        span: 9618..9619,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t1",
        ),
        line: 363,
        column: 13,
        span: 9620..9622,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 363,
        column: 14,
        span: 9622..9623,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__lt",
        ),
        line: 363,
        column: 0,
        span: 9623..9627,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 364,
        column: 13,
        span: 9628..9640,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 14,
        span: 9640..9641,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 364,
        column: 15,
        span: 9641..9642,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 364,
        column: 16,
        span: 9642..9643,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t2",
        ),
        line: 364,
        column: 19,
        span: 9644..9646,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 20,
        span: 9646..9647,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 365,
        column: 7,
        span: 9648..9654,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 8,
        span: 9654..9655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 365,
        column: 9,
        span: 9655..9656,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 12,
        span: 9657..9659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 365,
        column: 14,
        span: 9660..9661,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 365,
        column: 18,
        span: 9662..9665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 365,
        column: 20,
        span: 9666..9667,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 365,
        column: 22,
        span: 9668..9669,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 365,
        column: 24,
        span: 9670..9671,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 365,
        column: 28,
        span: 9672..9675,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 365,
        column: 32,
        span: 9676..9679,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 33,
        span: 9679..9680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 365,
        column: 34,
        span: 9680..9681,
    },
    Token {
        kind: LessThanOrEqual,
        lexeme: Symbol(
            "<=",
        ),
        line: 365,
        column: 37,
        span: 9682..9684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 365,
        column: 39,
        span: 9685..9686,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 40,
        span: 9686..9687,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 41,
        span: 9687..9688,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 370,
        column: 6,
        span: 9728..9733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 370,
        column: 0,
        span: 9734..9735,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 371,
        column: 6,
        span: 9736..9741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 371,
        column: 9,
        span: 9742..9744,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 371,
        column: 11,
        span: 9745..9746,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 371,
        column: 13,
        span: 9747..9748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__call",
        ),
        line: 372,
        column: 9,
        span: 9751..9757,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 372,
        column: 11,
        span: 9758..9759,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 372,
        column: 20,
        span: 9760..9768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 372,
        column: 22,
        span: 9769..9770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 372,
        column: 23,
        span: 9770..9771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 372,
        column: 24,
        span: 9771..9772,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 372,
        column: 28,
        span: 9773..9776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 372,
        column: 29,
        span: 9776..9777,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 373,
        column: 6,
        span: 9782..9783,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 373,
        column: 8,
        span: 9784..9785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 373,
        column: 10,
        span: 9786..9787,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 373,
        column: 11,
        span: 9787..9788,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 373,
        column: 0,
        span: 9787..9789,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 374,
        column: 7,
        span: 9794..9796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 374,
        column: 9,
        span: 9797..9798,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 374,
        column: 10,
        span: 9798..9799,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 374,
        column: 11,
        span: 9799..9800,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 374,
        column: 16,
        span: 9801..9805,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 374,
        column: 23,
        span: 9806..9812,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 374,
        column: 25,
        span: 9813..9814,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 374,
        column: 26,
        span: 9814..9815,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 374,
        column: 27,
        span: 9815..9816,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 374,
        column: 28,
        span: 9816..9817,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 374,
        column: 31,
        span: 9817..9820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 374,
        column: 32,
        span: 9820..9821,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 375,
        column: 9,
        span: 9826..9830,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 375,
        column: 16,
        span: 9831..9837,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 375,
        column: 18,
        span: 9838..9839,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 375,
        column: 21,
        span: 9839..9842,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 375,
        column: 22,
        span: 9842..9843,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 376,
        column: 0,
        span: 9848..9851,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 377,
        column: 0,
        span: 9854..9857,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 378,
        column: 2,
        span: 9858..9859,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 380,
        column: 6,
        span: 9861..9866,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 380,
        column: 8,
        span: 9867..9868,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 10,
        span: 9869..9870,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 380,
        column: 23,
        span: 9871..9883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 380,
        column: 24,
        span: 9883..9884,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 380,
        column: 25,
        span: 9884..9885,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 380,
        column: 26,
        span: 9885..9886,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 27,
        span: 9886..9887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 380,
        column: 30,
        span: 9888..9890,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 380,
        column: 31,
        span: 9890..9891,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 381,
        column: 6,
        span: 9892..9897,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 381,
        column: 8,
        span: 9898..9899,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 381,
        column: 10,
        span: 9900..9901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 381,
        column: 23,
        span: 9902..9914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 381,
        column: 24,
        span: 9914..9915,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 381,
        column: 25,
        span: 9915..9916,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 381,
        column: 26,
        span: 9916..9917,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 381,
        column: 27,
        span: 9917..9918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 381,
        column: 28,
        span: 9918..9919,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 381,
        column: 29,
        span: 9919..9920,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 381,
        column: 30,
        span: 9920..9921,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 381,
        column: 33,
        span: 9922..9924,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 381,
        column: 34,
        span: 9924..9925,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 382,
        column: 6,
        span: 9926..9931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 382,
        column: 8,
        span: 9932..9933,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 382,
        column: 10,
        span: 9934..9935,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 382,
        column: 23,
        span: 9936..9948,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 24,
        span: 9948..9949,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 382,
        column: 25,
        span: 9949..9950,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 382,
        column: 26,
        span: 9950..9951,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 382,
        column: 27,
        span: 9951..9952,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 382,
        column: 28,
        span: 9952..9953,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 382,
        column: 29,
        span: 9953..9954,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 382,
        column: 30,
        span: 9954..9955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "tt",
        ),
        line: 382,
        column: 33,
        span: 9956..9958,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 34,
        span: 9958..9959,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 384,
        column: 2,
        span: 9961..9962,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 4,
        span: 9963..9964,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 384,
        column: 0,
        span: 9964..9966,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 385,
        column: 2,
        span: 9967..9968,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 4,
        span: 9969..9970,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 385,
        column: 6,
        span: 9971..9972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 385,
        column: 7,
        span: 9972..9973,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 8,
        span: 9972..9974,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 9,
        span: 9974..9975,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 10,
        span: 9974..9976,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 385,
        column: 11,
        span: 9976..9977,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 385,
        column: 12,
        span: 9976..9978,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 385,
        column: 13,
        span: 9978..9979,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 386,
        column: 7,
        span: 9980..9986,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 386,
        column: 8,
        span: 9986..9987,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 386,
        column: 9,
        span: 9987..9988,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 12,
        span: 9989..9991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 14,
        span: 9991..9993,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 386,
        column: 18,
        span: 9994..9997,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 386,
        column: 20,
        span: 9998..9999,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 386,
        column: 21,
        span: 9999..10000,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 22,
        span: 9999..10001,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 386,
        column: 23,
        span: 10001..10002,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 26,
        span: 10003..10005,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 28,
        span: 10005..10007,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 386,
        column: 32,
        span: 10008..10011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 386,
        column: 34,
        span: 10012..10013,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 386,
        column: 35,
        span: 10013..10014,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 36,
        span: 10013..10015,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 386,
        column: 37,
        span: 10015..10016,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 386,
        column: 40,
        span: 10017..10019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 386,
        column: 42,
        span: 10019..10021,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 386,
        column: 43,
        span: 10021..10022,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
        column: 7,
        span: 10025..10031,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 8,
        span: 10031..10032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 389,
        column: 10,
        span: 10032..10034,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 389,
        column: 11,
        span: 10034..10035,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "X",
        ),
        line: 389,
        column: 12,
        span: 10035..10036,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 389,
        column: 15,
        span: 10037..10039,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 18,
        span: 10039..10042,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 19,
        span: 10042..10043,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 391,
        column: 6,
        span: 10045..10050,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 391,
        column: 9,
        span: 10050..10053,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 393,
        column: 6,
        span: 10055..10060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_g",
        ),
        line: 393,
        column: 9,
        span: 10061..10063,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 393,
        column: 11,
        span: 10064..10065,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 393,
        column: 0,
        span: 10066..10068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 394,
        column: 5,
        span: 10069..10073,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 7,
        span: 10074..10075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 394,
        column: 20,
        span: 10076..10088,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 21,
        span: 10088..10089,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 394,
        column: 22,
        span: 10089..10090,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 394,
        column: 23,
        span: 10090..10091,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 24,
        span: 10091..10092,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 394,
        column: 26,
        span: 10093..10094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 394,
        column: 33,
        span: 10094..10101,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 34,
        span: 10101..10102,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 394,
        column: 42,
        span: 10102..10110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 394,
        column: 44,
        span: 10111..10112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_",
        ),
        line: 394,
        column: 45,
        span: 10112..10113,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 46,
        span: 10113..10114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 394,
        column: 47,
        span: 10114..10115,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 48,
        span: 10115..10116,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 394,
        column: 55,
        span: 10117..10123,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_g",
        ),
        line: 394,
        column: 58,
        span: 10124..10126,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 394,
        column: 59,
        span: 10126..10127,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 394,
        column: 60,
        span: 10127..10128,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 394,
        column: 61,
        span: 10128..10129,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 394,
        column: 65,
        span: 10130..10133,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 394,
        column: 66,
        span: 10133..10134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 394,
        column: 67,
        span: 10134..10135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 397,
        column: 2,
        span: 10138..10139,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 397,
        column: 4,
        span: 10140..10141,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 397,
        column: 6,
        span: 10142..10143,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 397,
        column: 7,
        span: 10143..10144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawset",
        ),
        line: 398,
        column: 7,
        span: 10145..10151,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 8,
        span: 10151..10152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 398,
        column: 9,
        span: 10152..10153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 10,
        span: 10153..10154,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 398,
        column: 14,
        span: 10155..10158,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 15,
        span: 10158..10159,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 17,
        span: 10159..10161,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 18,
        span: 10161..10162,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 20,
        span: 10162..10164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 398,
        column: 21,
        span: 10164..10165,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 23,
        span: 10165..10167,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 24,
        span: 10167..10168,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 399,
        column: 7,
        span: 10169..10175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 8,
        span: 10175..10176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 399,
        column: 9,
        span: 10176..10177,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 399,
        column: 10,
        span: 10177..10178,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 399,
        column: 11,
        span: 10178..10179,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 399,
        column: 14,
        span: 10180..10182,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 16,
        span: 10182..10184,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 399,
        column: 20,
        span: 10185..10188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 399,
        column: 27,
        span: 10189..10195,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 399,
        column: 28,
        span: 10195..10196,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 399,
        column: 29,
        span: 10196..10197,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 399,
        column: 30,
        span: 10197..10198,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 399,
        column: 34,
        span: 10199..10202,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 399,
        column: 35,
        span: 10202..10203,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 37,
        span: 10203..10205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 38,
        span: 10205..10206,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 399,
        column: 41,
        span: 10207..10209,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 399,
        column: 43,
        span: 10209..10211,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 399,
        column: 44,
        span: 10211..10212,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 401,
        column: 6,
        span: 10214..10219,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 401,
        column: 10,
        span: 10220..10223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 404,
        column: 3,
        span: 10263..10265,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 404,
        column: 5,
        span: 10266..10267,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 404,
        column: 7,
        span: 10268..10269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 404,
        column: 14,
        span: 10269..10276,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 404,
        column: 16,
        span: 10277..10278,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 404,
        column: 25,
        span: 10279..10287,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 404,
        column: 27,
        span: 10288..10289,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 404,
        column: 28,
        span: 10289..10290,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 404,
        column: 29,
        span: 10290..10291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 404,
        column: 30,
        span: 10291..10292,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 404,
        column: 31,
        span: 10292..10293,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 404,
        column: 38,
        span: 10294..10300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 404,
        column: 40,
        span: 10301..10302,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 404,
        column: 41,
        span: 10302..10303,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 404,
        column: 42,
        span: 10303..10304,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 404,
        column: 46,
        span: 10305..10308,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 404,
        column: 47,
        span: 10308..10309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__len",
        ),
        line: 405,
        column: 12,
        span: 10316..10321,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 405,
        column: 14,
        span: 10322..10323,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 405,
        column: 23,
        span: 10324..10332,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 25,
        span: 10333..10334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 405,
        column: 26,
        span: 10334..10335,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 27,
        span: 10335..10336,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 405,
        column: 34,
        span: 10337..10343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 405,
        column: 39,
        span: 10344..10348,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 405,
        column: 40,
        span: 10348..10349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "floor",
        ),
        line: 405,
        column: 45,
        span: 10349..10354,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 405,
        column: 46,
        span: 10354..10355,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 405,
        column: 47,
        span: 10355..10356,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 405,
        column: 48,
        span: 10356..10357,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 405,
        column: 52,
        span: 10358..10361,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 405,
        column: 53,
        span: 10361..10362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 406,
        column: 6,
        span: 10363..10368,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 406,
        column: 7,
        span: 10368..10369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 406,
        column: 19,
        span: 10369..10381,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 406,
        column: 20,
        span: 10381..10382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 406,
        column: 22,
        span: 10381..10384,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 406,
        column: 23,
        span: 10384..10385,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 406,
        column: 26,
        span: 10386..10388,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 406,
        column: 27,
        span: 10388..10389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 407,
        column: 7,
        span: 10390..10396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 8,
        span: 10396..10397,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 407,
        column: 20,
        span: 10397..10409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 407,
        column: 21,
        span: 10409..10410,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 407,
        column: 22,
        span: 10410..10411,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 23,
        span: 10410..10412,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 24,
        span: 10412..10413,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 407,
        column: 27,
        span: 10414..10416,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 407,
        column: 30,
        span: 10417..10419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 407,
        column: 31,
        span: 10419..10420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 408,
        column: 7,
        span: 10421..10427,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 8,
        span: 10427..10428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 408,
        column: 9,
        span: 10428..10429,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 11,
        span: 10428..10431,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 12,
        span: 10431..10432,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 408,
        column: 13,
        span: 10432..10433,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 14,
        span: 10432..10434,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 408,
        column: 15,
        span: 10434..10435,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 408,
        column: 18,
        span: 10436..10438,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 408,
        column: 21,
        span: 10438..10441,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 408,
        column: 22,
        span: 10441..10442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 409,
        column: 7,
        span: 10443..10449,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 8,
        span: 10449..10450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 409,
        column: 9,
        span: 10450..10451,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
        column: 11,
        span: 10450..10453,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 12,
        span: 10453..10454,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 409,
        column: 13,
        span: 10454..10455,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"3\"",
        ),
        line: 409,
        column: 16,
        span: 10455..10458,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 409,
        column: 17,
        span: 10458..10459,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 409,
        column: 20,
        span: 10460..10462,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 409,
        column: 23,
        span: 10462..10465,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 409,
        column: 24,
        span: 10465..10466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 410,
        column: 7,
        span: 10467..10473,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 410,
        column: 8,
        span: 10473..10474,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 410,
        column: 9,
        span: 10474..10475,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: ".45",
                },
            ),
        ),
        line: 410,
        column: 13,
        span: 10474..10479,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 410,
        column: 16,
        span: 10480..10482,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 410,
        column: 18,
        span: 10482..10484,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 410,
        column: 19,
        span: 10484..10485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 411,
        column: 6,
        span: 10486..10491,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 411,
        column: 7,
        span: 10491..10492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 411,
        column: 19,
        span: 10492..10504,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 411,
        column: 20,
        span: 10504..10505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 411,
        column: 22,
        span: 10504..10507,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 411,
        column: 23,
        span: 10507..10508,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 411,
        column: 27,
        span: 10509..10512,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 411,
        column: 28,
        span: 10512..10513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
        column: 7,
        span: 10514..10520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 8,
        span: 10520..10521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 412,
        column: 20,
        span: 10521..10533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 21,
        span: 10533..10534,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 412,
        column: 22,
        span: 10534..10535,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 23,
        span: 10534..10536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 24,
        span: 10536..10537,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 412,
        column: 27,
        span: 10538..10540,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 412,
        column: 31,
        span: 10541..10544,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 32,
        span: 10544..10545,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 414,
        column: 6,
        span: 10547..10552,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 414,
        column: 7,
        span: 10552..10553,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 414,
        column: 19,
        span: 10553..10565,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 414,
        column: 20,
        span: 10565..10566,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 414,
        column: 24,
        span: 10566..10570,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 414,
        column: 25,
        span: 10570..10571,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 414,
        column: 28,
        span: 10572..10574,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 414,
        column: 29,
        span: 10574..10575,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 415,
        column: 7,
        span: 10576..10582,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 8,
        span: 10582..10583,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 415,
        column: 20,
        span: 10583..10595,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 415,
        column: 21,
        span: 10595..10596,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 415,
        column: 26,
        span: 10596..10601,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 27,
        span: 10601..10602,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 415,
        column: 30,
        span: 10603..10605,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 415,
        column: 33,
        span: 10606..10608,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 415,
        column: 34,
        span: 10608..10609,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 416,
        column: 3,
        span: 10610..10612,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 416,
        column: 4,
        span: 10612..10613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 416,
        column: 11,
        span: 10613..10620,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 416,
        column: 13,
        span: 10621..10622,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 416,
        column: 22,
        span: 10623..10631,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 416,
        column: 24,
        span: 10632..10633,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 25,
        span: 10633..10634,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 416,
        column: 26,
        span: 10634..10635,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 416,
        column: 27,
        span: 10635..10636,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 416,
        column: 28,
        span: 10636..10637,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 416,
        column: 35,
        span: 10638..10644,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 37,
        span: 10645..10646,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 416,
        column: 40,
        span: 10647..10649,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 416,
        column: 42,
        span: 10650..10651,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 416,
        column: 0,
        span: 10652..10655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 417,
        column: 7,
        span: 10656..10662,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 8,
        span: 10662..10663,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 417,
        column: 9,
        span: 10663..10664,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 417,
        column: 13,
        span: 10664..10668,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 14,
        span: 10668..10669,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 417,
        column: 15,
        span: 10669..10670,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 417,
        column: 20,
        span: 10670..10675,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 417,
        column: 21,
        span: 10675..10676,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 417,
        column: 24,
        span: 10677..10679,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 417,
        column: 29,
        span: 10680..10684,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 417,
        column: 30,
        span: 10684..10685,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 7,
        span: 10686..10692,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 8,
        span: 10692..10693,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 9,
        span: 10693..10694,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 418,
        column: 14,
        span: 10694..10699,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 15,
        span: 10699..10700,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 418,
        column: 16,
        span: 10700..10701,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 418,
        column: 21,
        span: 10701..10706,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 418,
        column: 22,
        span: 10706..10707,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
        column: 25,
        span: 10708..10710,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 418,
        column: 31,
        span: 10711..10716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 418,
        column: 32,
        span: 10716..10717,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 419,
        column: 6,
        span: 10718..10723,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 419,
        column: 7,
        span: 10723..10724,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 419,
        column: 19,
        span: 10724..10736,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 419,
        column: 20,
        span: 10736..10737,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 419,
        column: 25,
        span: 10737..10742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 419,
        column: 26,
        span: 10742..10743,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 419,
        column: 30,
        span: 10744..10747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 31,
        span: 10747..10748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 420,
        column: 7,
        span: 10749..10755,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 8,
        span: 10755..10756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 420,
        column: 20,
        span: 10756..10768,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 420,
        column: 21,
        span: 10768..10769,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 420,
        column: 25,
        span: 10769..10773,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 26,
        span: 10773..10774,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 420,
        column: 29,
        span: 10775..10777,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 420,
        column: 33,
        span: 10778..10781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 420,
        column: 34,
        span: 10781..10782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 422,
        column: 6,
        span: 10784..10789,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 422,
        column: 7,
        span: 10789..10790,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 422,
        column: 19,
        span: 10790..10802,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 422,
        column: 20,
        span: 10802..10803,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 422,
        column: 23,
        span: 10803..10806,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 422,
        column: 24,
        span: 10806..10807,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 422,
        column: 27,
        span: 10808..10810,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 422,
        column: 28,
        span: 10810..10811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 423,
        column: 7,
        span: 10812..10818,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 8,
        span: 10818..10819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 423,
        column: 20,
        span: 10819..10831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 423,
        column: 21,
        span: 10831..10832,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 423,
        column: 24,
        span: 10832..10835,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 25,
        span: 10835..10836,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 423,
        column: 28,
        span: 10837..10839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 423,
        column: 31,
        span: 10840..10842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 423,
        column: 32,
        span: 10842..10843,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "mt",
        ),
        line: 424,
        column: 3,
        span: 10844..10846,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 424,
        column: 4,
        span: 10846..10847,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__add",
        ),
        line: 424,
        column: 9,
        span: 10847..10852,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 424,
        column: 11,
        span: 10853..10854,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 424,
        column: 20,
        span: 10855..10863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 22,
        span: 10864..10865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 23,
        span: 10865..10866,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 424,
        column: 24,
        span: 10866..10867,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 424,
        column: 25,
        span: 10867..10868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 26,
        span: 10868..10869,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 424,
        column: 33,
        span: 10870..10876,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 35,
        span: 10877..10878,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 36,
        span: 10878..10879,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 424,
        column: 39,
        span: 10880..10882,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 41,
        span: 10882..10884,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 42,
        span: 10884..10885,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 424,
        column: 44,
        span: 10886..10887,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 46,
        span: 10888..10889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 424,
        column: 47,
        span: 10889..10890,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 424,
        column: 50,
        span: 10891..10893,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 52,
        span: 10893..10895,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 424,
        column: 53,
        span: 10895..10896,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 424,
        column: 0,
        span: 10897..10900,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 425,
        column: 7,
        span: 10901..10907,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 425,
        column: 8,
        span: 10907..10908,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 10,
        span: 10907..10910,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 425,
        column: 12,
        span: 10911..10912,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 425,
        column: 16,
        span: 10913..10916,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 425,
        column: 19,
        span: 10917..10919,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 22,
        span: 10919..10922,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 23,
        span: 10922..10923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 426,
        column: 7,
        span: 10924..10930,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 426,
        column: 8,
        span: 10930..10931,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 426,
        column: 11,
        span: 10931..10934,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 426,
        column: 13,
        span: 10935..10936,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 16,
        span: 10936..10939,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 426,
        column: 19,
        span: 10940..10942,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 426,
        column: 22,
        span: 10942..10945,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 426,
        column: 23,
        span: 10945..10946,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 427,
        column: 7,
        span: 10947..10953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 427,
        column: 8,
        span: 10953..10954,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 427,
        column: 11,
        span: 10954..10957,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 427,
        column: 13,
        span: 10958..10959,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 427,
        column: 17,
        span: 10960..10963,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 427,
        column: 20,
        span: 10964..10966,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 427,
        column: 22,
        span: 10966..10968,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 427,
        column: 23,
        span: 10968..10969,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 428,
        column: 6,
        span: 10970..10975,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 428,
        column: 7,
        span: 10975..10976,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 428,
        column: 19,
        span: 10976..10988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 428,
        column: 20,
        span: 10988..10989,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 428,
        column: 23,
        span: 10989..10992,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 428,
        column: 24,
        span: 10992..10993,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 428,
        column: 28,
        span: 10994..10997,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 428,
        column: 29,
        span: 10997..10998,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 429,
        column: 7,
        span: 10999..11005,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 8,
        span: 11005..11006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "getmetatable",
        ),
        line: 429,
        column: 20,
        span: 11006..11018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 429,
        column: 21,
        span: 11018..11019,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 429,
        column: 24,
        span: 11019..11022,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 25,
        span: 11022..11023,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 429,
        column: 28,
        span: 11024..11026,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 429,
        column: 32,
        span: 11027..11030,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 429,
        column: 33,
        span: 11030..11031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "debug",
        ),
        line: 431,
        column: 6,
        span: 11033..11038,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 431,
        column: 7,
        span: 11038..11039,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 431,
        column: 19,
        span: 11039..11051,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 431,
        column: 20,
        span: 11051..11052,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 431,
        column: 23,
        span: 11052..11055,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 431,
        column: 24,
        span: 11055..11056,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 431,
        column: 26,
        span: 11057..11058,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 431,
        column: 27,
        span: 11058..11059,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 431,
        column: 28,
        span: 11059..11060,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 435,
        column: 2,
        span: 11086..11087,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 435,
        column: 4,
        span: 11088..11089,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 435,
        column: 6,
        span: 11090..11091,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 435,
        column: 7,
        span: 11091..11092,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 435,
        column: 8,
        span: 11092..11093,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 435,
        column: 21,
        span: 11094..11106,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 22,
        span: 11106..11107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 435,
        column: 23,
        span: 11107..11108,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 435,
        column: 24,
        span: 11108..11109,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 435,
        column: 26,
        span: 11110..11111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 435,
        column: 27,
        span: 11111..11112,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 435,
        column: 28,
        span: 11112..11113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 435,
        column: 30,
        span: 11114..11115,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 435,
        column: 31,
        span: 11115..11116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__index",
        ),
        line: 435,
        column: 38,
        span: 11116..11123,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 435,
        column: 40,
        span: 11124..11125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 435,
        column: 42,
        span: 11126..11127,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 435,
        column: 43,
        span: 11127..11128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 435,
        column: 45,
        span: 11129..11130,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 435,
        column: 46,
        span: 11130..11131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 435,
        column: 56,
        span: 11131..11141,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 435,
        column: 58,
        span: 11142..11143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 435,
        column: 0,
        span: 11144..11145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 436,
        column: 7,
        span: 11146..11152,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 8,
        span: 11152..11153,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 436,
        column: 11,
        span: 11153..11156,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 436,
        column: 17,
        span: 11157..11162,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 18,
        span: 11162..11163,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 436,
        column: 26,
        span: 11163..11171,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 436,
        column: 28,
        span: 11172..11173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 436,
        column: 29,
        span: 11173..11174,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 436,
        column: 30,
        span: 11174..11175,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 436,
        column: 31,
        span: 11175..11176,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 32,
        span: 11176..11177,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 436,
        column: 39,
        span: 11178..11184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 436,
        column: 41,
        span: 11185..11186,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 436,
        column: 42,
        span: 11186..11187,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 436,
        column: 43,
        span: 11187..11188,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 436,
        column: 44,
        span: 11188..11189,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 436,
        column: 48,
        span: 11190..11193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 436,
        column: 49,
        span: 11193..11194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 436,
        column: 51,
        span: 11195..11196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 436,
        column: 52,
        span: 11196..11197,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 436,
        column: 55,
        span: 11197..11200,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 56,
        span: 11200..11201,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 57,
        span: 11201..11202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 437,
        column: 7,
        span: 11203..11209,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
        column: 8,
        span: 11209..11210,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 437,
        column: 11,
        span: 11210..11213,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 437,
        column: 17,
        span: 11214..11219,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
        column: 18,
        span: 11219..11220,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 437,
        column: 26,
        span: 11220..11228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 437,
        column: 28,
        span: 11229..11230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 437,
        column: 29,
        span: 11230..11231,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 437,
        column: 30,
        span: 11231..11232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 437,
        column: 31,
        span: 11232..11233,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 437,
        column: 32,
        span: 11233..11234,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 437,
        column: 33,
        span: 11234..11235,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
        column: 34,
        span: 11235..11236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 437,
        column: 36,
        span: 11237..11238,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 437,
        column: 37,
        span: 11238..11239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 437,
        column: 38,
        span: 11239..11240,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 437,
        column: 39,
        span: 11240..11241,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 437,
        column: 41,
        span: 11242..11243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 437,
        column: 43,
        span: 11244..11245,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 437,
        column: 47,
        span: 11246..11249,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 437,
        column: 48,
        span: 11249..11250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 437,
        column: 50,
        span: 11251..11252,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 437,
        column: 51,
        span: 11252..11253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 437,
        column: 54,
        span: 11253..11256,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 437,
        column: 55,
        span: 11256..11257,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 437,
        column: 60,
        span: 11258..11262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
        column: 61,
        span: 11262..11263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 437,
        column: 62,
        span: 11263..11264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 440,
        column: 2,
        span: 11280..11281,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
        column: 3,
        span: 11281..11282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 440,
        column: 5,
        span: 11283..11284,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 440,
        column: 6,
        span: 11284..11285,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "V",
        ),
        line: 440,
        column: 8,
        span: 11286..11287,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 440,
        column: 10,
        span: 11288..11289,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 440,
        column: 0,
        span: 11290..11293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "grandparent",
        ),
        line: 441,
        column: 12,
        span: 11294..11305,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 441,
        column: 14,
        span: 11306..11307,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 441,
        column: 16,
        span: 11308..11309,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 441,
        column: 17,
        span: 11309..11310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "grandparent",
        ),
        line: 442,
        column: 12,
        span: 11311..11322,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 442,
        column: 13,
        span: 11322..11323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 442,
        column: 23,
        span: 11323..11333,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 25,
        span: 11334..11335,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 442,
        column: 34,
        span: 11336..11344,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 442,
        column: 35,
        span: 11344..11345,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 442,
        column: 36,
        span: 11345..11346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 442,
        column: 37,
        span: 11346..11347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 442,
        column: 38,
        span: 11347..11348,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 442,
        column: 39,
        span: 11348..11349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 442,
        column: 40,
        span: 11349..11350,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 442,
        column: 41,
        span: 11350..11351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 442,
        column: 43,
        span: 11352..11353,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 44,
        span: 11353..11354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 442,
        column: 45,
        span: 11354..11355,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 442,
        column: 46,
        span: 11355..11356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 442,
        column: 48,
        span: 11357..11358,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 49,
        span: 11358..11359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "k",
        ),
        line: 442,
        column: 50,
        span: 11359..11360,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 442,
        column: 51,
        span: 11360..11361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "V",
        ),
        line: 442,
        column: 53,
        span: 11362..11363,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 54,
        span: 11363..11364,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "v",
        ),
        line: 442,
        column: 55,
        span: 11364..11365,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 442,
        column: 0,
        span: 11366..11369,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 444,
        column: 7,
        span: 11371..11377,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 444,
        column: 9,
        span: 11378..11379,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 444,
        column: 11,
        span: 11380..11381,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 444,
        column: 12,
        span: 11381..11382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 445,
        column: 7,
        span: 11383..11389,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 445,
        column: 8,
        span: 11389..11390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "__newindex",
        ),
        line: 445,
        column: 18,
        span: 11390..11400,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 445,
        column: 20,
        span: 11401..11402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 445,
        column: 0,
        span: 11403..11409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 446,
        column: 13,
        span: 11410..11422,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 14,
        span: 11422..11423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 446,
        column: 20,
        span: 11423..11429,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 446,
        column: 21,
        span: 11429..11430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "grandparent",
        ),
        line: 446,
        column: 33,
        span: 11431..11442,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 34,
        span: 11442..11443,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "child",
        ),
        line: 448,
        column: 6,
        span: 11445..11450,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 448,
        column: 8,
        span: 11451..11452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "setmetatable",
        ),
        line: 448,
        column: 21,
        span: 11453..11465,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 448,
        column: 22,
        span: 11465..11466,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 448,
        column: 23,
        span: 11466..11467,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 448,
        column: 24,
        span: 11467..11468,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 448,
        column: 25,
        span: 11468..11469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 448,
        column: 32,
        span: 11470..11476,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 33,
        span: 11476..11477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "child",
        ),
        line: 449,
        column: 6,
        span: 11478..11483,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 449,
        column: 7,
        span: 11483..11484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 449,
        column: 10,
        span: 11484..11487,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
        column: 12,
        span: 11488..11489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 449,
        column: 15,
        span: 11489..11492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 450,
        column: 7,
        span: 11527..11533,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 8,
        span: 11533..11534,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "T",
        ),
        line: 450,
        column: 9,
        span: 11534..11535,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 450,
        column: 12,
        span: 11536..11538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "parent",
        ),
        line: 450,
        column: 19,
        span: 11539..11545,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 450,
        column: 23,
        span: 11546..11549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "K",
        ),
        line: 450,
        column: 25,
        span: 11550..11551,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 450,
        column: 28,
        span: 11552..11554,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"foo\"",
        ),
        line: 450,
        column: 34,
        span: 11555..11560,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 450,
        column: 38,
        span: 11561..11564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "V",
        ),
        line: 450,
        column: 40,
        span: 11565..11566,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 450,
        column: 43,
        span: 11567..11569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 450,
        column: 46,
        span: 11569..11572,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 47,
        span: 11572..11573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 452,
        column: 6,
        span: 11575..11580,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 452,
        column: 11,
        span: 11581..11585,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 454,
        column: 7,
        span: 11587..11593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 454,
        column: 0,
        span: 11593..11596,
    },
]
