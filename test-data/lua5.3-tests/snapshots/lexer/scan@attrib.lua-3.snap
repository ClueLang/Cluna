---
source: src/main.rs
expression: scanned
input_file: test-data/lua5.3-tests/attrib.lua
---
[
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 4,
        column: 6,
        span: 101..106,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing require\"",
        ),
        line: 4,
        column: 24,
        span: 107..124,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 6,
        column: 7,
        span: 126..132,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 6,
        column: 8,
        span: 132..133,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 6,
        column: 15,
        span: 133..140,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 6,
        column: 23,
        span: 140..148,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 6,
        column: 26,
        span: 149..151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 6,
        column: 33,
        span: 152..158,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 6,
        column: 34,
        span: 158..159,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 7,
        column: 7,
        span: 160..166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 7,
        column: 8,
        span: 166..167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 7,
        column: 15,
        span: 167..174,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"math\"",
        ),
        line: 7,
        column: 21,
        span: 174..180,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 7,
        column: 24,
        span: 181..183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 7,
        column: 29,
        span: 184..188,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 7,
        column: 30,
        span: 188..189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 8,
        column: 7,
        span: 190..196,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 8,
        column: 8,
        span: 196..197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 8,
        column: 15,
        span: 197..204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 8,
        column: 22,
        span: 204..211,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 8,
        column: 25,
        span: 212..214,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 8,
        column: 31,
        span: 215..220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 8,
        column: 32,
        span: 220..221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 9,
        column: 7,
        span: 222..228,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 9,
        column: 8,
        span: 228..229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 9,
        column: 15,
        span: 229..236,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"io\"",
        ),
        line: 9,
        column: 19,
        span: 236..240,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 9,
        column: 22,
        span: 241..243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 9,
        column: 25,
        span: 244..246,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 9,
        column: 26,
        span: 246..247,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 10,
        column: 7,
        span: 248..254,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 10,
        column: 8,
        span: 254..255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 10,
        column: 15,
        span: 255..262,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"os\"",
        ),
        line: 10,
        column: 19,
        span: 262..266,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 10,
        column: 22,
        span: 267..269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 10,
        column: 25,
        span: 270..272,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 10,
        column: 26,
        span: 272..273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 11,
        column: 7,
        span: 274..280,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 11,
        column: 8,
        span: 280..281,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 11,
        column: 15,
        span: 281..288,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"coroutine\"",
        ),
        line: 11,
        column: 26,
        span: 288..299,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 11,
        column: 29,
        span: 300..302,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "coroutine",
        ),
        line: 11,
        column: 39,
        span: 303..312,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 11,
        column: 40,
        span: 312..313,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 13,
        column: 7,
        span: 315..321,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 8,
        span: 321..322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 13,
        column: 12,
        span: 322..326,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 13,
        column: 13,
        span: 326..327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 13,
        column: 20,
        span: 327..334,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 13,
        column: 21,
        span: 334..335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 13,
        column: 25,
        span: 335..339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 26,
        span: 339..340,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 13,
        column: 29,
        span: 341..343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 13,
        column: 38,
        span: 344..352,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 13,
        column: 39,
        span: 352..353,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 14,
        column: 7,
        span: 354..360,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 8,
        span: 360..361,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 14,
        column: 12,
        span: 361..365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 14,
        column: 13,
        span: 365..366,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 14,
        column: 20,
        span: 366..373,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 14,
        column: 21,
        span: 373..374,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 14,
        column: 26,
        span: 374..379,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 27,
        span: 379..380,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 14,
        column: 30,
        span: 381..383,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 14,
        column: 39,
        span: 384..392,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 14,
        column: 40,
        span: 392..393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 15,
        column: 7,
        span: 394..400,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 8,
        span: 400..401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 15,
        column: 12,
        span: 401..405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 15,
        column: 13,
        span: 405..406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 15,
        column: 20,
        span: 406..413,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 15,
        column: 21,
        span: 413..414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 15,
        column: 27,
        span: 414..420,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 28,
        span: 420..421,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 15,
        column: 31,
        span: 422..424,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 15,
        column: 39,
        span: 425..432,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 15,
        column: 40,
        span: 432..433,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 16,
        column: 7,
        span: 434..440,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 8,
        span: 440..441,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 16,
        column: 12,
        span: 441..445,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 16,
        column: 13,
        span: 445..446,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 16,
        column: 20,
        span: 446..453,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 16,
        column: 21,
        span: 453..454,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preload",
        ),
        line: 16,
        column: 28,
        span: 454..461,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 29,
        span: 461..462,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 16,
        column: 32,
        span: 463..465,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"table\"",
        ),
        line: 16,
        column: 40,
        span: 466..473,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 16,
        column: 41,
        span: 473..474,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 18,
        column: 7,
        span: 476..482,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 8,
        span: 482..483,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 18,
        column: 12,
        span: 483..487,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 18,
        column: 13,
        span: 487..488,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 18,
        column: 20,
        span: 488..495,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 18,
        column: 21,
        span: 495..496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "config",
        ),
        line: 18,
        column: 27,
        span: 496..502,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 28,
        span: 502..503,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 18,
        column: 31,
        span: 504..506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 18,
        column: 40,
        span: 507..515,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 18,
        column: 41,
        span: 515..516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 19,
        column: 6,
        span: 517..522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 7,
        span: 522..523,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"package config: \"",
        ),
        line: 19,
        column: 25,
        span: 523..541,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 19,
        column: 27,
        span: 541..543,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 19,
        column: 33,
        span: 543..549,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 34,
        span: 549..550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 19,
        column: 38,
        span: 550..554,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 19,
        column: 39,
        span: 554..555,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 19,
        column: 46,
        span: 555..562,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 19,
        column: 47,
        span: 562..563,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "config",
        ),
        line: 19,
        column: 53,
        span: 563..569,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 54,
        span: 569..570,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\n\"",
        ),
        line: 19,
        column: 59,
        span: 571..575,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 19,
        column: 60,
        span: 575..576,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"|\"",
        ),
        line: 19,
        column: 64,
        span: 577..580,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 65,
        span: 580..581,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 19,
        column: 66,
        span: 581..582,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 21,
        column: 0,
        span: 584..586,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 24,
        column: 8,
        span: 669..674,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 24,
        column: 12,
        span: 675..678,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 24,
        column: 14,
        span: 679..680,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_soft",
        ),
        line: 24,
        column: 20,
        span: 681..686,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 24,
        column: 24,
        span: 687..690,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "100",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 28,
        span: 690..694,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 24,
        column: 31,
        span: 695..697,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2000",
                    after_decimal: "",
                },
            ),
        ),
        line: 24,
        column: 0,
        span: 697..702,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 25,
        column: 8,
        span: 705..710,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 25,
        column: 10,
        span: 711..712,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 25,
        column: 12,
        span: 713..714,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 25,
        column: 14,
        span: 715..716,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 25,
        column: 15,
        span: 716..717,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 26,
        column: 6,
        span: 720..723,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 26,
        column: 8,
        span: 724..725,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 10,
        span: 726..727,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 12,
        span: 727..729,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 13,
        span: 729..730,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 26,
        column: 16,
        span: 730..733,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 26,
        column: 19,
        span: 734..736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 26,
        column: 21,
        span: 737..738,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 26,
        column: 22,
        span: 738..739,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 26,
        column: 23,
        span: 739..740,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 26,
        column: 24,
        span: 740..741,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 26,
        column: 26,
        span: 742..743,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 26,
        column: 33,
        span: 744..750,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 26,
        column: 34,
        span: 750..751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 26,
        column: 37,
        span: 751..754,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 26,
        column: 38,
        span: 754..755,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 26,
        column: 41,
        span: 755..758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 26,
        column: 42,
        span: 758..759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 26,
        column: 44,
        span: 760..761,
    },
    Token {
        kind: Percent,
        lexeme: Symbol(
            "%",
        ),
        line: 26,
        column: 45,
        span: 761..762,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 47,
        span: 761..764,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 26,
        column: 49,
        span: 765..766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 26,
        column: 51,
        span: 766..768,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 26,
        column: 52,
        span: 768..769,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 26,
        column: 0,
        span: 770..773,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 27,
        column: 4,
        span: 776..777,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 27,
        column: 5,
        span: 777..778,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 27,
        column: 6,
        span: 778..779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 27,
        column: 7,
        span: 779..780,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 27,
        column: 9,
        span: 781..782,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 27,
        column: 11,
        span: 782..784,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 27,
        column: 12,
        span: 784..785,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 27,
        column: 14,
        span: 786..787,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 27,
        column: 18,
        span: 788..791,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 28,
        column: 8,
        span: 815..820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 28,
        column: 13,
        span: 821..825,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 28,
        column: 15,
        span: 826..827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 28,
        column: 21,
        span: 828..833,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 28,
        column: 22,
        span: 833..834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "concat",
        ),
        line: 28,
        column: 28,
        span: 834..840,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 28,
        column: 29,
        span: 840..841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 28,
        column: 30,
        span: 841..842,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 28,
        column: 31,
        span: 842..843,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 28,
        column: 35,
        span: 844..847,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 28,
        column: 36,
        span: 847..848,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 30,
        column: 8,
        span: 882..887,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 30,
        column: 10,
        span: 888..889,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 11,
        span: 889..890,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 30,
        column: 15,
        span: 891..894,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 30,
        column: 17,
        span: 895..896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 30,
        column: 25,
        span: 897..904,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 30,
        column: 26,
        span: 904..905,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 30,
        column: 36,
        span: 905..915,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 30,
        column: 37,
        span: 915..916,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 30,
        column: 43,
        span: 916..922,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 30,
        column: 44,
        span: 922..923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 30,
        column: 49,
        span: 924..928,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 30,
        column: 50,
        span: 928..929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 33,
        column: 9,
        span: 1057..1063,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 33,
        column: 10,
        span: 1063..1064,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 33,
        column: 13,
        span: 1064..1067,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 33,
        column: 15,
        span: 1068..1069,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 33,
        column: 0,
        span: 1070..1073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 34,
        column: 16,
        span: 1083..1089,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 17,
        span: 1089..1090,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 34,
        column: 21,
        span: 1090..1094,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 22,
        span: 1094..1095,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 34,
        column: 25,
        span: 1095..1098,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 26,
        span: 1098..1099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 34,
        column: 33,
        span: 1100..1106,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 34,
        column: 34,
        span: 1106..1107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 34,
        column: 37,
        span: 1107..1110,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 34,
        column: 38,
        span: 1110..1111,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 34,
        column: 44,
        span: 1111..1117,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 34,
        column: 45,
        span: 1117..1118,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 34,
        column: 48,
        span: 1118..1121,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 49,
        span: 1121..1122,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 34,
        column: 50,
        span: 1122..1123,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 34,
        column: 0,
        span: 1124..1127,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 35,
        column: 11,
        span: 1137..1138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 35,
        column: 17,
        span: 1138..1144,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 35,
        column: 18,
        span: 1144..1145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 35,
        column: 22,
        span: 1145..1149,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 35,
        column: 23,
        span: 1149..1150,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 35,
        column: 26,
        span: 1150..1153,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 27,
        span: 1153..1154,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^\\n]\"",
        ),
        line: 35,
        column: 35,
        span: 1155..1162,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 35,
        column: 36,
        span: 1162..1163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 35,
        column: 39,
        span: 1164..1166,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 40,
        span: 1166..1167,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 35,
        column: 43,
        span: 1168..1170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 35,
        column: 47,
        span: 1171..1174,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 35,
        column: 48,
        span: 1174..1175,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 37,
        column: 8,
        span: 1216..1221,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 37,
        column: 13,
        span: 1222..1226,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 37,
        column: 15,
        span: 1227..1228,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 37,
        column: 22,
        span: 1229..1235,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 37,
        column: 23,
        span: 1235..1236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 37,
        column: 26,
        span: 1236..1239,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 37,
        column: 27,
        span: 1239..1240,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 37,
        column: 30,
        span: 1240..1243,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 37,
        column: 31,
        span: 1243..1244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 37,
        column: 35,
        span: 1245..1248,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 37,
        column: 36,
        span: 1248..1249,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 38,
        column: 8,
        span: 1252..1257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 38,
        column: 10,
        span: 1258..1259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 11,
        span: 1259..1260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 38,
        column: 15,
        span: 1261..1264,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 38,
        column: 17,
        span: 1265..1266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 38,
        column: 25,
        span: 1267..1274,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 38,
        column: 26,
        span: 1274..1275,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 38,
        column: 36,
        span: 1275..1285,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 38,
        column: 37,
        span: 1285..1286,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 38,
        column: 43,
        span: 1286..1292,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 38,
        column: 44,
        span: 1292..1293,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 38,
        column: 49,
        span: 1294..1298,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 38,
        column: 50,
        span: 1298..1299,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 39,
        column: 9,
        span: 1302..1308,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 10,
        span: 1308..1309,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 39,
        column: 13,
        span: 1309..1312,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 39,
        column: 15,
        span: 1313..1314,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 39,
        column: 19,
        span: 1315..1318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
        column: 26,
        span: 1319..1325,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 27,
        span: 1325..1326,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 39,
        column: 31,
        span: 1326..1330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 32,
        span: 1330..1331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 39,
        column: 35,
        span: 1331..1334,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 36,
        span: 1334..1335,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 39,
        column: 43,
        span: 1336..1342,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 39,
        column: 44,
        span: 1342..1343,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rep",
        ),
        line: 39,
        column: 47,
        span: 1343..1346,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 39,
        column: 48,
        span: 1346..1347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'xuxu'",
        ),
        line: 39,
        column: 54,
        span: 1347..1353,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 39,
        column: 55,
        span: 1353..1354,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "max",
        ),
        line: 39,
        column: 59,
        span: 1355..1358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 60,
        span: 1358..1359,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 61,
        span: 1359..1360,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 39,
        column: 62,
        span: 1360..1361,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 40,
        column: 0,
        span: 1362..1365,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 42,
        column: 0,
        span: 1367..1369,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 43,
        column: 8,
        span: 1372..1377,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 43,
        column: 16,
        span: 1378..1385,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 43,
        column: 18,
        span: 1386..1387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 43,
        column: 26,
        span: 1388..1395,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 43,
        column: 27,
        span: 1395..1396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 43,
        column: 0,
        span: 1396..1400,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 44,
        column: 10,
        span: 1403..1410,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 44,
        column: 11,
        span: 1410..1411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 44,
        column: 15,
        span: 1411..1415,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 44,
        column: 17,
        span: 1416..1417,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 44,
        column: 19,
        span: 1418..1419,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 44,
        column: 20,
        span: 1419..1420,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 45,
        column: 8,
        span: 1423..1428,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 45,
        column: 10,
        span: 1429..1430,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 11,
        span: 1430..1431,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 45,
        column: 15,
        span: 1432..1435,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 45,
        column: 17,
        span: 1436..1437,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 45,
        column: 23,
        span: 1438..1443,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 45,
        column: 24,
        span: 1443..1444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 45,
        column: 31,
        span: 1444..1451,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 45,
        column: 32,
        span: 1451..1452,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"no-such-file\"",
        ),
        line: 45,
        column: 47,
        span: 1453..1467,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 45,
        column: 48,
        span: 1467..1468,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 46,
        column: 9,
        span: 1471..1477,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 10,
        span: 1477..1478,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 46,
        column: 13,
        span: 1478..1481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "s",
        ),
        line: 46,
        column: 15,
        span: 1482..1483,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 46,
        column: 19,
        span: 1484..1487,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 46,
        column: 26,
        span: 1488..1494,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 46,
        column: 27,
        span: 1494..1495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 46,
        column: 31,
        span: 1495..1499,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 46,
        column: 32,
        span: 1499..1500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 46,
        column: 35,
        span: 1500..1503,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 46,
        column: 36,
        span: 1503..1504,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"package.path\"",
        ),
        line: 46,
        column: 51,
        span: 1505..1519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 52,
        span: 1519..1520,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 46,
        column: 53,
        span: 1520..1521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 47,
        column: 10,
        span: 1524..1531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 47,
        column: 11,
        span: 1531..1532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 47,
        column: 15,
        span: 1532..1536,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 47,
        column: 17,
        span: 1537..1538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 47,
        column: 0,
        span: 1539..1546,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 48,
        column: 0,
        span: 1547..1550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 50,
        column: 6,
        span: 1552..1557,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 50,
        column: 7,
        span: 1557..1558,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 50,
        column: 10,
        span: 1558..1561,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 50,
        column: 11,
        span: 1561..1562,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 56,
        column: 3,
        span: 1649..1651,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 56,
        column: 7,
        span: 1652..1655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_port",
        ),
        line: 56,
        column: 13,
        span: 1656..1661,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 56,
        column: 18,
        span: 1662..1666,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 58,
        column: 6,
        span: 1672..1677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dirsep",
        ),
        line: 58,
        column: 13,
        span: 1678..1684,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 58,
        column: 15,
        span: 1685..1686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 58,
        column: 22,
        span: 1687..1693,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 23,
        span: 1693..1694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "match",
        ),
        line: 58,
        column: 28,
        span: 1694..1699,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 58,
        column: 29,
        span: 1699..1700,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 58,
        column: 36,
        span: 1700..1707,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 58,
        column: 37,
        span: 1707..1708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "config",
        ),
        line: 58,
        column: 43,
        span: 1708..1714,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 58,
        column: 44,
        span: 1714..1715,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"^([^\\n]+)\\n\"",
        ),
        line: 58,
        column: 58,
        span: 1716..1729,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 58,
        column: 59,
        span: 1729..1730,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 61,
        column: 6,
        span: 1790..1795,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 61,
        column: 10,
        span: 1796..1799,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 61,
        column: 12,
        span: 1800..1801,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"libs\"",
        ),
        line: 61,
        column: 19,
        span: 1802..1808,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 61,
        column: 22,
        span: 1809..1811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dirsep",
        ),
        line: 61,
        column: 0,
        span: 1812..1818,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 64,
        column: 6,
        span: 1878..1883,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 64,
        column: 15,
        span: 1884..1892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 64,
        column: 17,
        span: 1893..1894,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 64,
        column: 19,
        span: 1895..1896,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 64,
        column: 20,
        span: 1896..1897,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 64,
        column: 21,
        span: 1897..1898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 65,
        column: 4,
        span: 1901..1902,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 65,
        column: 6,
        span: 1903..1904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 65,
        column: 13,
        span: 1905..1911,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 65,
        column: 14,
        span: 1911..1912,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 65,
        column: 18,
        span: 1912..1916,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 65,
        column: 19,
        span: 1916..1917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 65,
        column: 20,
        span: 1917..1918,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 21,
        span: 1918..1919,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"/\"",
        ),
        line: 65,
        column: 25,
        span: 1920..1923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 65,
        column: 26,
        span: 1923..1924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dirsep",
        ),
        line: 65,
        column: 33,
        span: 1925..1931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 65,
        column: 34,
        span: 1931..1932,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 66,
        column: 9,
        span: 1935..1941,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 66,
        column: 13,
        span: 1942..1945,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 66,
        column: 16,
        span: 1946..1948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 66,
        column: 0,
        span: 1949..1950,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 67,
        column: 0,
        span: 1951..1954,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 70,
        column: 6,
        span: 2017..2022,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 70,
        column: 15,
        span: 2023..2031,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 70,
        column: 18,
        span: 2032..2034,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 70,
        column: 20,
        span: 2035..2036,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 70,
        column: 21,
        span: 2036..2037,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 70,
        column: 22,
        span: 2037..2038,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 71,
        column: 8,
        span: 2041..2046,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 71,
        column: 12,
        span: 2047..2050,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 71,
        column: 14,
        span: 2051..2052,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 71,
        column: 16,
        span: 2053..2054,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dirsep",
        ),
        line: 71,
        column: 22,
        span: 2054..2060,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 71,
        column: 25,
        span: 2061..2063,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\\\'",
        ),
        line: 71,
        column: 30,
        span: 2064..2068,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 71,
        column: 31,
        span: 2068..2069,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 71,
        column: 35,
        span: 2070..2073,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".dll\"",
        ),
        line: 71,
        column: 42,
        span: 2074..2080,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 71,
        column: 45,
        span: 2081..2083,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".so\"",
        ),
        line: 71,
        column: 51,
        span: 2084..2089,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 72,
        column: 9,
        span: 2092..2098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 72,
        column: 11,
        span: 2099..2100,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 72,
        column: 12,
        span: 2100..2101,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 72,
        column: 13,
        span: 2101..2102,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 72,
        column: 16,
        span: 2103..2105,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "ext",
        ),
        line: 72,
        column: 20,
        span: 2106..2109,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 72,
        column: 21,
        span: 2109..2110,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 73,
        column: 0,
        span: 2111..2114,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 76,
        column: 6,
        span: 2117..2122,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 76,
        column: 15,
        span: 2123..2131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        line: 76,
        column: 27,
        span: 2132..2143,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 76,
        column: 29,
        span: 2144..2145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 76,
        column: 34,
        span: 2145..2150,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 35,
        span: 2150..2151,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preextras",
        ),
        line: 76,
        column: 45,
        span: 2152..2161,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 76,
        column: 46,
        span: 2161..2162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "posextras",
        ),
        line: 76,
        column: 56,
        span: 2163..2172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 76,
        column: 57,
        span: 2172..2173,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 77,
        column: 6,
        span: 2176..2179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 77,
        column: 8,
        span: 2180..2181,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 77,
        column: 9,
        span: 2181..2182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 77,
        column: 10,
        span: 2182..2183,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 77,
        column: 13,
        span: 2184..2186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 77,
        column: 19,
        span: 2187..2192,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 77,
        column: 20,
        span: 2192..2193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 77,
        column: 25,
        span: 2193..2198,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 77,
        column: 26,
        span: 2198..2199,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 77,
        column: 0,
        span: 2200..2202,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 78,
        column: 7,
        span: 2207..2209,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 78,
        column: 8,
        span: 2209..2210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 78,
        column: 14,
        span: 2210..2216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 15,
        span: 2216..2217,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 78,
        column: 16,
        span: 2217..2218,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 78,
        column: 17,
        span: 2218..2219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 78,
        column: 18,
        span: 2219..2220,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 19,
        span: 2220..2221,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 78,
        column: 20,
        span: 2221..2222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 79,
        column: 7,
        span: 2227..2229,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 79,
        column: 8,
        span: 2229..2230,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 79,
        column: 13,
        span: 2230..2235,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 14,
        span: 2235..2236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 79,
        column: 20,
        span: 2236..2242,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 79,
        column: 21,
        span: 2242..2243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 79,
        column: 27,
        span: 2243..2249,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 79,
        column: 28,
        span: 2249..2250,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preextras",
        ),
        line: 79,
        column: 37,
        span: 2250..2259,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 79,
        column: 38,
        span: 2259..2260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 79,
        column: 40,
        span: 2261..2262,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 41,
        span: 2262..2263,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 79,
        column: 42,
        span: 2263..2264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 80,
        column: 7,
        span: 2269..2271,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 80,
        column: 8,
        span: 2271..2272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 80,
        column: 13,
        span: 2272..2277,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 80,
        column: 14,
        span: 2277..2278,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 80,
        column: 15,
        span: 2278..2279,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 80,
        column: 16,
        span: 2279..2280,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 81,
        column: 7,
        span: 2285..2287,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 8,
        span: 2287..2288,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "write",
        ),
        line: 81,
        column: 13,
        span: 2288..2293,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 14,
        span: 2293..2294,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 81,
        column: 20,
        span: 2294..2300,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 81,
        column: 21,
        span: 2300..2301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "format",
        ),
        line: 81,
        column: 27,
        span: 2301..2307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 81,
        column: 28,
        span: 2307..2308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "posextras",
        ),
        line: 81,
        column: 37,
        span: 2308..2317,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 81,
        column: 38,
        span: 2317..2318,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 81,
        column: 40,
        span: 2319..2320,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 41,
        span: 2320..2321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 81,
        column: 42,
        span: 2321..2322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 82,
        column: 7,
        span: 2327..2329,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 8,
        span: 2329..2330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "close",
        ),
        line: 82,
        column: 13,
        span: 2330..2335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 14,
        span: 2335..2336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "io",
        ),
        line: 82,
        column: 16,
        span: 2336..2338,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 82,
        column: 17,
        span: 2338..2339,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "output",
        ),
        line: 82,
        column: 23,
        span: 2339..2345,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 82,
        column: 24,
        span: 2345..2346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 25,
        span: 2346..2347,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 82,
        column: 26,
        span: 2347..2348,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 83,
        column: 0,
        span: 2351..2354,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 84,
        column: 0,
        span: 2355..2358,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 86,
        column: 9,
        span: 2360..2368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        line: 86,
        column: 21,
        span: 2369..2380,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 86,
        column: 23,
        span: 2381..2382,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 86,
        column: 28,
        span: 2382..2387,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 86,
        column: 29,
        span: 2387..2388,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 87,
        column: 6,
        span: 2391..2394,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 87,
        column: 8,
        span: 2395..2396,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 87,
        column: 11,
        span: 2397..2399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pairs",
        ),
        line: 87,
        column: 17,
        span: 2400..2405,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 87,
        column: 18,
        span: 2405..2406,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 87,
        column: 23,
        span: 2406..2411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 87,
        column: 24,
        span: 2411..2412,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 87,
        column: 0,
        span: 2413..2415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 88,
        column: 7,
        span: 2420..2422,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 88,
        column: 8,
        span: 2422..2423,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 88,
        column: 14,
        span: 2423..2429,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 15,
        span: 2429..2430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 88,
        column: 16,
        span: 2430..2431,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 88,
        column: 17,
        span: 2431..2432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 88,
        column: 18,
        span: 2432..2433,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 19,
        span: 2433..2434,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 88,
        column: 20,
        span: 2434..2435,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 89,
        column: 0,
        span: 2438..2441,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 90,
        column: 0,
        span: 2442..2445,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 92,
        column: 6,
        span: 2447..2452,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 92,
        column: 12,
        span: 2453..2458,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 92,
        column: 14,
        span: 2459..2460,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 92,
        column: 16,
        span: 2461..2462,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 93,
        column: 4,
        span: 2465..2466,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names.lua\"",
        ),
        line: 93,
        column: 15,
        span: 2466..2477,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 93,
        column: 16,
        span: 2477..2478,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 93,
        column: 18,
        span: 2479..2480,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"do return {...} end\\n\"",
        ),
        line: 93,
        column: 42,
        span: 2481..2504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 93,
        column: 43,
        span: 2504..2505,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 94,
        column: 4,
        span: 2508..2509,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"err.lua\"",
        ),
        line: 94,
        column: 13,
        span: 2509..2518,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 94,
        column: 14,
        span: 2518..2519,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 94,
        column: 16,
        span: 2520..2521,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B = 15; a = a + 1;\"",
        ),
        line: 94,
        column: 37,
        span: 2522..2542,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 94,
        column: 38,
        span: 2542..2543,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 95,
        column: 4,
        span: 2546..2547,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"synerr.lua\"",
        ),
        line: 95,
        column: 16,
        span: 2547..2559,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 95,
        column: 17,
        span: 2559..2560,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 95,
        column: 19,
        span: 2561..2562,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B =\"",
        ),
        line: 95,
        column: 25,
        span: 2563..2568,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 95,
        column: 26,
        span: 2568..2569,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 96,
        column: 4,
        span: 2572..2573,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lua\"",
        ),
        line: 96,
        column: 11,
        span: 2573..2580,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 96,
        column: 12,
        span: 2580..2581,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 96,
        column: 14,
        span: 2582..2583,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 96,
        column: 17,
        span: 2584..2586,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 96,
        column: 18,
        span: 2586..2587,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 97,
        column: 4,
        span: 2590..2591,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B.lua\"",
        ),
        line: 97,
        column: 11,
        span: 2591..2598,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 97,
        column: 12,
        span: 2598..2599,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 97,
        column: 14,
        span: 2600..2601,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"assert(...=='B');require 'A'\"",
        ),
        line: 97,
        column: 45,
        span: 2602..2632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 97,
        column: 46,
        span: 2632..2633,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 98,
        column: 4,
        span: 2636..2637,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lc\"",
        ),
        line: 98,
        column: 10,
        span: 2637..2643,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 98,
        column: 11,
        span: 2643..2644,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 98,
        column: 13,
        span: 2645..2646,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 98,
        column: 16,
        span: 2647..2649,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 98,
        column: 17,
        span: 2649..2650,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 99,
        column: 4,
        span: 2653..2654,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 99,
        column: 7,
        span: 2654..2657,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 99,
        column: 8,
        span: 2657..2658,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 99,
        column: 10,
        span: 2659..2660,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 99,
        column: 13,
        span: 2661..2663,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 99,
        column: 14,
        span: 2663..2664,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 100,
        column: 4,
        span: 2667..2668,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"L\"",
        ),
        line: 100,
        column: 7,
        span: 2668..2671,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 100,
        column: 8,
        span: 2671..2672,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 100,
        column: 10,
        span: 2673..2674,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 100,
        column: 13,
        span: 2675..2677,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 100,
        column: 14,
        span: 2677..2678,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 101,
        column: 4,
        span: 2681..2682,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 101,
        column: 10,
        span: 2682..2688,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 101,
        column: 11,
        span: 2688..2689,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 101,
        column: 13,
        span: 2690..2691,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 101,
        column: 16,
        span: 2692..2694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 101,
        column: 17,
        span: 2694..2695,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 102,
        column: 4,
        span: 2698..2699,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 102,
        column: 11,
        span: 2699..2706,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 102,
        column: 12,
        span: 2706..2707,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 102,
        column: 14,
        span: 2708..2709,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"package.loaded[...] = 25; require'C'\"",
        ),
        line: 102,
        column: 53,
        span: 2710..2748,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 102,
        column: 54,
        span: 2748..2749,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 103,
        column: 2,
        span: 2750..2751,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 105,
        column: 3,
        span: 2753..2755,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 105,
        column: 5,
        span: 2756..2757,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 105,
        column: 0,
        span: 2758..2761,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 106,
        column: 6,
        span: 2762..2767,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extras",
        ),
        line: 106,
        column: 13,
        span: 2768..2774,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 106,
        column: 15,
        span: 2775..2776,
    },
    Token {
        kind: MultilineString,
        lexeme: Symbol(
            "[[\nNAME = '%s'\nREQUIRED = ...\nreturn AA]]",
        ),
        line: 109,
        column: 12,
        span: 2777..2818,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        line: 111,
        column: 12,
        span: 2820..2831,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 111,
        column: 13,
        span: 2831..2832,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 111,
        column: 18,
        span: 2832..2837,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 19,
        span: 2837..2838,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 111,
        column: 22,
        span: 2839..2841,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 111,
        column: 23,
        span: 2841..2842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "extras",
        ),
        line: 111,
        column: 30,
        span: 2843..2849,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 111,
        column: 31,
        span: 2849..2850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 114,
        column: 7,
        span: 2904..2910,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 8,
        span: 2910..2911,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 114,
        column: 15,
        span: 2911..2918,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 114,
        column: 16,
        span: 2918..2919,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 114,
        column: 26,
        span: 2919..2929,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 114,
        column: 27,
        span: 2929..2930,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 114,
        column: 34,
        span: 2930..2937,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 35,
        span: 2937..2938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 114,
        column: 37,
        span: 2939..2940,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 114,
        column: 40,
        span: 2940..2943,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 41,
        span: 2943..2944,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 114,
        column: 44,
        span: 2945..2947,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 114,
        column: 45,
        span: 2947..2948,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 114,
        column: 48,
        span: 2949..2951,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 49,
        span: 2951..2952,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 114,
        column: 52,
        span: 2953..2955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 114,
        column: 54,
        span: 2956..2957,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 114,
        column: 61,
        span: 2957..2964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 114,
        column: 62,
        span: 2964..2965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 115,
        column: 7,
        span: 2966..2972,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 8,
        span: 2972..2973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 115,
        column: 15,
        span: 2973..2980,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 115,
        column: 16,
        span: 2980..2981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 115,
        column: 26,
        span: 2981..2991,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 115,
        column: 27,
        span: 2991..2992,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 115,
        column: 34,
        span: 2992..2999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 35,
        span: 2999..3000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 115,
        column: 37,
        span: 3001..3002,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 115,
        column: 40,
        span: 3002..3005,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 41,
        span: 3005..3006,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 115,
        column: 45,
        span: 3007..3010,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 115,
        column: 46,
        span: 3010..3011,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\"",
        ),
        line: 115,
        column: 50,
        span: 3012..3015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 51,
        span: 3015..3016,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 115,
        column: 54,
        span: 3017..3019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 115,
        column: 56,
        span: 3020..3021,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 115,
        column: 63,
        span: 3021..3028,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 115,
        column: 64,
        span: 3028..3029,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 116,
        column: 7,
        span: 3030..3036,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 8,
        span: 3036..3037,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 116,
        column: 15,
        span: 3037..3044,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 116,
        column: 16,
        span: 3044..3045,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 116,
        column: 26,
        span: 3045..3055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 116,
        column: 27,
        span: 3055..3056,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"--x-\"",
        ),
        line: 116,
        column: 33,
        span: 3056..3062,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 34,
        span: 3062..3063,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 116,
        column: 36,
        span: 3064..3065,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 116,
        column: 39,
        span: 3065..3068,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 40,
        span: 3068..3069,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"-\"",
        ),
        line: 116,
        column: 44,
        span: 3070..3073,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 116,
        column: 45,
        span: 3073..3074,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 116,
        column: 49,
        span: 3075..3078,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 50,
        span: 3078..3079,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 116,
        column: 53,
        span: 3080..3082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 116,
        column: 55,
        span: 3083..3084,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 116,
        column: 61,
        span: 3084..3090,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 116,
        column: 62,
        span: 3090..3091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 117,
        column: 7,
        span: 3092..3098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 8,
        span: 3098..3099,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 117,
        column: 15,
        span: 3099..3106,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 117,
        column: 16,
        span: 3106..3107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 117,
        column: 26,
        span: 3107..3117,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 117,
        column: 27,
        span: 3117..3118,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"---xX\"",
        ),
        line: 117,
        column: 34,
        span: 3118..3125,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 35,
        span: 3125..3126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 117,
        column: 37,
        span: 3127..3128,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 117,
        column: 40,
        span: 3128..3131,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 41,
        span: 3131..3132,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"---\"",
        ),
        line: 117,
        column: 47,
        span: 3133..3138,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 117,
        column: 48,
        span: 3138..3139,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XX\"",
        ),
        line: 117,
        column: 53,
        span: 3140..3144,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 54,
        span: 3144..3145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 117,
        column: 57,
        span: 3146..3148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 117,
        column: 59,
        span: 3149..3150,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 117,
        column: 65,
        span: 3150..3156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 117,
        column: 66,
        span: 3156..3157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 118,
        column: 7,
        span: 3158..3164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 8,
        span: 3164..3165,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 118,
        column: 15,
        span: 3165..3172,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 118,
        column: 16,
        span: 3172..3173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 118,
        column: 26,
        span: 3173..3183,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 118,
        column: 27,
        span: 3183..3184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 118,
        column: 28,
        span: 3184..3185,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 118,
        column: 35,
        span: 3185..3192,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 36,
        span: 3192..3193,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 118,
        column: 40,
        span: 3194..3197,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 118,
        column: 41,
        span: 3197..3198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "dirsep",
        ),
        line: 118,
        column: 48,
        span: 3199..3205,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 49,
        span: 3205..3206,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 118,
        column: 52,
        span: 3207..3209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 118,
        column: 54,
        span: 3210..3211,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 118,
        column: 61,
        span: 3211..3218,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 118,
        column: 62,
        span: 3218..3219,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 119,
        column: 7,
        span: 3220..3226,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 8,
        span: 3226..3227,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 119,
        column: 15,
        span: 3227..3234,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 119,
        column: 16,
        span: 3234..3235,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 119,
        column: 26,
        span: 3235..3245,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 119,
        column: 27,
        span: 3245..3246,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\".\\\\C.lua\"",
        ),
        line: 119,
        column: 37,
        span: 3246..3256,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 38,
        span: 3256..3257,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 119,
        column: 40,
        span: 3258..3259,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 119,
        column: 43,
        span: 3259..3262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 119,
        column: 44,
        span: 3262..3263,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\\\\"",
        ),
        line: 119,
        column: 49,
        span: 3264..3268,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 50,
        span: 3268..3269,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 119,
        column: 53,
        span: 3270..3272,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 119,
        column: 55,
        span: 3273..3274,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"./C.lua\"",
        ),
        line: 119,
        column: 64,
        span: 3274..3283,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 119,
        column: 65,
        span: 3283..3284,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 121,
        column: 6,
        span: 3286..3291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 121,
        column: 14,
        span: 3292..3299,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 121,
        column: 16,
        span: 3300..3301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 121,
        column: 24,
        span: 3302..3309,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 121,
        column: 25,
        span: 3309..3310,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 121,
        column: 0,
        span: 3310..3314,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 123,
        column: 8,
        span: 3316..3323,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 9,
        span: 3323..3324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 123,
        column: 13,
        span: 3324..3328,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 123,
        column: 15,
        span: 3329..3330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 123,
        column: 22,
        span: 3331..3337,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 123,
        column: 23,
        span: 3337..3338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 123,
        column: 27,
        span: 3338..3342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 123,
        column: 28,
        span: 3342..3343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/?.lua;D/?.lc;D/?;D/??x?;D/L\"",
        ),
        line: 123,
        column: 59,
        span: 3343..3374,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 60,
        span: 3374..3375,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/\"",
        ),
        line: 123,
        column: 65,
        span: 3376..3380,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 123,
        column: 66,
        span: 3380..3381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 123,
        column: 70,
        span: 3382..3385,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 123,
        column: 71,
        span: 3385..3386,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 125,
        column: 6,
        span: 3388..3393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 125,
        column: 10,
        span: 3394..3397,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 125,
        column: 12,
        span: 3398..3399,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 125,
        column: 21,
        span: 3400..3408,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 125,
        column: 23,
        span: 3409..3410,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 125,
        column: 24,
        span: 3410..3411,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 25,
        span: 3411..3412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 125,
        column: 27,
        span: 3413..3414,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 125,
        column: 28,
        span: 3414..3415,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 125,
        column: 30,
        span: 3416..3417,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 125,
        column: 31,
        span: 3417..3418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NAME",
        ),
        line: 126,
        column: 7,
        span: 3421..3425,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 126,
        column: 9,
        span: 3426..3427,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 126,
        column: 0,
        span: 3428..3431,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 127,
        column: 8,
        span: 3434..3439,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rr",
        ),
        line: 127,
        column: 11,
        span: 3440..3442,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 127,
        column: 13,
        span: 3443..3444,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 127,
        column: 21,
        span: 3445..3452,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 127,
        column: 22,
        span: 3452..3453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 127,
        column: 23,
        span: 3453..3454,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 127,
        column: 24,
        span: 3454..3455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 128,
        column: 9,
        span: 3458..3464,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 128,
        column: 10,
        span: 3464..3465,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "NAME",
        ),
        line: 128,
        column: 14,
        span: 3465..3469,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 128,
        column: 17,
        span: 3470..3472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 128,
        column: 19,
        span: 3473..3474,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 128,
        column: 20,
        span: 3474..3475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 129,
        column: 9,
        span: 3478..3484,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 129,
        column: 10,
        span: 3484..3485,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "REQUIRED",
        ),
        line: 129,
        column: 18,
        span: 3485..3493,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 129,
        column: 21,
        span: 3494..3496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 129,
        column: 23,
        span: 3497..3498,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 129,
        column: 24,
        span: 3498..3499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 130,
        column: 9,
        span: 3502..3508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 130,
        column: 10,
        span: 3508..3509,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rr",
        ),
        line: 130,
        column: 12,
        span: 3509..3511,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 130,
        column: 15,
        span: 3512..3514,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "r",
        ),
        line: 130,
        column: 17,
        span: 3515..3516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 130,
        column: 18,
        span: 3516..3517,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 131,
        column: 0,
        span: 3518..3521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 133,
        column: 2,
        span: 3523..3524,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 133,
        column: 4,
        span: 3525..3526,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 133,
        column: 12,
        span: 3527..3534,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names\"",
        ),
        line: 133,
        column: 19,
        span: 3534..3541,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 134,
        column: 7,
        span: 3542..3548,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 134,
        column: 8,
        span: 3548..3549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
        column: 9,
        span: 3549..3550,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 134,
        column: 10,
        span: 3550..3551,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 11,
        span: 3550..3552,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 134,
        column: 12,
        span: 3552..3553,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 15,
        span: 3554..3556,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names\"",
        ),
        line: 134,
        column: 23,
        span: 3557..3564,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 134,
        column: 27,
        span: 3565..3568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 134,
        column: 29,
        span: 3569..3570,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 134,
        column: 30,
        span: 3570..3571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 134,
        column: 31,
        span: 3570..3572,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 134,
        column: 32,
        span: 3572..3573,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 134,
        column: 35,
        span: 3574..3576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 134,
        column: 37,
        span: 3577..3578,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"names.lua\"",
        ),
        line: 134,
        column: 48,
        span: 3578..3589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 134,
        column: 49,
        span: 3589..3590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 136,
        column: 3,
        span: 3592..3594,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 136,
        column: 4,
        span: 3594..3595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 136,
        column: 5,
        span: 3595..3596,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 136,
        column: 7,
        span: 3597..3598,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 136,
        column: 0,
        span: 3599..3602,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 137,
        column: 6,
        span: 3603..3608,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 137,
        column: 9,
        span: 3609..3611,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 10,
        span: 3611..3612,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 137,
        column: 14,
        span: 3613..3616,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 137,
        column: 16,
        span: 3617..3618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 137,
        column: 22,
        span: 3619..3624,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 137,
        column: 23,
        span: 3624..3625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 137,
        column: 30,
        span: 3625..3632,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 137,
        column: 31,
        span: 3632..3633,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"err\"",
        ),
        line: 137,
        column: 37,
        span: 3634..3639,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 137,
        column: 38,
        span: 3639..3640,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 138,
        column: 7,
        span: 3641..3647,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 8,
        span: 3647..3648,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 138,
        column: 11,
        span: 3648..3651,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 138,
        column: 14,
        span: 3652..3654,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 138,
        column: 18,
        span: 3655..3658,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 138,
        column: 25,
        span: 3659..3665,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 138,
        column: 26,
        span: 3665..3666,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 138,
        column: 30,
        span: 3666..3670,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 138,
        column: 31,
        span: 3670..3671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 138,
        column: 34,
        span: 3671..3674,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 138,
        column: 35,
        span: 3674..3675,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"arithmetic\"",
        ),
        line: 138,
        column: 48,
        span: 3676..3688,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 49,
        span: 3688..3689,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 138,
        column: 53,
        span: 3690..3693,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 138,
        column: 55,
        span: 3694..3695,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 138,
        column: 58,
        span: 3696..3698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 138,
        column: 61,
        span: 3698..3701,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 138,
        column: 62,
        span: 3701..3702,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 139,
        column: 3,
        span: 3703..3705,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 4,
        span: 3705..3706,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 139,
        column: 8,
        span: 3707..3710,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 139,
        column: 10,
        span: 3711..3712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 139,
        column: 16,
        span: 3713..3718,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 139,
        column: 17,
        span: 3718..3719,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 139,
        column: 24,
        span: 3719..3726,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 139,
        column: 25,
        span: 3726..3727,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"synerr\"",
        ),
        line: 139,
        column: 34,
        span: 3728..3736,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 139,
        column: 35,
        span: 3736..3737,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 140,
        column: 7,
        span: 3738..3744,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 8,
        span: 3744..3745,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 140,
        column: 11,
        span: 3745..3748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 140,
        column: 14,
        span: 3749..3751,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 140,
        column: 18,
        span: 3752..3755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 140,
        column: 25,
        span: 3756..3762,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 140,
        column: 26,
        span: 3762..3763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 140,
        column: 30,
        span: 3763..3767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 140,
        column: 31,
        span: 3767..3768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 140,
        column: 34,
        span: 3768..3771,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 140,
        column: 35,
        span: 3771..3772,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"error loading module\"",
        ),
        line: 140,
        column: 58,
        span: 3773..3795,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 59,
        span: 3795..3796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 140,
        column: 60,
        span: 3796..3797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 142,
        column: 7,
        span: 3799..3805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 8,
        span: 3805..3806,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 142,
        column: 15,
        span: 3806..3813,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
        column: 16,
        span: 3813..3814,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 142,
        column: 26,
        span: 3814..3824,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 142,
        column: 27,
        span: 3824..3825,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 142,
        column: 30,
        span: 3825..3828,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 142,
        column: 31,
        span: 3828..3829,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 142,
        column: 39,
        span: 3830..3837,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 142,
        column: 40,
        span: 3837..3838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 142,
        column: 44,
        span: 3838..3842,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 45,
        span: 3842..3843,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 142,
        column: 48,
        span: 3844..3846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 142,
        column: 50,
        span: 3847..3848,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C.lua\"",
        ),
        line: 142,
        column: 57,
        span: 3848..3855,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 142,
        column: 58,
        span: 3855..3856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 143,
        column: 7,
        span: 3857..3863,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 143,
        column: 8,
        span: 3863..3864,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 143,
        column: 15,
        span: 3864..3871,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 143,
        column: 18,
        span: 3871..3874,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 143,
        column: 21,
        span: 3875..3877,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 143,
        column: 24,
        span: 3877..3880,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 143,
        column: 25,
        span: 3880..3881,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 144,
        column: 7,
        span: 3882..3888,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 144,
        column: 8,
        span: 3888..3889,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 144,
        column: 15,
        span: 3889..3896,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 144,
        column: 18,
        span: 3896..3899,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 144,
        column: 21,
        span: 3900..3902,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 144,
        column: 24,
        span: 3902..3905,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 144,
        column: 25,
        span: 3905..3906,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 145,
        column: 3,
        span: 3907..3909,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 145,
        column: 5,
        span: 3910..3911,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 145,
        column: 0,
        span: 3912..3915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 146,
        column: 4,
        span: 3916..3919,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 146,
        column: 5,
        span: 3919..3920,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        line: 146,
        column: 8,
        span: 3920..3923,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 9,
        span: 3923..3924,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B.lua'",
        ),
        line: 146,
        column: 17,
        span: 3925..3932,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 146,
        column: 18,
        span: 3932..3933,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 146,
        column: 23,
        span: 3934..3938,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 146,
        column: 24,
        span: 3938..3939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 147,
        column: 7,
        span: 3940..3946,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 147,
        column: 8,
        span: 3946..3947,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 147,
        column: 15,
        span: 3947..3954,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 147,
        column: 16,
        span: 3954..3955,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 147,
        column: 22,
        span: 3955..3961,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 147,
        column: 23,
        span: 3961..3962,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "B",
        ),
        line: 147,
        column: 24,
        span: 3962..3963,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 147,
        column: 25,
        span: 3963..3964,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 148,
        column: 7,
        span: 3965..3971,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 148,
        column: 8,
        span: 3971..3972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 148,
        column: 15,
        span: 3972..3979,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"B\"",
        ),
        line: 148,
        column: 18,
        span: 3979..3982,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 148,
        column: 21,
        span: 3983..3985,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 148,
        column: 26,
        span: 3986..3990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 148,
        column: 27,
        span: 3990..3991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 149,
        column: 7,
        span: 3992..3998,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 149,
        column: 8,
        span: 3998..3999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 149,
        column: 15,
        span: 3999..4006,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 149,
        column: 16,
        span: 4006..4007,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 149,
        column: 22,
        span: 4007..4013,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 149,
        column: 23,
        span: 4013..4014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 149,
        column: 24,
        span: 4014..4015,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 149,
        column: 25,
        span: 4015..4016,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 150,
        column: 7,
        span: 4017..4023,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 150,
        column: 8,
        span: 4023..4024,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 150,
        column: 15,
        span: 4024..4031,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"C\"",
        ),
        line: 150,
        column: 18,
        span: 4031..4034,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 150,
        column: 21,
        span: 4035..4037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 150,
        column: 24,
        span: 4037..4040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 150,
        column: 25,
        span: 4040..4041,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 151,
        column: 8,
        span: 4042..4049,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 9,
        span: 4049..4050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 151,
        column: 15,
        span: 4050..4056,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 151,
        column: 16,
        span: 4056..4057,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 151,
        column: 17,
        span: 4057..4058,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 151,
        column: 19,
        span: 4059..4060,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 151,
        column: 0,
        span: 4061..4064,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 152,
        column: 4,
        span: 4065..4068,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 152,
        column: 5,
        span: 4068..4069,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'B'",
        ),
        line: 152,
        column: 8,
        span: 4069..4072,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 9,
        span: 4072..4073,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 152,
        column: 13,
        span: 4074..4077,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 152,
        column: 14,
        span: 4077..4078,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 152,
        column: 19,
        span: 4079..4083,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 152,
        column: 20,
        span: 4083..4084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 153,
        column: 4,
        span: 4116..4119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 153,
        column: 5,
        span: 4119..4120,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A'",
        ),
        line: 153,
        column: 8,
        span: 4120..4123,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 9,
        span: 4123..4124,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lua'",
        ),
        line: 153,
        column: 17,
        span: 4125..4132,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 153,
        column: 18,
        span: 4132..4133,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 153,
        column: 23,
        span: 4134..4138,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 153,
        column: 24,
        span: 4138..4139,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 154,
        column: 8,
        span: 4140..4147,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 9,
        span: 4147..4148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loaded",
        ),
        line: 154,
        column: 15,
        span: 4148..4154,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 154,
        column: 16,
        span: 4154..4155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 154,
        column: 17,
        span: 4155..4156,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 154,
        column: 19,
        span: 4157..4158,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 154,
        column: 0,
        span: 4159..4162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "os",
        ),
        line: 155,
        column: 3,
        span: 4163..4165,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 155,
        column: 4,
        span: 4165..4166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "remove",
        ),
        line: 155,
        column: 10,
        span: 4166..4172,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 155,
        column: 11,
        span: 4172..4173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 155,
        column: 12,
        span: 4173..4174,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lua'",
        ),
        line: 155,
        column: 19,
        span: 4174..4181,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 155,
        column: 20,
        span: 4181..4182,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 156,
        column: 3,
        span: 4183..4185,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 156,
        column: 5,
        span: 4186..4187,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 156,
        column: 7,
        span: 4188..4189,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 156,
        column: 8,
        span: 4189..4190,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 157,
        column: 4,
        span: 4191..4194,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 157,
        column: 5,
        span: 4194..4195,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A'",
        ),
        line: 157,
        column: 8,
        span: 4195..4198,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 9,
        span: 4198..4199,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'A.lc'",
        ),
        line: 157,
        column: 16,
        span: 4200..4206,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 157,
        column: 17,
        span: 4206..4207,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 157,
        column: 20,
        span: 4208..4210,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 157,
        column: 21,
        span: 4210..4211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 158,
        column: 7,
        span: 4244..4250,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 8,
        span: 4250..4251,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 158,
        column: 15,
        span: 4251..4258,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 16,
        span: 4258..4259,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 158,
        column: 26,
        span: 4259..4269,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 158,
        column: 27,
        span: 4269..4270,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 158,
        column: 30,
        span: 4270..4273,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 158,
        column: 31,
        span: 4273..4274,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 158,
        column: 39,
        span: 4275..4282,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 158,
        column: 40,
        span: 4282..4283,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 158,
        column: 44,
        span: 4283..4287,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 45,
        span: 4287..4288,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 158,
        column: 48,
        span: 4289..4291,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 158,
        column: 50,
        span: 4292..4293,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A.lc\"",
        ),
        line: 158,
        column: 56,
        span: 4293..4299,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 158,
        column: 57,
        span: 4299..4300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 159,
        column: 7,
        span: 4301..4307,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 8,
        span: 4307..4308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 159,
        column: 15,
        span: 4308..4315,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 159,
        column: 16,
        span: 4315..4316,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"A\"",
        ),
        line: 159,
        column: 19,
        span: 4316..4319,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 20,
        span: 4319..4320,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 159,
        column: 23,
        span: 4321..4323,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 159,
        column: 26,
        span: 4324..4326,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 159,
        column: 27,
        span: 4326..4327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 160,
        column: 3,
        span: 4328..4330,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 160,
        column: 5,
        span: 4331..4332,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 160,
        column: 0,
        span: 4333..4338,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 161,
        column: 4,
        span: 4339..4342,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 161,
        column: 5,
        span: 4342..4343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'K'",
        ),
        line: 161,
        column: 8,
        span: 4343..4346,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 9,
        span: 4346..4347,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'L'",
        ),
        line: 161,
        column: 13,
        span: 4348..4351,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 161,
        column: 14,
        span: 4351..4352,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 161,
        column: 20,
        span: 4353..4358,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 161,
        column: 21,
        span: 4358..4359,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 162,
        column: 4,
        span: 4382..4385,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 162,
        column: 5,
        span: 4385..4386,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'K'",
        ),
        line: 162,
        column: 8,
        span: 4386..4389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 9,
        span: 4389..4390,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'L'",
        ),
        line: 162,
        column: 13,
        span: 4391..4394,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 162,
        column: 14,
        span: 4394..4395,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 162,
        column: 20,
        span: 4396..4401,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 162,
        column: 21,
        span: 4401..4402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 163,
        column: 7,
        span: 4444..4450,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 8,
        span: 4450..4451,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "rawget",
        ),
        line: 163,
        column: 14,
        span: 4451..4457,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 163,
        column: 15,
        span: 4457..4458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 163,
        column: 17,
        span: 4458..4460,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 163,
        column: 18,
        span: 4460..4461,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_REQUIREDNAME\"",
        ),
        line: 163,
        column: 34,
        span: 4462..4477,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 35,
        span: 4477..4478,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 163,
        column: 38,
        span: 4479..4481,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 163,
        column: 42,
        span: 4482..4485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 163,
        column: 43,
        span: 4485..4486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 165,
        column: 3,
        span: 4488..4490,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 165,
        column: 5,
        span: 4491..4492,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 165,
        column: 9,
        span: 4493..4496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "try",
        ),
        line: 166,
        column: 4,
        span: 4497..4500,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 166,
        column: 5,
        span: 4500..4501,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"X\"",
        ),
        line: 166,
        column: 8,
        span: 4501..4504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 9,
        span: 4504..4505,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"XXxX\"",
        ),
        line: 166,
        column: 16,
        span: 4506..4512,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 166,
        column: 17,
        span: 4512..4513,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 166,
        column: 20,
        span: 4514..4516,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 166,
        column: 21,
        span: 4516..4517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        line: 169,
        column: 12,
        span: 4520..4531,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 169,
        column: 13,
        span: 4531..4532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 169,
        column: 18,
        span: 4532..4537,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 169,
        column: 19,
        span: 4537..4538,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 174,
        column: 6,
        span: 4577..4582,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 174,
        column: 9,
        span: 4583..4585,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 174,
        column: 11,
        span: 4586..4587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 174,
        column: 0,
        span: 4588..4590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 176,
        column: 8,
        span: 4592..4599,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 9,
        span: 4599..4600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 176,
        column: 13,
        span: 4600..4604,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 176,
        column: 15,
        span: 4605..4606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 176,
        column: 22,
        span: 4607..4613,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 176,
        column: 23,
        span: 4613..4614,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 176,
        column: 27,
        span: 4614..4618,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 176,
        column: 28,
        span: 4618..4619,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/?.lua;D/?/init.lua\"",
        ),
        line: 176,
        column: 50,
        span: 4619..4641,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 51,
        span: 4641..4642,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"D/\"",
        ),
        line: 176,
        column: 56,
        span: 4643..4647,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 176,
        column: 57,
        span: 4647..4648,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DIR",
        ),
        line: 176,
        column: 61,
        span: 4649..4652,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 176,
        column: 62,
        span: 4652..4653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 178,
        column: 6,
        span: 4655..4660,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 178,
        column: 8,
        span: 4661..4662,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 178,
        column: 10,
        span: 4663..4664,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 179,
        column: 4,
        span: 4667..4668,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/init.lua\"",
        ),
        line: 179,
        column: 17,
        span: 4668..4681,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 179,
        column: 18,
        span: 4681..4682,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 179,
        column: 20,
        span: 4683..4684,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA = 10\"",
        ),
        line: 179,
        column: 30,
        span: 4685..4694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 179,
        column: 31,
        span: 4694..4695,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 180,
        column: 4,
        span: 4698..4699,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/xuxu.lua\"",
        ),
        line: 180,
        column: 17,
        span: 4699..4712,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 180,
        column: 18,
        span: 4712..4713,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 180,
        column: 20,
        span: 4714..4715,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"AA = 20\"",
        ),
        line: 180,
        column: 30,
        span: 4716..4725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 180,
        column: 31,
        span: 4725..4726,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 181,
        column: 2,
        span: 4727..4728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "createfiles",
        ),
        line: 183,
        column: 12,
        span: 4730..4741,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 183,
        column: 13,
        span: 4741..4742,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 183,
        column: 18,
        span: 4742..4747,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 19,
        span: 4747..4748,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"_ENV = {}\\n\"",
        ),
        line: 183,
        column: 33,
        span: 4749..4762,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 183,
        column: 34,
        span: 4762..4763,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\\nreturn _ENV\\n\"",
        ),
        line: 183,
        column: 52,
        span: 4764..4781,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 183,
        column: 53,
        span: 4781..4782,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 184,
        column: 3,
        span: 4783..4785,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 184,
        column: 5,
        span: 4786..4787,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 184,
        column: 0,
        span: 4787..4789,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 186,
        column: 6,
        span: 4791..4796,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 186,
        column: 8,
        span: 4797..4798,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 186,
        column: 10,
        span: 4799..4800,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 186,
        column: 17,
        span: 4801..4807,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 186,
        column: 18,
        span: 4807..4808,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 186,
        column: 25,
        span: 4808..4815,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 186,
        column: 29,
        span: 4815..4819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 186,
        column: 30,
        span: 4819..4820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 187,
        column: 7,
        span: 4821..4827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 187,
        column: 8,
        span: 4827..4828,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 187,
        column: 10,
        span: 4828..4830,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 13,
        span: 4831..4833,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 15,
        span: 4833..4835,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 187,
        column: 19,
        span: 4836..4839,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 187,
        column: 21,
        span: 4840..4841,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 187,
        column: 22,
        span: 4841..4842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 187,
        column: 24,
        span: 4842..4844,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 187,
        column: 27,
        span: 4845..4847,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 187,
        column: 30,
        span: 4847..4850,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 187,
        column: 31,
        span: 4850..4851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 188,
        column: 7,
        span: 4852..4858,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 188,
        column: 8,
        span: 4858..4859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 188,
        column: 15,
        span: 4859..4866,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 188,
        column: 19,
        span: 4866..4870,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 188,
        column: 22,
        span: 4871..4873,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 188,
        column: 24,
        span: 4874..4875,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 188,
        column: 25,
        span: 4875..4876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 189,
        column: 7,
        span: 4877..4883,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 189,
        column: 8,
        span: 4883..4884,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 189,
        column: 15,
        span: 4884..4891,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 189,
        column: 19,
        span: 4891..4895,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 189,
        column: 22,
        span: 4896..4898,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 189,
        column: 24,
        span: 4899..4900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 189,
        column: 25,
        span: 4900..4901,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 191,
        column: 7,
        span: 4903..4909,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 8,
        span: 4909..4910,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 191,
        column: 15,
        span: 4910..4917,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 16,
        span: 4917..4918,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchpath",
        ),
        line: 191,
        column: 26,
        span: 4918..4928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 191,
        column: 27,
        span: 4928..4929,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 191,
        column: 36,
        span: 4929..4938,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 191,
        column: 37,
        span: 4938..4939,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 191,
        column: 45,
        span: 4940..4947,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 191,
        column: 46,
        span: 4947..4948,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 191,
        column: 50,
        span: 4948..4952,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 51,
        span: 4952..4953,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 191,
        column: 54,
        span: 4954..4956,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "D",
        ),
        line: 191,
        column: 56,
        span: 4957..4958,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1/xuxu.lua\"",
        ),
        line: 191,
        column: 69,
        span: 4958..4971,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 191,
        column: 70,
        span: 4971..4972,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 192,
        column: 2,
        span: 4973..4974,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 192,
        column: 3,
        span: 4974..4975,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 192,
        column: 7,
        span: 4975..4979,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 192,
        column: 9,
        span: 4980..4981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 192,
        column: 16,
        span: 4982..4988,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 192,
        column: 17,
        span: 4988..4989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 192,
        column: 24,
        span: 4989..4996,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 192,
        column: 33,
        span: 4996..5005,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 192,
        column: 34,
        span: 5005..5006,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 193,
        column: 7,
        span: 5007..5013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 193,
        column: 8,
        span: 5013..5014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 193,
        column: 10,
        span: 5014..5016,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 13,
        span: 5017..5019,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 15,
        span: 5019..5021,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 193,
        column: 19,
        span: 5022..5025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 193,
        column: 21,
        span: 5026..5027,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 193,
        column: 22,
        span: 5027..5028,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 193,
        column: 26,
        span: 5028..5032,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 193,
        column: 27,
        span: 5032..5033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 193,
        column: 29,
        span: 5033..5035,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 193,
        column: 32,
        span: 5036..5038,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 193,
        column: 35,
        span: 5038..5041,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 193,
        column: 36,
        span: 5041..5042,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 194,
        column: 7,
        span: 5043..5049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 194,
        column: 8,
        span: 5049..5050,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 194,
        column: 15,
        span: 5050..5057,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 194,
        column: 24,
        span: 5057..5066,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 194,
        column: 27,
        span: 5067..5069,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 194,
        column: 29,
        span: 5070..5071,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 194,
        column: 30,
        span: 5071..5072,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 194,
        column: 34,
        span: 5072..5076,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 194,
        column: 35,
        span: 5076..5077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 195,
        column: 7,
        span: 5078..5084,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 195,
        column: 8,
        span: 5084..5085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 195,
        column: 15,
        span: 5085..5092,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1.xuxu\"",
        ),
        line: 195,
        column: 24,
        span: 5092..5101,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 195,
        column: 27,
        span: 5102..5104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 195,
        column: 29,
        span: 5105..5106,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 195,
        column: 30,
        span: 5106..5107,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 195,
        column: 34,
        span: 5107..5111,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 195,
        column: 35,
        span: 5111..5112,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 196,
        column: 7,
        span: 5113..5119,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 196,
        column: 8,
        span: 5119..5120,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 196,
        column: 15,
        span: 5120..5127,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"P1\"",
        ),
        line: 196,
        column: 19,
        span: 5127..5131,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 22,
        span: 5132..5134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 196,
        column: 24,
        span: 5135..5136,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 196,
        column: 28,
        span: 5137..5140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 196,
        column: 30,
        span: 5141..5142,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 196,
        column: 31,
        span: 5142..5143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "AA",
        ),
        line: 196,
        column: 33,
        span: 5143..5145,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 196,
        column: 36,
        span: 5146..5148,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 196,
        column: 39,
        span: 5148..5151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 196,
        column: 40,
        span: 5151..5152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "removefiles",
        ),
        line: 199,
        column: 12,
        span: 5155..5166,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 199,
        column: 13,
        span: 5166..5167,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "files",
        ),
        line: 199,
        column: 18,
        span: 5167..5172,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 199,
        column: 19,
        span: 5172..5173,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 202,
        column: 8,
        span: 5176..5183,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 202,
        column: 9,
        span: 5183..5184,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 202,
        column: 13,
        span: 5184..5188,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 202,
        column: 15,
        span: 5189..5190,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 202,
        column: 18,
        span: 5191..5193,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 203,
        column: 7,
        span: 5194..5200,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 8,
        span: 5200..5201,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 203,
        column: 11,
        span: 5201..5204,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 203,
        column: 17,
        span: 5205..5210,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 203,
        column: 18,
        span: 5210..5211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 203,
        column: 25,
        span: 5211..5218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 203,
        column: 26,
        span: 5218..5219,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist\"",
        ),
        line: 203,
        column: 48,
        span: 5220..5241,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 49,
        span: 5241..5242,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 203,
        column: 50,
        span: 5242..5243,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 204,
        column: 8,
        span: 5244..5251,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 204,
        column: 9,
        span: 5251..5252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 204,
        column: 13,
        span: 5252..5256,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 204,
        column: 15,
        span: 5257..5258,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"??\\0?\"",
        ),
        line: 204,
        column: 23,
        span: 5259..5266,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 205,
        column: 7,
        span: 5267..5273,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 8,
        span: 5273..5274,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 205,
        column: 11,
        span: 5274..5277,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 205,
        column: 17,
        span: 5278..5283,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 205,
        column: 18,
        span: 5283..5284,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 205,
        column: 25,
        span: 5284..5291,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 205,
        column: 26,
        span: 5291..5292,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist1\"",
        ),
        line: 205,
        column: 49,
        span: 5293..5315,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 50,
        span: 5315..5316,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 205,
        column: 51,
        span: 5316..5317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 207,
        column: 8,
        span: 5319..5326,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 207,
        column: 9,
        span: 5326..5327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 207,
        column: 13,
        span: 5327..5331,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 207,
        column: 15,
        span: 5332..5333,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "oldpath",
        ),
        line: 207,
        column: 0,
        span: 5334..5341,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 210,
        column: 6,
        span: 5376..5381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 210,
        column: 12,
        span: 5382..5387,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 210,
        column: 14,
        span: 5388..5389,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"file_does_not_exist2\"",
        ),
        line: 210,
        column: 37,
        span: 5390..5412,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 211,
        column: 6,
        span: 5413..5418,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 211,
        column: 8,
        span: 5419..5420,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 211,
        column: 9,
        span: 5420..5421,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 211,
        column: 13,
        span: 5422..5425,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 211,
        column: 15,
        span: 5426..5427,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 211,
        column: 21,
        span: 5428..5433,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 211,
        column: 22,
        span: 5433..5434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 211,
        column: 29,
        span: 5434..5441,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 211,
        column: 30,
        span: 5441..5442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 211,
        column: 36,
        span: 5443..5448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 211,
        column: 37,
        span: 5448..5449,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 212,
        column: 4,
        span: 5450..5453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 212,
        column: 6,
        span: 5454..5455,
    },
    Token {
        kind: In,
        lexeme: Symbol(
            "in",
        ),
        line: 212,
        column: 9,
        span: 5456..5458,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 212,
        column: 16,
        span: 5459..5465,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 17,
        span: 5465..5466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gmatch",
        ),
        line: 212,
        column: 23,
        span: 5466..5472,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 212,
        column: 24,
        span: 5472..5473,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 212,
        column: 31,
        span: 5473..5480,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 32,
        span: 5480..5481,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 212,
        column: 36,
        span: 5481..5485,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 212,
        column: 38,
        span: 5485..5487,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\";\"",
        ),
        line: 212,
        column: 41,
        span: 5487..5490,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 212,
        column: 43,
        span: 5490..5492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 212,
        column: 50,
        span: 5492..5499,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 212,
        column: 51,
        span: 5499..5500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 212,
        column: 56,
        span: 5500..5505,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 212,
        column: 57,
        span: 5505..5506,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"[^;]+\"",
        ),
        line: 212,
        column: 65,
        span: 5507..5514,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 212,
        column: 66,
        span: 5514..5515,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 212,
        column: 0,
        span: 5516..5518,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 213,
        column: 4,
        span: 5521..5522,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 213,
        column: 6,
        span: 5523..5524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 213,
        column: 13,
        span: 5525..5531,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 213,
        column: 14,
        span: 5531..5532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "gsub",
        ),
        line: 213,
        column: 18,
        span: 5532..5536,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 213,
        column: 19,
        span: 5536..5537,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 213,
        column: 20,
        span: 5537..5538,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 21,
        span: 5538..5539,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 213,
        column: 25,
        span: 5540..5543,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 213,
        column: 26,
        span: 5543..5544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fname",
        ),
        line: 213,
        column: 32,
        span: 5545..5550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 213,
        column: 33,
        span: 5550..5551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 214,
        column: 9,
        span: 5554..5560,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 10,
        span: 5560..5561,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 214,
        column: 16,
        span: 5561..5567,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 214,
        column: 17,
        span: 5567..5568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 214,
        column: 21,
        span: 5568..5572,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 214,
        column: 22,
        span: 5572..5573,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 214,
        column: 25,
        span: 5573..5576,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 26,
        span: 5576..5577,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 214,
        column: 28,
        span: 5578..5579,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 29,
        span: 5579..5580,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 214,
        column: 31,
        span: 5580..5582,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 214,
        column: 32,
        span: 5582..5583,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 214,
        column: 37,
        span: 5584..5588,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 38,
        span: 5588..5589,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 214,
        column: 39,
        span: 5589..5590,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 215,
        column: 0,
        span: 5591..5594,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 217,
        column: 3,
        span: 5596..5598,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 218,
        column: 8,
        span: 5651..5656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchers",
        ),
        line: 218,
        column: 18,
        span: 5657..5666,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 218,
        column: 20,
        span: 5667..5668,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 218,
        column: 28,
        span: 5669..5676,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 218,
        column: 29,
        span: 5676..5677,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchers",
        ),
        line: 218,
        column: 0,
        span: 5677..5686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 219,
        column: 10,
        span: 5689..5696,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 219,
        column: 11,
        span: 5696..5697,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchers",
        ),
        line: 219,
        column: 20,
        span: 5697..5706,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 219,
        column: 22,
        span: 5707..5708,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 219,
        column: 0,
        span: 5708..5710,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 220,
        column: 8,
        span: 5713..5718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 220,
        column: 11,
        span: 5719..5721,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 12,
        span: 5721..5722,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 220,
        column: 16,
        span: 5723..5726,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 220,
        column: 18,
        span: 5727..5728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 220,
        column: 24,
        span: 5729..5734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 220,
        column: 25,
        span: 5734..5735,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 220,
        column: 32,
        span: 5735..5742,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 220,
        column: 33,
        span: 5742..5743,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 220,
        column: 37,
        span: 5744..5747,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 220,
        column: 38,
        span: 5747..5748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 221,
        column: 9,
        span: 5751..5757,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 10,
        span: 5757..5758,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 221,
        column: 13,
        span: 5758..5761,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 221,
        column: 16,
        span: 5762..5764,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 221,
        column: 20,
        span: 5765..5768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "string",
        ),
        line: 221,
        column: 27,
        span: 5769..5775,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 221,
        column: 28,
        span: 5775..5776,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "find",
        ),
        line: 221,
        column: 32,
        span: 5776..5780,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 221,
        column: 33,
        span: 5780..5781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "msg",
        ),
        line: 221,
        column: 36,
        span: 5781..5784,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 221,
        column: 37,
        span: 5784..5785,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"must be a table\"",
        ),
        line: 221,
        column: 55,
        span: 5786..5803,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 56,
        span: 5803..5804,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 221,
        column: 57,
        span: 5804..5805,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 222,
        column: 10,
        span: 5808..5815,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 222,
        column: 11,
        span: 5815..5816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchers",
        ),
        line: 222,
        column: 20,
        span: 5816..5825,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 222,
        column: 22,
        span: 5826..5827,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "searchers",
        ),
        line: 222,
        column: 0,
        span: 5828..5837,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 223,
        column: 0,
        span: 5838..5841,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 225,
        column: 6,
        span: 5843..5848,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 225,
        column: 15,
        span: 5849..5857,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "import",
        ),
        line: 225,
        column: 22,
        span: 5858..5864,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 225,
        column: 23,
        span: 5864..5865,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 225,
        column: 26,
        span: 5865..5868,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 225,
        column: 27,
        span: 5868..5869,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 226,
        column: 8,
        span: 5872..5877,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 226,
        column: 10,
        span: 5878..5879,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 226,
        column: 12,
        span: 5880..5881,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 226,
        column: 14,
        span: 5882..5883,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 226,
        column: 17,
        span: 5883..5886,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 226,
        column: 18,
        span: 5886..5887,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 227,
        column: 9,
        span: 5890..5896,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 227,
        column: 18,
        span: 5897..5905,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 227,
        column: 20,
        span: 5906..5907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 227,
        column: 21,
        span: 5907..5908,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 227,
        column: 22,
        span: 5908..5909,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 228,
        column: 8,
        span: 5914..5917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 228,
        column: 10,
        span: 5918..5919,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 11,
        span: 5919..5920,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 228,
        column: 12,
        span: 5919..5921,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 228,
        column: 13,
        span: 5921..5922,
    },
    Token {
        kind: Hash,
        lexeme: Symbol(
            "#",
        ),
        line: 228,
        column: 15,
        span: 5923..5924,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 228,
        column: 16,
        span: 5924..5925,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 228,
        column: 19,
        span: 5926..5928,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "m",
        ),
        line: 228,
        column: 21,
        span: 5929..5930,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 228,
        column: 22,
        span: 5930..5931,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 228,
        column: 23,
        span: 5931..5932,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 228,
        column: 24,
        span: 5932..5933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 228,
        column: 25,
        span: 5933..5934,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 228,
        column: 26,
        span: 5934..5935,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 228,
        column: 27,
        span: 5935..5936,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 228,
        column: 29,
        span: 5937..5938,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 228,
        column: 32,
        span: 5939..5941,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 228,
        column: 33,
        span: 5941..5942,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 228,
        column: 34,
        span: 5942..5943,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 228,
        column: 35,
        span: 5943..5944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 228,
        column: 36,
        span: 5944..5945,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 228,
        column: 37,
        span: 5945..5946,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 228,
        column: 38,
        span: 5946..5947,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 228,
        column: 0,
        span: 5948..5951,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 229,
        column: 0,
        span: 5954..5957,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 230,
        column: 0,
        span: 5958..5961,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 233,
        column: 7,
        span: 6008..6014,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 8,
        span: 6014..6015,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 233,
        column: 11,
        span: 6015..6018,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 233,
        column: 17,
        span: 6019..6024,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 233,
        column: 18,
        span: 6024..6025,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "module",
        ),
        line: 233,
        column: 24,
        span: 6025..6031,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 233,
        column: 25,
        span: 6031..6032,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'XUXU'",
        ),
        line: 233,
        column: 32,
        span: 6033..6039,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 33,
        span: 6039..6040,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 233,
        column: 34,
        span: 6040..6041,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 240,
        column: 6,
        span: 6081..6086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 240,
        column: 8,
        span: 6087..6088,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 240,
        column: 10,
        span: 6089..6090,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"\"",
        ),
        line: 240,
        column: 13,
        span: 6091..6093,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 243,
        column: 6,
        span: 6180..6185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 243,
        column: 9,
        span: 6186..6188,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 10,
        span: 6188..6189,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 243,
        column: 14,
        span: 6190..6193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 15,
        span: 6193..6194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 243,
        column: 20,
        span: 6195..6199,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 243,
        column: 22,
        span: 6200..6201,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 243,
        column: 30,
        span: 6202..6209,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 243,
        column: 31,
        span: 6209..6210,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 243,
        column: 38,
        span: 6210..6217,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 243,
        column: 39,
        span: 6217..6218,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 243,
        column: 41,
        span: 6218..6220,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        line: 243,
        column: 47,
        span: 6220..6226,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 243,
        column: 48,
        span: 6226..6227,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"*\"",
        ),
        line: 243,
        column: 52,
        span: 6228..6231,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 243,
        column: 53,
        span: 6231..6232,
    },
    Token {
        kind: If,
        lexeme: Symbol(
            "if",
        ),
        line: 244,
        column: 3,
        span: 6233..6235,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 244,
        column: 7,
        span: 6236..6239,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "st",
        ),
        line: 244,
        column: 10,
        span: 6240..6242,
    },
    Token {
        kind: Then,
        lexeme: Symbol(
            "then",
        ),
        line: 244,
        column: 0,
        span: 6243..6247,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 245,
        column: 8,
        span: 6250..6255,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 245,
        column: 10,
        span: 6256..6257,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 11,
        span: 6257..6258,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 245,
        column: 15,
        span: 6259..6262,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 16,
        span: 6262..6263,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 245,
        column: 21,
        span: 6264..6268,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 245,
        column: 23,
        span: 6269..6270,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 245,
        column: 31,
        span: 6271..6278,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 245,
        column: 32,
        span: 6278..6279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 245,
        column: 39,
        span: 6279..6286,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 245,
        column: 40,
        span: 6286..6287,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"donotexist\"",
        ),
        line: 245,
        column: 52,
        span: 6287..6299,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 245,
        column: 53,
        span: 6299..6300,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 245,
        column: 55,
        span: 6301..6302,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 245,
        column: 57,
        span: 6302..6304,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 245,
        column: 63,
        span: 6304..6310,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 245,
        column: 64,
        span: 6310..6311,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 246,
        column: 9,
        span: 6314..6320,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 10,
        span: 6320..6321,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 246,
        column: 13,
        span: 6321..6324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 246,
        column: 15,
        span: 6325..6326,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 246,
        column: 19,
        span: 6327..6330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 246,
        column: 24,
        span: 6331..6335,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 246,
        column: 25,
        span: 6335..6336,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 246,
        column: 28,
        span: 6336..6339,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 29,
        span: 6339..6340,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 32,
        span: 6341..6343,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 246,
        column: 41,
        span: 6344..6352,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 246,
        column: 45,
        span: 6353..6356,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 246,
        column: 50,
        span: 6357..6361,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 246,
        column: 53,
        span: 6362..6364,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"absent\"",
        ),
        line: 246,
        column: 62,
        span: 6365..6373,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 246,
        column: 63,
        span: 6373..6374,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 247,
        column: 4,
        span: 6377..6378,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 5,
        span: 6378..6379,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "Message",
        ),
        line: 247,
        column: 12,
        span: 6379..6386,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 247,
        column: 15,
        span: 6387..6389,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 247,
        column: 21,
        span: 6390..6395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 22,
        span: 6395..6396,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 247,
        column: 23,
        span: 6396..6397,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'\\n >>> cannot load dynamic library <<<\\n'",
        ),
        line: 247,
        column: 65,
        span: 6397..6439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 247,
        column: 66,
        span: 6439..6440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 248,
        column: 8,
        span: 6443..6448,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 248,
        column: 9,
        span: 6448..6449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 248,
        column: 12,
        span: 6449..6452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 248,
        column: 13,
        span: 6452..6453,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 248,
        column: 18,
        span: 6454..6458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 248,
        column: 19,
        span: 6458..6459,
    },
    Token {
        kind: Else,
        lexeme: Symbol(
            "else",
        ),
        line: 249,
        column: 0,
        span: 6460..6464,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 251,
        column: 8,
        span: 6490..6495,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 251,
        column: 10,
        span: 6496..6497,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 251,
        column: 12,
        span: 6498..6499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 251,
        column: 19,
        span: 6500..6506,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 20,
        span: 6506..6507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 251,
        column: 27,
        span: 6507..6514,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 251,
        column: 28,
        span: 6514..6515,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 251,
        column: 35,
        span: 6515..6522,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 251,
        column: 36,
        span: 6522..6523,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 251,
        column: 38,
        span: 6523..6525,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        line: 251,
        column: 44,
        span: 6525..6531,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 251,
        column: 45,
        span: 6531..6532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 251,
        column: 47,
        span: 6533..6534,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 251,
        column: 49,
        span: 6534..6536,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"onefunction\"",
        ),
        line: 251,
        column: 62,
        span: 6536..6549,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 63,
        span: 6549..6550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 251,
        column: 64,
        span: 6550..6551,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 252,
        column: 8,
        span: 6554..6559,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 252,
        column: 10,
        span: 6560..6561,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 11,
        span: 6561..6562,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 252,
        column: 13,
        span: 6563..6564,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 252,
        column: 15,
        span: 6565..6566,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 252,
        column: 17,
        span: 6567..6568,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 252,
        column: 18,
        span: 6568..6569,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 20,
        span: 6568..6571,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 252,
        column: 21,
        span: 6571..6572,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 252,
        column: 24,
        span: 6572..6575,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 252,
        column: 25,
        span: 6575..6576,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 253,
        column: 9,
        span: 6579..6585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 253,
        column: 10,
        span: 6585..6586,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 253,
        column: 11,
        span: 6586..6587,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 14,
        span: 6588..6590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "25",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 17,
        span: 6590..6593,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 253,
        column: 21,
        span: 6594..6597,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 253,
        column: 23,
        span: 6598..6599,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 253,
        column: 26,
        span: 6600..6602,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "15",
                    after_decimal: "",
                },
            ),
        ),
        line: 253,
        column: 29,
        span: 6602..6605,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 253,
        column: 30,
        span: 6605..6606,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 255,
        column: 4,
        span: 6610..6611,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 255,
        column: 6,
        span: 6612..6613,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 255,
        column: 13,
        span: 6614..6620,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 14,
        span: 6620..6621,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 255,
        column: 21,
        span: 6621..6628,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 255,
        column: 22,
        span: 6628..6629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 255,
        column: 29,
        span: 6629..6636,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 255,
        column: 30,
        span: 6636..6637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 255,
        column: 32,
        span: 6637..6639,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        line: 255,
        column: 38,
        span: 6639..6645,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 255,
        column: 39,
        span: 6645..6646,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 255,
        column: 41,
        span: 6647..6648,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 255,
        column: 43,
        span: 6648..6650,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"anotherfunc\"",
        ),
        line: 255,
        column: 56,
        span: 6650..6663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 57,
        span: 6663..6664,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 255,
        column: 58,
        span: 6664..6665,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 256,
        column: 9,
        span: 6668..6674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 10,
        span: 6674..6675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 256,
        column: 11,
        span: 6675..6676,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 256,
        column: 12,
        span: 6676..6677,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 14,
        span: 6676..6679,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 256,
        column: 15,
        span: 6679..6680,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 256,
        column: 18,
        span: 6680..6683,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 19,
        span: 6683..6684,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 256,
        column: 22,
        span: 6685..6687,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"10%20\\n\"",
        ),
        line: 256,
        column: 32,
        span: 6688..6697,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 256,
        column: 33,
        span: 6697..6698,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 259,
        column: 8,
        span: 6728..6733,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 259,
        column: 10,
        span: 6734..6735,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 11,
        span: 6735..6736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 259,
        column: 15,
        span: 6737..6740,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 16,
        span: 6740..6741,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 259,
        column: 21,
        span: 6742..6746,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 259,
        column: 23,
        span: 6747..6748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 259,
        column: 31,
        span: 6749..6756,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 259,
        column: 32,
        span: 6756..6757,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 259,
        column: 39,
        span: 6757..6764,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 259,
        column: 40,
        span: 6764..6765,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 259,
        column: 42,
        span: 6765..6767,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        line: 259,
        column: 48,
        span: 6767..6773,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 259,
        column: 49,
        span: 6773..6774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 259,
        column: 51,
        span: 6775..6776,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 259,
        column: 53,
        span: 6776..6778,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 259,
        column: 59,
        span: 6778..6784,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 259,
        column: 60,
        span: 6784..6785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 260,
        column: 9,
        span: 6788..6794,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 10,
        span: 6794..6795,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 260,
        column: 13,
        span: 6795..6798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 260,
        column: 15,
        span: 6799..6800,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 260,
        column: 19,
        span: 6801..6804,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 260,
        column: 24,
        span: 6805..6809,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 260,
        column: 25,
        span: 6809..6810,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 260,
        column: 28,
        span: 6810..6813,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 29,
        span: 6813..6814,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 260,
        column: 32,
        span: 6815..6817,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 260,
        column: 41,
        span: 6818..6826,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 260,
        column: 45,
        span: 6827..6830,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 260,
        column: 50,
        span: 6831..6835,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 260,
        column: 53,
        span: 6836..6838,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"init\"",
        ),
        line: 260,
        column: 60,
        span: 6839..6845,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 260,
        column: 61,
        span: 6845..6846,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 261,
        column: 4,
        span: 6849..6850,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 5,
        span: 6850..6851,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 261,
        column: 9,
        span: 6852..6855,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 10,
        span: 6855..6856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 261,
        column: 15,
        span: 6857..6861,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 261,
        column: 17,
        span: 6862..6863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 261,
        column: 25,
        span: 6864..6871,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 261,
        column: 26,
        span: 6871..6872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 261,
        column: 33,
        span: 6872..6879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 261,
        column: 34,
        span: 6879..6880,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"donotexist\"",
        ),
        line: 261,
        column: 46,
        span: 6880..6892,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 261,
        column: 47,
        span: 6892..6893,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 261,
        column: 49,
        span: 6894..6895,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 261,
        column: 51,
        span: 6895..6897,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"xuxu\"",
        ),
        line: 261,
        column: 57,
        span: 6897..6903,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 261,
        column: 58,
        span: 6903..6904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 262,
        column: 9,
        span: 6907..6913,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 10,
        span: 6913..6914,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 262,
        column: 13,
        span: 6914..6917,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 262,
        column: 15,
        span: 6918..6919,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 262,
        column: 19,
        span: 6920..6923,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 262,
        column: 24,
        span: 6924..6928,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 262,
        column: 25,
        span: 6928..6929,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "err",
        ),
        line: 262,
        column: 28,
        span: 6929..6932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 29,
        span: 6932..6933,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 262,
        column: 32,
        span: 6934..6936,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 262,
        column: 41,
        span: 6937..6945,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 262,
        column: 45,
        span: 6946..6949,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "when",
        ),
        line: 262,
        column: 50,
        span: 6950..6954,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 262,
        column: 53,
        span: 6955..6957,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"open\"",
        ),
        line: 262,
        column: 60,
        span: 6958..6964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 262,
        column: 61,
        span: 6964..6965,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 265,
        column: 4,
        span: 7029..7030,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 265,
        column: 6,
        span: 7031..7032,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 265,
        column: 13,
        span: 7033..7039,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 14,
        span: 7039..7040,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 265,
        column: 21,
        span: 7040..7047,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 265,
        column: 22,
        span: 7047..7048,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "loadlib",
        ),
        line: 265,
        column: 29,
        span: 7048..7055,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 265,
        column: 30,
        span: 7055..7056,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 265,
        column: 32,
        span: 7056..7058,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib11\"",
        ),
        line: 265,
        column: 39,
        span: 7058..7065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 265,
        column: 40,
        span: 7065..7066,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 265,
        column: 42,
        span: 7067..7068,
    },
    Token {
        kind: DoubleDot,
        lexeme: Symbol(
            "..",
        ),
        line: 265,
        column: 44,
        span: 7068..7070,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"luaopen_lib11\"",
        ),
        line: 265,
        column: 59,
        span: 7070..7085,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 60,
        span: 7085..7086,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 265,
        column: 61,
        span: 7086..7087,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 266,
        column: 9,
        span: 7090..7096,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 10,
        span: 7096..7097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 266,
        column: 11,
        span: 7097..7098,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 266,
        column: 12,
        span: 7098..7099,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 13,
        span: 7099..7100,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 266,
        column: 16,
        span: 7101..7103,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"exported\"",
        ),
        line: 266,
        column: 27,
        span: 7104..7114,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 266,
        column: 28,
        span: 7114..7115,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 269,
        column: 10,
        span: 7162..7169,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 269,
        column: 11,
        span: 7169..7170,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "cpath",
        ),
        line: 269,
        column: 16,
        span: 7170..7175,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 269,
        column: 18,
        span: 7176..7177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 269,
        column: 21,
        span: 7178..7180,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"?\"",
        ),
        line: 269,
        column: 24,
        span: 7180..7183,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 270,
        column: 8,
        span: 7186..7191,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib2",
        ),
        line: 270,
        column: 13,
        span: 7192..7196,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 270,
        column: 15,
        span: 7197..7198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 270,
        column: 23,
        span: 7199..7206,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib2-v2\"",
        ),
        line: 270,
        column: 32,
        span: 7206..7215,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 273,
        column: 9,
        span: 7294..7300,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 273,
        column: 10,
        span: 7300..7301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 273,
        column: 14,
        span: 7301..7305,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 15,
        span: 7305..7306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 273,
        column: 16,
        span: 7306..7307,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 273,
        column: 19,
        span: 7308..7310,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib2-v2\"",
        ),
        line: 273,
        column: 29,
        span: 7311..7320,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 273,
        column: 33,
        span: 7321..7324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 273,
        column: 38,
        span: 7325..7329,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 273,
        column: 39,
        span: 7329..7330,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 273,
        column: 40,
        span: 7330..7331,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 273,
        column: 43,
        span: 7332..7334,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 273,
        column: 46,
        span: 7335..7337,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib2-v2\"",
        ),
        line: 273,
        column: 55,
        span: 7337..7346,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 273,
        column: 56,
        span: 7346..7347,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 274,
        column: 9,
        span: 7350..7356,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 10,
        span: 7356..7357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "lib2",
        ),
        line: 274,
        column: 14,
        span: 7357..7361,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 274,
        column: 15,
        span: 7361..7362,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "id",
        ),
        line: 274,
        column: 17,
        span: 7362..7364,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 274,
        column: 18,
        span: 7364..7365,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 274,
        column: 21,
        span: 7365..7368,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 22,
        span: 7368..7369,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 274,
        column: 25,
        span: 7370..7372,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 274,
        column: 29,
        span: 7373..7376,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 274,
        column: 30,
        span: 7376..7377,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 277,
        column: 8,
        span: 7404..7409,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fs",
        ),
        line: 277,
        column: 11,
        span: 7410..7412,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 277,
        column: 13,
        span: 7413..7414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 277,
        column: 21,
        span: 7415..7422,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.sub\"",
        ),
        line: 277,
        column: 31,
        span: 7422..7432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 278,
        column: 9,
        span: 7435..7441,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 278,
        column: 10,
        span: 7441..7442,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 278,
        column: 14,
        span: 7442..7446,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 15,
        span: 7446..7447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 278,
        column: 16,
        span: 7447..7448,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 19,
        span: 7449..7451,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1.sub\"",
        ),
        line: 278,
        column: 30,
        span: 7452..7462,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 278,
        column: 34,
        span: 7463..7466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 278,
        column: 39,
        span: 7467..7471,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 278,
        column: 40,
        span: 7471..7472,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 278,
        column: 41,
        span: 7472..7473,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 278,
        column: 44,
        span: 7474..7476,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "DC",
        ),
        line: 278,
        column: 47,
        span: 7477..7479,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"lib1\"",
        ),
        line: 278,
        column: 53,
        span: 7479..7485,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 278,
        column: 54,
        span: 7485..7486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 279,
        column: 9,
        span: 7489..7495,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 10,
        span: 7495..7496,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "fs",
        ),
        line: 279,
        column: 12,
        span: 7496..7498,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 279,
        column: 13,
        span: 7498..7499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "id",
        ),
        line: 279,
        column: 15,
        span: 7499..7501,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 279,
        column: 16,
        span: 7501..7502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 18,
        span: 7501..7504,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 19,
        span: 7504..7505,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 279,
        column: 22,
        span: 7506..7508,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "45",
                    after_decimal: "",
                },
            ),
        ),
        line: 279,
        column: 25,
        span: 7508..7511,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 279,
        column: 26,
        span: 7511..7512,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 280,
        column: 0,
        span: 7513..7516,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 282,
        column: 5,
        span: 7518..7522,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 282,
        column: 7,
        span: 7523..7524,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_G",
        ),
        line: 282,
        column: 0,
        span: 7525..7527,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 287,
        column: 0,
        span: 7550..7552,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 288,
        column: 8,
        span: 7555..7560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 288,
        column: 10,
        span: 7561..7562,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 288,
        column: 12,
        span: 7563..7564,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 288,
        column: 0,
        span: 7565..7572,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 289,
        column: 10,
        span: 7575..7582,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 289,
        column: 12,
        span: 7583..7584,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 289,
        column: 14,
        span: 7585..7586,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 289,
        column: 15,
        span: 7586..7587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 290,
        column: 4,
        span: 7590..7591,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 290,
        column: 5,
        span: 7591..7592,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "preload",
        ),
        line: 290,
        column: 12,
        span: 7592..7599,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 290,
        column: 13,
        span: 7599..7600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 290,
        column: 15,
        span: 7600..7602,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 290,
        column: 17,
        span: 7603..7604,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 290,
        column: 26,
        span: 7605..7613,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 290,
        column: 28,
        span: 7614..7615,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 290,
        column: 31,
        span: 7615..7618,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 290,
        column: 32,
        span: 7618..7619,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 291,
        column: 10,
        span: 7624..7629,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 291,
        column: 15,
        span: 7630..7634,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 291,
        column: 17,
        span: 7635..7636,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 291,
        column: 19,
        span: 7637..7638,
    },
    Token {
        kind: TripleDot,
        lexeme: Symbol(
            "...",
        ),
        line: 291,
        column: 22,
        span: 7638..7641,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 291,
        column: 23,
        span: 7641..7642,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 292,
        column: 13,
        span: 7647..7655,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 292,
        column: 18,
        span: 7656..7660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 292,
        column: 20,
        span: 7661..7662,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 292,
        column: 21,
        span: 7662..7663,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 292,
        column: 22,
        span: 7663..7664,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 292,
        column: 29,
        span: 7665..7671,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 292,
        column: 31,
        span: 7672..7673,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 292,
        column: 32,
        span: 7673..7674,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 292,
        column: 34,
        span: 7673..7676,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 292,
        column: 0,
        span: 7677..7680,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 293,
        column: 11,
        span: 7685..7691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "_ENV",
        ),
        line: 293,
        column: 0,
        span: 7692..7696,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 294,
        column: 0,
        span: 7699..7702,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 296,
        column: 8,
        span: 7706..7711,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 296,
        column: 11,
        span: 7712..7714,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 296,
        column: 13,
        span: 7715..7716,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 296,
        column: 21,
        span: 7717..7724,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        line: 296,
        column: 25,
        span: 7724..7728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 297,
        column: 9,
        span: 7731..7737,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 297,
        column: 10,
        span: 7737..7738,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "require",
        ),
        line: 297,
        column: 17,
        span: 7738..7745,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        line: 297,
        column: 21,
        span: 7745..7749,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 297,
        column: 24,
        span: 7750..7752,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 297,
        column: 27,
        span: 7753..7755,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 297,
        column: 28,
        span: 7755..7756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 298,
        column: 9,
        span: 7759..7765,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 10,
        span: 7765..7766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 298,
        column: 12,
        span: 7766..7768,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 298,
        column: 13,
        span: 7768..7769,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "xuxu",
        ),
        line: 298,
        column: 17,
        span: 7769..7773,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 298,
        column: 18,
        span: 7773..7774,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 20,
        span: 7773..7776,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 21,
        span: 7776..7777,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 298,
        column: 24,
        span: 7778..7780,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "30",
                    after_decimal: "",
                },
            ),
        ),
        line: 298,
        column: 27,
        span: 7780..7783,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 298,
        column: 28,
        span: 7783..7784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 299,
        column: 9,
        span: 7787..7793,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 299,
        column: 10,
        span: 7793..7794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 299,
        column: 12,
        span: 7794..7796,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 299,
        column: 13,
        span: 7796..7797,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 299,
        column: 14,
        span: 7796..7798,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 299,
        column: 15,
        span: 7798..7799,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 18,
        span: 7800..7802,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"pl\"",
        ),
        line: 299,
        column: 23,
        span: 7803..7807,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 299,
        column: 27,
        span: 7808..7811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pl",
        ),
        line: 299,
        column: 30,
        span: 7812..7814,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 299,
        column: 31,
        span: 7814..7815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 299,
        column: 32,
        span: 7814..7816,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 299,
        column: 33,
        span: 7816..7817,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 299,
        column: 36,
        span: 7818..7820,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 299,
        column: 40,
        span: 7821..7824,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 299,
        column: 41,
        span: 7824..7825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 301,
        column: 10,
        span: 7829..7836,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 301,
        column: 12,
        span: 7837..7838,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "p",
        ),
        line: 301,
        column: 0,
        span: 7839..7840,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 302,
        column: 9,
        span: 7843..7849,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 10,
        span: 7849..7850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 302,
        column: 14,
        span: 7850..7854,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 302,
        column: 15,
        span: 7854..7855,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "package",
        ),
        line: 302,
        column: 22,
        span: 7855..7862,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 302,
        column: 23,
        span: 7862..7863,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "path",
        ),
        line: 302,
        column: 27,
        span: 7863..7867,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 28,
        span: 7867..7868,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 302,
        column: 31,
        span: 7869..7871,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"string\"",
        ),
        line: 302,
        column: 40,
        span: 7872..7880,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 302,
        column: 41,
        span: 7880..7881,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 303,
        column: 0,
        span: 7882..7885,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 305,
        column: 6,
        span: 7887..7892,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 305,
        column: 7,
        span: 7892..7893,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 305,
        column: 10,
        span: 7893..7896,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 305,
        column: 11,
        span: 7896..7897,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 307,
        column: 4,
        span: 7899..7902,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 309,
        column: 6,
        span: 7909..7914,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 309,
        column: 7,
        span: 7914..7915,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"testing assignments, logical operators, and constructors\"",
        ),
        line: 309,
        column: 65,
        span: 7915..7973,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 309,
        column: 66,
        span: 7973..7974,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 311,
        column: 6,
        span: 7976..7981,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 311,
        column: 10,
        span: 7982..7985,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 311,
        column: 11,
        span: 7985..7986,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res2",
        ),
        line: 311,
        column: 16,
        span: 7987..7991,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 311,
        column: 18,
        span: 7992..7993,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "27",
                    after_decimal: "",
                },
            ),
        ),
        line: 311,
        column: 0,
        span: 7993..7996,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 313,
        column: 2,
        span: 7998..7999,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 3,
        span: 7999..8000,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 313,
        column: 5,
        span: 8001..8002,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 313,
        column: 7,
        span: 8003..8004,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 9,
        span: 8004..8006,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 313,
        column: 10,
        span: 8006..8007,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 12,
        span: 8007..8009,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 313,
        column: 13,
        span: 8009..8010,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 313,
        column: 0,
        span: 8009..8011,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 314,
        column: 7,
        span: 8012..8018,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 314,
        column: 8,
        span: 8018..8019,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 314,
        column: 9,
        span: 8019..8020,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
        column: 11,
        span: 8020..8022,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 314,
        column: 12,
        span: 8021..8023,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 314,
        column: 16,
        span: 8024..8027,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 314,
        column: 18,
        span: 8028..8029,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 314,
        column: 20,
        span: 8029..8031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 314,
        column: 21,
        span: 8030..8032,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 314,
        column: 22,
        span: 8032..8033,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 315,
        column: 2,
        span: 8034..8035,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 315,
        column: 3,
        span: 8035..8036,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 315,
        column: 4,
        span: 8036..8037,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 315,
        column: 5,
        span: 8037..8038,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 316,
        column: 9,
        span: 8039..8047,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 316,
        column: 11,
        span: 8048..8049,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 316,
        column: 12,
        span: 8049..8050,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 316,
        column: 13,
        span: 8050..8051,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 316,
        column: 20,
        span: 8052..8058,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 23,
        span: 8058..8061,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 24,
        span: 8061..8062,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 27,
        span: 8062..8065,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 316,
        column: 28,
        span: 8065..8066,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 316,
        column: 31,
        span: 8066..8069,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 316,
        column: 0,
        span: 8070..8073,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 317,
        column: 2,
        span: 8074..8075,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 317,
        column: 3,
        span: 8075..8076,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 317,
        column: 4,
        span: 8076..8077,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 5,
        span: 8077..8078,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 317,
        column: 7,
        span: 8079..8080,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 8,
        span: 8080..8081,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 317,
        column: 10,
        span: 8082..8083,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 317,
        column: 11,
        span: 8083..8084,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 12,
        span: 8083..8085,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 317,
        column: 13,
        span: 8085..8086,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 317,
        column: 15,
        span: 8087..8088,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 17,
        span: 8088..8090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 18,
        span: 8090..8091,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 317,
        column: 20,
        span: 8091..8093,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 317,
        column: 21,
        span: 8093..8094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 317,
        column: 23,
        span: 8095..8096,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 317,
        column: 24,
        span: 8096..8097,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 317,
        column: 25,
        span: 8097..8098,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 318,
        column: 7,
        span: 8099..8105,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 318,
        column: 8,
        span: 8105..8106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 318,
        column: 9,
        span: 8106..8107,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 318,
        column: 10,
        span: 8107..8108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 318,
        column: 11,
        span: 8108..8109,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
        column: 13,
        span: 8109..8111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 14,
        span: 8110..8112,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 318,
        column: 18,
        span: 8113..8116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 318,
        column: 20,
        span: 8117..8118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
        column: 22,
        span: 8118..8120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 23,
        span: 8119..8121,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 318,
        column: 27,
        span: 8122..8125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 318,
        column: 29,
        span: 8126..8127,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 318,
        column: 30,
        span: 8127..8128,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 31,
        span: 8127..8129,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 318,
        column: 32,
        span: 8129..8130,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 318,
        column: 34,
        span: 8130..8132,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 318,
        column: 36,
        span: 8131..8134,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 318,
        column: 37,
        span: 8134..8135,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 319,
        column: 2,
        span: 8136..8137,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 319,
        column: 3,
        span: 8137..8138,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 319,
        column: 4,
        span: 8138..8139,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 5,
        span: 8139..8140,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 6,
        span: 8140..8141,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 319,
        column: 7,
        span: 8141..8142,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 8,
        span: 8142..8143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 319,
        column: 10,
        span: 8144..8145,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 11,
        span: 8145..8146,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 319,
        column: 13,
        span: 8147..8148,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 319,
        column: 14,
        span: 8148..8149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 319,
        column: 15,
        span: 8149..8150,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 16,
        span: 8150..8151,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 17,
        span: 8151..8152,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 319,
        column: 18,
        span: 8152..8153,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 319,
        column: 19,
        span: 8152..8154,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 319,
        column: 20,
        span: 8154..8155,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 319,
        column: 22,
        span: 8156..8157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 319,
        column: 24,
        span: 8158..8159,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 319,
        column: 25,
        span: 8159..8160,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 319,
        column: 26,
        span: 8160..8161,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 27,
        span: 8161..8162,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 319,
        column: 29,
        span: 8163..8164,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 319,
        column: 30,
        span: 8164..8165,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 319,
        column: 34,
        span: 8166..8169,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 320,
        column: 7,
        span: 8170..8176,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 320,
        column: 8,
        span: 8176..8177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 320,
        column: 9,
        span: 8177..8178,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 320,
        column: 10,
        span: 8178..8179,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 12,
        span: 8178..8181,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 320,
        column: 13,
        span: 8181..8182,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 320,
        column: 16,
        span: 8183..8185,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 19,
        span: 8185..8188,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 320,
        column: 23,
        span: 8189..8192,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 320,
        column: 25,
        span: 8193..8194,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 320,
        column: 28,
        span: 8195..8197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 320,
        column: 30,
        span: 8198..8199,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 320,
        column: 34,
        span: 8200..8203,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 320,
        column: 36,
        span: 8204..8205,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 320,
        column: 37,
        span: 8205..8206,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 320,
        column: 39,
        span: 8205..8208,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 320,
        column: 40,
        span: 8208..8209,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 320,
        column: 43,
        span: 8210..8212,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'x'",
        ),
        line: 320,
        column: 47,
        span: 8213..8216,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 320,
        column: 48,
        span: 8216..8217,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 322,
        column: 0,
        span: 8219..8221,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 323,
        column: 8,
        span: 8224..8229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 323,
        column: 10,
        span: 8230..8231,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 323,
        column: 12,
        span: 8232..8233,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 323,
        column: 21,
        span: 8234..8242,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 323,
        column: 23,
        span: 8243..8244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 323,
        column: 24,
        span: 8244..8245,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 323,
        column: 25,
        span: 8245..8246,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 323,
        column: 31,
        span: 8247..8252,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 323,
        column: 33,
        span: 8253..8254,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 323,
        column: 35,
        span: 8255..8256,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 323,
        column: 37,
        span: 8257..8258,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 323,
        column: 38,
        span: 8258..8259,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 323,
        column: 39,
        span: 8259..8260,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 323,
        column: 43,
        span: 8261..8264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 323,
        column: 45,
        span: 8265..8266,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 323,
        column: 46,
        span: 8266..8267,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 323,
        column: 47,
        span: 8266..8268,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 323,
        column: 48,
        span: 8268..8269,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "n",
        ),
        line: 323,
        column: 49,
        span: 8269..8270,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 323,
        column: 52,
        span: 8271..8273,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 323,
        column: 54,
        span: 8274..8275,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 323,
        column: 55,
        span: 8275..8276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 323,
        column: 56,
        span: 8276..8277,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 323,
        column: 57,
        span: 8277..8278,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 323,
        column: 58,
        span: 8278..8279,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 323,
        column: 59,
        span: 8279..8280,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 323,
        column: 63,
        span: 8281..8284,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 323,
        column: 64,
        span: 8284..8285,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 324,
        column: 32,
        span: 8311..8317,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "table",
        ),
        line: 324,
        column: 38,
        span: 8318..8323,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 324,
        column: 39,
        span: 8323..8324,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "unpack",
        ),
        line: 324,
        column: 45,
        span: 8324..8330,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 324,
        column: 46,
        span: 8330..8331,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 324,
        column: 47,
        span: 8331..8332,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 324,
        column: 48,
        span: 8332..8333,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 324,
        column: 52,
        span: 8334..8337,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 324,
        column: 53,
        span: 8337..8338,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 325,
        column: 8,
        span: 8341..8346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 325,
        column: 10,
        span: 8347..8348,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 325,
        column: 11,
        span: 8348..8349,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 325,
        column: 12,
        span: 8349..8350,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 325,
        column: 13,
        span: 8350..8351,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 325,
        column: 0,
        span: 8351..8352,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 326,
        column: 4,
        span: 8355..8356,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
        column: 5,
        span: 8356..8357,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 326,
        column: 6,
        span: 8357..8358,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 326,
        column: 8,
        span: 8359..8360,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 326,
        column: 10,
        span: 8360..8362,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 326,
        column: 11,
        span: 8362..8363,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 326,
        column: 13,
        span: 8364..8365,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 326,
        column: 14,
        span: 8365..8366,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 326,
        column: 15,
        span: 8365..8367,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 326,
        column: 16,
        span: 8367..8368,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 327,
        column: 9,
        span: 8371..8377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 327,
        column: 10,
        span: 8377..8378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 327,
        column: 11,
        span: 8378..8379,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 14,
        span: 8380..8382,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 16,
        span: 8382..8384,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 327,
        column: 20,
        span: 8385..8388,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 327,
        column: 22,
        span: 8389..8390,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 327,
        column: 25,
        span: 8391..8393,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 327,
        column: 27,
        span: 8393..8395,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 327,
        column: 28,
        span: 8395..8396,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 328,
        column: 4,
        span: 8399..8400,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 328,
        column: 5,
        span: 8400..8401,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 328,
        column: 6,
        span: 8401..8402,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 328,
        column: 8,
        span: 8403..8404,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 328,
        column: 10,
        span: 8404..8406,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 328,
        column: 11,
        span: 8406..8407,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 328,
        column: 13,
        span: 8408..8409,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 328,
        column: 14,
        span: 8409..8410,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 328,
        column: 15,
        span: 8409..8411,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 328,
        column: 16,
        span: 8411..8412,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 329,
        column: 9,
        span: 8415..8421,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 329,
        column: 10,
        span: 8421..8422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "A",
        ),
        line: 329,
        column: 11,
        span: 8422..8423,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 329,
        column: 14,
        span: 8424..8426,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 16,
        span: 8426..8428,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 329,
        column: 20,
        span: 8429..8432,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 329,
        column: 22,
        span: 8433..8434,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 329,
        column: 25,
        span: 8435..8437,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 329,
        column: 27,
        span: 8437..8439,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 329,
        column: 28,
        span: 8439..8440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 330,
        column: 4,
        span: 8443..8444,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 5,
        span: 8444..8445,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 330,
        column: 6,
        span: 8445..8446,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 7,
        span: 8446..8447,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 330,
        column: 8,
        span: 8447..8448,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 330,
        column: 10,
        span: 8449..8450,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 12,
        span: 8450..8452,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 13,
        span: 8452..8453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 14,
        span: 8452..8454,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 330,
        column: 15,
        span: 8454..8455,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 330,
        column: 16,
        span: 8455..8456,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 330,
        column: 17,
        span: 8456..8457,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 330,
        column: 18,
        span: 8456..8458,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 330,
        column: 19,
        span: 8458..8459,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 331,
        column: 9,
        span: 8462..8468,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 331,
        column: 10,
        span: 8468..8469,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 331,
        column: 11,
        span: 8469..8470,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
        column: 13,
        span: 8470..8472,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
        column: 14,
        span: 8471..8473,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 331,
        column: 18,
        span: 8474..8477,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 331,
        column: 20,
        span: 8478..8479,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
        column: 22,
        span: 8479..8481,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
        column: 23,
        span: 8480..8482,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 331,
        column: 27,
        span: 8483..8486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 331,
        column: 29,
        span: 8487..8488,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 331,
        column: 31,
        span: 8488..8490,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 331,
        column: 32,
        span: 8489..8491,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 331,
        column: 33,
        span: 8491..8492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 332,
        column: 4,
        span: 8495..8496,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 332,
        column: 5,
        span: 8496..8497,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 332,
        column: 6,
        span: 8497..8498,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 332,
        column: 7,
        span: 8498..8499,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 332,
        column: 8,
        span: 8499..8500,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 332,
        column: 10,
        span: 8501..8502,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 12,
        span: 8502..8504,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 332,
        column: 13,
        span: 8504..8505,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 14,
        span: 8504..8506,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 332,
        column: 15,
        span: 8506..8507,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 332,
        column: 16,
        span: 8507..8508,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 332,
        column: 17,
        span: 8508..8509,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 332,
        column: 18,
        span: 8508..8510,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 332,
        column: 19,
        span: 8510..8511,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 333,
        column: 9,
        span: 8514..8520,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 333,
        column: 10,
        span: 8520..8521,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 333,
        column: 11,
        span: 8521..8522,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 333,
        column: 13,
        span: 8522..8524,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 14,
        span: 8523..8525,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 333,
        column: 18,
        span: 8526..8529,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 333,
        column: 20,
        span: 8530..8531,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 333,
        column: 22,
        span: 8531..8533,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 333,
        column: 23,
        span: 8532..8534,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 333,
        column: 27,
        span: 8535..8538,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 333,
        column: 29,
        span: 8539..8540,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 333,
        column: 31,
        span: 8540..8542,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 333,
        column: 34,
        span: 8542..8545,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 333,
        column: 35,
        span: 8545..8546,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 334,
        column: 0,
        span: 8547..8550,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 336,
        column: 2,
        span: 8552..8553,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 3,
        span: 8553..8554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 336,
        column: 5,
        span: 8555..8556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 6,
        span: 8556..8557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 336,
        column: 8,
        span: 8558..8559,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 9,
        span: 8559..8560,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 336,
        column: 11,
        span: 8561..8562,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 336,
        column: 13,
        span: 8563..8564,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 15,
        span: 8564..8566,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 336,
        column: 19,
        span: 8567..8570,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 336,
        column: 23,
        span: 8571..8574,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 24,
        span: 8574..8575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 26,
        span: 8575..8577,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 336,
        column: 29,
        span: 8578..8580,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 336,
        column: 33,
        span: 8581..8584,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 34,
        span: 8584..8585,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 36,
        span: 8586..8587,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 37,
        span: 8586..8588,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 336,
        column: 41,
        span: 8589..8592,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 336,
        column: 43,
        span: 8593..8594,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 336,
        column: 46,
        span: 8594..8597,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 336,
        column: 49,
        span: 8598..8600,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 51,
        span: 8600..8602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 52,
        span: 8602..8603,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 336,
        column: 53,
        span: 8603..8604,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 336,
        column: 54,
        span: 8604..8605,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 336,
        column: 0,
        span: 8605..8607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 337,
        column: 7,
        span: 8608..8614,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 337,
        column: 8,
        span: 8614..8615,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 337,
        column: 11,
        span: 8615..8618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 337,
        column: 13,
        span: 8619..8620,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 337,
        column: 17,
        span: 8621..8624,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 337,
        column: 19,
        span: 8625..8626,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 337,
        column: 23,
        span: 8627..8630,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 337,
        column: 25,
        span: 8631..8632,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 337,
        column: 29,
        span: 8633..8636,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 337,
        column: 31,
        span: 8637..8638,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 337,
        column: 33,
        span: 8638..8640,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 337,
        column: 34,
        span: 8639..8641,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 337,
        column: 35,
        span: 8641..8642,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 339,
        column: 2,
        span: 8644..8645,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 339,
        column: 4,
        span: 8646..8647,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 339,
        column: 0,
        span: 8647..8650,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 340,
        column: 2,
        span: 8651..8652,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 3,
        span: 8652..8653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 340,
        column: 5,
        span: 8654..8655,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 6,
        span: 8655..8656,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 340,
        column: 8,
        span: 8657..8658,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 340,
        column: 9,
        span: 8658..8659,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 340,
        column: 11,
        span: 8660..8661,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 340,
        column: 13,
        span: 8662..8663,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 340,
        column: 15,
        span: 8664..8665,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 340,
        column: 16,
        span: 8665..8666,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 340,
        column: 17,
        span: 8666..8667,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 341,
        column: 7,
        span: 8668..8674,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 341,
        column: 8,
        span: 8674..8675,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 341,
        column: 9,
        span: 8675..8676,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 11,
        span: 8676..8678,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 13,
        span: 8677..8680,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 341,
        column: 17,
        span: 8681..8684,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 341,
        column: 19,
        span: 8685..8686,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 21,
        span: 8686..8688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 23,
        span: 8687..8690,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 341,
        column: 27,
        span: 8691..8694,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 341,
        column: 29,
        span: 8695..8696,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 31,
        span: 8696..8698,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 341,
        column: 33,
        span: 8697..8700,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 341,
        column: 37,
        span: 8701..8704,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "d",
        ),
        line: 341,
        column: 39,
        span: 8705..8706,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 341,
        column: 41,
        span: 8706..8708,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 341,
        column: 44,
        span: 8708..8711,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 341,
        column: 45,
        span: 8711..8712,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 342,
        column: 2,
        span: 8713..8714,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 3,
        span: 8714..8715,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 342,
        column: 4,
        span: 8715..8716,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 342,
        column: 6,
        span: 8717..8718,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 342,
        column: 8,
        span: 8719..8720,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 9,
        span: 8720..8721,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 10,
        span: 8721..8722,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 11,
        span: 8722..8723,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 13,
        span: 8723..8725,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 14,
        span: 8725..8726,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 16,
        span: 8726..8728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 17,
        span: 8728..8729,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 342,
        column: 19,
        span: 8729..8731,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 342,
        column: 20,
        span: 8731..8732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 342,
        column: 22,
        span: 8733..8734,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 342,
        column: 23,
        span: 8734..8735,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 342,
        column: 24,
        span: 8735..8736,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 343,
        column: 7,
        span: 8737..8743,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 343,
        column: 8,
        span: 8743..8744,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 343,
        column: 9,
        span: 8744..8745,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 343,
        column: 11,
        span: 8745..8747,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
        column: 13,
        span: 8746..8749,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 343,
        column: 17,
        span: 8750..8753,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 343,
        column: 19,
        span: 8754..8755,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 343,
        column: 21,
        span: 8755..8757,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 343,
        column: 22,
        span: 8756..8758,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 343,
        column: 23,
        span: 8758..8759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 345,
        column: 7,
        span: 8761..8767,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 345,
        column: 8,
        span: 8767..8768,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 345,
        column: 9,
        span: 8768..8769,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 345,
        column: 10,
        span: 8769..8770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 345,
        column: 11,
        span: 8770..8771,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 345,
        column: 14,
        span: 8772..8774,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 345,
        column: 20,
        span: 8775..8780,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 345,
        column: 24,
        span: 8781..8784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 345,
        column: 26,
        span: 8785..8786,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 345,
        column: 27,
        span: 8786..8787,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 345,
        column: 28,
        span: 8787..8788,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 345,
        column: 31,
        span: 8789..8791,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 345,
        column: 36,
        span: 8792..8796,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 345,
        column: 37,
        span: 8796..8797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 346,
        column: 7,
        span: 8798..8804,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 8,
        span: 8804..8805,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 346,
        column: 9,
        span: 8805..8806,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 11,
        span: 8805..8808,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 346,
        column: 15,
        span: 8809..8812,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 17,
        span: 8812..8814,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 18,
        span: 8814..8815,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 346,
        column: 21,
        span: 8816..8818,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 346,
        column: 23,
        span: 8818..8820,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 346,
        column: 24,
        span: 8820..8821,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 347,
        column: 7,
        span: 8822..8828,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 8,
        span: 8828..8829,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 347,
        column: 9,
        span: 8829..8830,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 11,
        span: 8829..8832,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 347,
        column: 14,
        span: 8833..8835,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 16,
        span: 8835..8837,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 17,
        span: 8837..8838,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 347,
        column: 20,
        span: 8839..8841,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 347,
        column: 23,
        span: 8841..8844,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 347,
        column: 24,
        span: 8844..8845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
        column: 7,
        span: 8846..8852,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 8,
        span: 8852..8853,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 9,
        span: 8853..8854,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 11,
        span: 8853..8856,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 348,
        column: 14,
        span: 8857..8859,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 348,
        column: 21,
        span: 8860..8866,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 348,
        column: 22,
        span: 8866..8867,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 348,
        column: 25,
        span: 8867..8870,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 26,
        span: 8870..8871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 27,
        span: 8871..8872,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 348,
        column: 30,
        span: 8873..8875,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 348,
        column: 33,
        span: 8875..8878,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 348,
        column: 34,
        span: 8878..8879,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 349,
        column: 7,
        span: 8880..8886,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 8,
        span: 8886..8887,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 349,
        column: 11,
        span: 8887..8890,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 13,
        span: 8891..8892,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 349,
        column: 16,
        span: 8892..8895,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 349,
        column: 20,
        span: 8896..8899,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 349,
        column: 27,
        span: 8900..8906,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 349,
        column: 28,
        span: 8906..8907,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 349,
        column: 31,
        span: 8907..8910,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 32,
        span: 8910..8911,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 33,
        span: 8911..8912,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 349,
        column: 34,
        span: 8912..8913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 350,
        column: 7,
        span: 8914..8920,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 8,
        span: 8920..8921,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 350,
        column: 9,
        span: 8921..8922,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 350,
        column: 12,
        span: 8922..8925,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 350,
        column: 15,
        span: 8926..8928,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 350,
        column: 21,
        span: 8929..8934,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 22,
        span: 8934..8935,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 350,
        column: 25,
        span: 8936..8938,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 350,
        column: 31,
        span: 8939..8944,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 350,
        column: 32,
        span: 8944..8945,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 351,
        column: 7,
        span: 8946..8952,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 8,
        span: 8952..8953,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 351,
        column: 9,
        span: 8953..8954,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 351,
        column: 12,
        span: 8954..8957,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 351,
        column: 16,
        span: 8958..8961,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 351,
        column: 19,
        span: 8961..8964,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 20,
        span: 8964..8965,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 351,
        column: 23,
        span: 8966..8968,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 351,
        column: 27,
        span: 8969..8972,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 351,
        column: 28,
        span: 8972..8973,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 352,
        column: 7,
        span: 8974..8980,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 8,
        span: 8980..8981,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 352,
        column: 9,
        span: 8981..8982,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 352,
        column: 14,
        span: 8982..8987,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 352,
        column: 18,
        span: 8988..8991,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 352,
        column: 21,
        span: 8991..8994,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 22,
        span: 8994..8995,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 352,
        column: 25,
        span: 8996..8998,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 352,
        column: 31,
        span: 8999..9004,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 352,
        column: 32,
        span: 9004..9005,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 353,
        column: 7,
        span: 9006..9012,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 8,
        span: 9012..9013,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 353,
        column: 9,
        span: 9013..9014,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 353,
        column: 13,
        span: 9014..9018,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 353,
        column: 16,
        span: 9019..9021,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 353,
        column: 19,
        span: 9021..9024,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 20,
        span: 9024..9025,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 353,
        column: 23,
        span: 9026..9028,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 353,
        column: 28,
        span: 9029..9033,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 353,
        column: 29,
        span: 9033..9034,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 354,
        column: 7,
        span: 9035..9041,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 8,
        span: 9041..9042,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 354,
        column: 9,
        span: 9042..9043,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 354,
        column: 14,
        span: 9043..9048,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 354,
        column: 17,
        span: 9049..9051,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 20,
        span: 9051..9054,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 21,
        span: 9054..9055,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 354,
        column: 24,
        span: 9056..9058,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 354,
        column: 27,
        span: 9058..9061,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 354,
        column: 28,
        span: 9061..9062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 355,
        column: 7,
        span: 9063..9069,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 355,
        column: 8,
        span: 9069..9070,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 355,
        column: 13,
        span: 9070..9075,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 355,
        column: 16,
        span: 9076..9078,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 355,
        column: 20,
        span: 9079..9082,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 355,
        column: 21,
        span: 9082..9083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 356,
        column: 7,
        span: 9084..9090,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 356,
        column: 8,
        span: 9090..9091,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 356,
        column: 11,
        span: 9091..9094,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 356,
        column: 14,
        span: 9095..9097,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 356,
        column: 20,
        span: 9098..9103,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 356,
        column: 21,
        span: 9103..9104,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 357,
        column: 7,
        span: 9105..9111,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 357,
        column: 8,
        span: 9111..9112,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 357,
        column: 11,
        span: 9112..9115,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 357,
        column: 15,
        span: 9116..9119,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 357,
        column: 18,
        span: 9120..9122,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 357,
        column: 23,
        span: 9123..9127,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 357,
        column: 24,
        span: 9127..9128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 358,
        column: 7,
        span: 9129..9135,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 358,
        column: 8,
        span: 9135..9136,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 358,
        column: 11,
        span: 9136..9139,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 358,
        column: 15,
        span: 9140..9143,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 358,
        column: 19,
        span: 9144..9147,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 358,
        column: 22,
        span: 9148..9150,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 358,
        column: 28,
        span: 9151..9156,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 358,
        column: 29,
        span: 9156..9157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 359,
        column: 7,
        span: 9158..9164,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 359,
        column: 8,
        span: 9164..9165,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 359,
        column: 11,
        span: 9165..9168,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 359,
        column: 15,
        span: 9169..9172,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 359,
        column: 17,
        span: 9172..9174,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 359,
        column: 20,
        span: 9175..9177,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 359,
        column: 25,
        span: 9178..9182,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 359,
        column: 26,
        span: 9182..9183,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 360,
        column: 7,
        span: 9184..9190,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 360,
        column: 8,
        span: 9190..9191,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 360,
        column: 11,
        span: 9191..9194,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 360,
        column: 15,
        span: 9195..9198,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 360,
        column: 17,
        span: 9199..9200,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 360,
        column: 20,
        span: 9201..9203,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 360,
        column: 25,
        span: 9204..9208,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 360,
        column: 26,
        span: 9208..9209,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 361,
        column: 7,
        span: 9210..9216,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 8,
        span: 9216..9217,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 361,
        column: 11,
        span: 9217..9220,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 361,
        column: 15,
        span: 9221..9224,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 361,
        column: 17,
        span: 9225..9226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 361,
        column: 18,
        span: 9225..9227,
    },
    Token {
        kind: Or,
        lexeme: Symbol(
            "or",
        ),
        line: 361,
        column: 21,
        span: 9228..9230,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 361,
        column: 25,
        span: 9231..9234,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 26,
        span: 9234..9235,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 361,
        column: 29,
        span: 9236..9238,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 361,
        column: 34,
        span: 9239..9243,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 361,
        column: 35,
        span: 9243..9244,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 362,
        column: 7,
        span: 9245..9251,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 8,
        span: 9251..9252,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 362,
        column: 11,
        span: 9252..9255,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 362,
        column: 15,
        span: 9256..9259,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 362,
        column: 17,
        span: 9260..9261,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 362,
        column: 20,
        span: 9261..9264,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 362,
        column: 24,
        span: 9265..9268,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "56",
                    after_decimal: "",
                },
            ),
        ),
        line: 362,
        column: 27,
        span: 9268..9271,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 28,
        span: 9271..9272,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 362,
        column: 31,
        span: 9273..9275,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 362,
        column: 37,
        span: 9276..9281,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 362,
        column: 38,
        span: 9281..9282,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 363,
        column: 7,
        span: 9283..9289,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 8,
        span: 9289..9290,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 363,
        column: 11,
        span: 9290..9293,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 363,
        column: 15,
        span: 9294..9297,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 363,
        column: 17,
        span: 9298..9299,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 363,
        column: 20,
        span: 9299..9302,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 363,
        column: 24,
        span: 9303..9306,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 363,
        column: 29,
        span: 9307..9311,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 30,
        span: 9311..9312,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 363,
        column: 33,
        span: 9313..9315,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 363,
        column: 39,
        span: 9316..9321,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 363,
        column: 40,
        span: 9321..9322,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 364,
        column: 7,
        span: 9323..9329,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 364,
        column: 8,
        span: 9329..9330,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 364,
        column: 11,
        span: 9330..9333,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 364,
        column: 14,
        span: 9333..9336,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 364,
        column: 17,
        span: 9337..9339,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 364,
        column: 23,
        span: 9340..9345,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 364,
        column: 24,
        span: 9345..9346,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 365,
        column: 7,
        span: 9347..9353,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 365,
        column: 8,
        span: 9353..9354,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 365,
        column: 11,
        span: 9354..9357,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 365,
        column: 13,
        span: 9358..9359,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 365,
        column: 14,
        span: 9359..9360,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 365,
        column: 17,
        span: 9361..9363,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 365,
        column: 23,
        span: 9364..9369,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 365,
        column: 24,
        span: 9369..9370,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 366,
        column: 7,
        span: 9371..9377,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 366,
        column: 8,
        span: 9377..9378,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 366,
        column: 11,
        span: 9378..9381,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".5",
                },
            ),
        ),
        line: 366,
        column: 15,
        span: 9381..9385,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 366,
        column: 18,
        span: 9386..9388,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 366,
        column: 24,
        span: 9389..9394,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 366,
        column: 25,
        span: 9394..9395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 367,
        column: 7,
        span: 9396..9402,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 367,
        column: 8,
        span: 9402..9403,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 367,
        column: 11,
        span: 9403..9406,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"x\"",
        ),
        line: 367,
        column: 15,
        span: 9407..9410,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 367,
        column: 18,
        span: 9411..9413,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 367,
        column: 24,
        span: 9414..9419,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 367,
        column: 25,
        span: 9419..9420,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 369,
        column: 7,
        span: 9422..9428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 369,
        column: 8,
        span: 9428..9429,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 369,
        column: 9,
        span: 9429..9430,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 369,
        column: 10,
        span: 9430..9431,
    },
    Token {
        kind: NotEquals,
        lexeme: Symbol(
            "~=",
        ),
        line: 369,
        column: 13,
        span: 9432..9434,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 369,
        column: 15,
        span: 9435..9436,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 369,
        column: 16,
        span: 9436..9437,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 369,
        column: 17,
        span: 9437..9438,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 370,
        column: 6,
        span: 9439..9444,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 370,
        column: 7,
        span: 9444..9445,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'+'",
        ),
        line: 370,
        column: 10,
        span: 9445..9448,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 370,
        column: 11,
        span: 9448..9449,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 372,
        column: 2,
        span: 9451..9452,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 372,
        column: 4,
        span: 9453..9454,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 372,
        column: 6,
        span: 9455..9456,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 372,
        column: 7,
        span: 9456..9457,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 373,
        column: 2,
        span: 9458..9459,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 373,
        column: 3,
        span: 9459..9460,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 373,
        column: 7,
        span: 9460..9464,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 373,
        column: 8,
        span: 9464..9465,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 373,
        column: 10,
        span: 9466..9467,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 373,
        column: 0,
        span: 9467..9470,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 374,
        column: 2,
        span: 9471..9472,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 374,
        column: 3,
        span: 9472..9473,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 374,
        column: 8,
        span: 9473..9478,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 374,
        column: 9,
        span: 9478..9479,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 374,
        column: 11,
        span: 9480..9481,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 374,
        column: 0,
        span: 9481..9484,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 375,
        column: 7,
        span: 9485..9491,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 375,
        column: 8,
        span: 9491..9492,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 375,
        column: 9,
        span: 9492..9493,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 375,
        column: 10,
        span: 9493..9494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 11,
        span: 9493..9495,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 375,
        column: 12,
        span: 9495..9496,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 13,
        span: 9495..9497,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 375,
        column: 14,
        span: 9497..9498,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 375,
        column: 17,
        span: 9499..9501,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 20,
        span: 9501..9504,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 375,
        column: 24,
        span: 9505..9508,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 375,
        column: 26,
        span: 9509..9510,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 375,
        column: 27,
        span: 9510..9511,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 28,
        span: 9510..9512,
    },
    Token {
        kind: GreaterThan,
        lexeme: Symbol(
            ">",
        ),
        line: 375,
        column: 29,
        span: 9512..9513,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 30,
        span: 9512..9514,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 375,
        column: 31,
        span: 9514..9515,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 375,
        column: 34,
        span: 9516..9518,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 375,
        column: 37,
        span: 9518..9521,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 375,
        column: 38,
        span: 9521..9522,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 377,
        column: 9,
        span: 9524..9532,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 377,
        column: 11,
        span: 9533..9534,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 377,
        column: 12,
        span: 9534..9535,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 377,
        column: 13,
        span: 9535..9536,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 377,
        column: 14,
        span: 9536..9537,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 377,
        column: 21,
        span: 9538..9544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 377,
        column: 23,
        span: 9545..9546,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 377,
        column: 0,
        span: 9547..9550,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 379,
        column: 6,
        span: 9552..9557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 379,
        column: 8,
        span: 9558..9559,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 379,
        column: 10,
        span: 9560..9561,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 379,
        column: 12,
        span: 9562..9563,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 379,
        column: 13,
        span: 9563..9564,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 380,
        column: 4,
        span: 9565..9568,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 380,
        column: 6,
        span: 9569..9570,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 7,
        span: 9570..9571,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 11,
        span: 9570..9575,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 12,
        span: 9575..9576,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 380,
        column: 13,
        span: 9576..9577,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 17,
        span: 9576..9581,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 380,
        column: 18,
        span: 9581..9582,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 380,
        column: 19,
        span: 9582..9583,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 380,
        column: 20,
        span: 9582..9584,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 380,
        column: 23,
        span: 9585..9587,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 380,
        column: 25,
        span: 9588..9589,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 380,
        column: 26,
        span: 9589..9590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 380,
        column: 27,
        span: 9590..9591,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 380,
        column: 29,
        span: 9592..9593,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 380,
        column: 33,
        span: 9593..9597,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 380,
        column: 34,
        span: 9597..9598,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 380,
        column: 36,
        span: 9599..9600,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 380,
        column: 38,
        span: 9601..9602,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 380,
        column: 39,
        span: 9602..9603,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 380,
        column: 0,
        span: 9604..9607,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 381,
        column: 2,
        span: 9608..9609,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 381,
        column: 3,
        span: 9609..9610,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 381,
        column: 8,
        span: 9609..9615,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 381,
        column: 9,
        span: 9615..9616,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 381,
        column: 11,
        span: 9617..9618,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"alo\"",
        ),
        line: 381,
        column: 17,
        span: 9619..9624,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 381,
        column: 18,
        span: 9624..9625,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 381,
        column: 20,
        span: 9626..9627,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 381,
        column: 21,
        span: 9627..9628,
    },
    Token {
        kind: True,
        lexeme: Symbol(
            "true",
        ),
        line: 381,
        column: 25,
        span: 9628..9632,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 381,
        column: 26,
        span: 9632..9633,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 381,
        column: 28,
        span: 9634..9635,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
        column: 31,
        span: 9635..9638,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 381,
        column: 32,
        span: 9638..9639,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 381,
        column: 34,
        span: 9640..9641,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 381,
        column: 35,
        span: 9641..9642,
    },
    Token {
        kind: False,
        lexeme: Symbol(
            "false",
        ),
        line: 381,
        column: 40,
        span: 9642..9647,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 381,
        column: 41,
        span: 9647..9648,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 381,
        column: 43,
        span: 9649..9650,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 381,
        column: 0,
        span: 9650..9653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 382,
        column: 7,
        span: 9654..9660,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 382,
        column: 8,
        span: 9660..9661,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 382,
        column: 9,
        span: 9661..9662,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 382,
        column: 10,
        span: 9662..9663,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Scientific {
                mantissa: Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
                exponent: "30",
            },
        ),
        line: 382,
        column: 15,
        span: 9662..9668,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 382,
        column: 16,
        span: 9668..9669,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 382,
        column: 19,
        span: 9670..9672,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 382,
        column: 25,
        span: 9673..9678,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 382,
        column: 29,
        span: 9679..9682,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 382,
        column: 31,
        span: 9683..9684,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 382,
        column: 32,
        span: 9684..9685,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 382,
        column: 35,
        span: 9685..9688,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 37,
        span: 9688..9690,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 382,
        column: 38,
        span: 9690..9691,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 382,
        column: 41,
        span: 9692..9694,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 44,
        span: 9694..9697,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 382,
        column: 48,
        span: 9698..9701,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 382,
        column: 50,
        span: 9702..9703,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 382,
        column: 51,
        span: 9703..9704,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 53,
        span: 9703..9706,
    },
    Token {
        kind: LessThan,
        lexeme: Symbol(
            "<",
        ),
        line: 382,
        column: 54,
        span: 9706..9707,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 56,
        span: 9706..9709,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 382,
        column: 57,
        span: 9709..9710,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 382,
        column: 60,
        span: 9711..9713,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 382,
        column: 63,
        span: 9713..9716,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 382,
        column: 64,
        span: 9716..9717,
    },
    Token {
        kind: For,
        lexeme: Symbol(
            "for",
        ),
        line: 383,
        column: 4,
        span: 9718..9721,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 383,
        column: 6,
        span: 9722..9723,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 383,
        column: 7,
        span: 9723..9724,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 11,
        span: 9723..9728,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 12,
        span: 9728..9729,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 383,
        column: 13,
        span: 9729..9730,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3000",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 17,
        span: 9729..9734,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 383,
        column: 18,
        span: 9734..9735,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 383,
        column: 19,
        span: 9735..9736,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 383,
        column: 20,
        span: 9735..9737,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 383,
        column: 23,
        span: 9738..9740,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 383,
        column: 30,
        span: 9741..9747,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 383,
        column: 31,
        span: 9747..9748,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 383,
        column: 32,
        span: 9748..9749,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 383,
        column: 33,
        span: 9749..9750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 383,
        column: 34,
        span: 9750..9751,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 383,
        column: 35,
        span: 9751..9752,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 383,
        column: 38,
        span: 9753..9755,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 383,
        column: 40,
        span: 9756..9757,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 383,
        column: 41,
        span: 9757..9758,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 383,
        column: 42,
        span: 9758..9759,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 383,
        column: 0,
        span: 9760..9763,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 384,
        column: 2,
        span: 9764..9765,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 384,
        column: 3,
        span: 9765..9766,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 384,
        column: 8,
        span: 9766..9771,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 384,
        column: 9,
        span: 9771..9772,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 384,
        column: 11,
        span: 9773..9774,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 384,
        column: 0,
        span: 9775..9781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 385,
        column: 2,
        span: 9782..9783,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 385,
        column: 3,
        span: 9783..9784,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 385,
        column: 4,
        span: 9784..9785,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 385,
        column: 5,
        span: 9785..9786,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 385,
        column: 7,
        span: 9787..9788,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 385,
        column: 0,
        span: 9789..9794,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 386,
        column: 2,
        span: 9795..9796,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 386,
        column: 3,
        span: 9796..9797,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 386,
        column: 4,
        span: 9797..9798,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 386,
        column: 5,
        span: 9798..9799,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 386,
        column: 7,
        span: 9800..9801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 386,
        column: 0,
        span: 9802..9803,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 7,
        span: 9804..9810,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 387,
        column: 8,
        span: 9810..9811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 387,
        column: 9,
        span: 9811..9812,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 387,
        column: 10,
        span: 9812..9813,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 387,
        column: 11,
        span: 9813..9814,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 387,
        column: 12,
        span: 9814..9815,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 387,
        column: 13,
        span: 9815..9816,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 387,
        column: 14,
        span: 9816..9817,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 387,
        column: 15,
        span: 9817..9818,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 387,
        column: 16,
        span: 9818..9819,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 387,
        column: 17,
        span: 9819..9820,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 387,
        column: 18,
        span: 9820..9821,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 387,
        column: 19,
        span: 9821..9822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 387,
        column: 20,
        span: 9822..9823,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 387,
        column: 21,
        span: 9823..9824,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 387,
        column: 22,
        span: 9824..9825,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 387,
        column: 27,
        span: 9825..9830,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 387,
        column: 28,
        span: 9830..9831,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 387,
        column: 31,
        span: 9832..9834,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 387,
        column: 38,
        span: 9835..9841,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 387,
        column: 39,
        span: 9841..9842,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 388,
        column: 2,
        span: 9843..9844,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 388,
        column: 3,
        span: 9844..9845,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 388,
        column: 8,
        span: 9845..9850,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 388,
        column: 9,
        span: 9850..9851,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 388,
        column: 10,
        span: 9851..9852,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 388,
        column: 11,
        span: 9852..9853,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 388,
        column: 12,
        span: 9853..9854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 388,
        column: 13,
        span: 9854..9855,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 388,
        column: 14,
        span: 9855..9856,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 388,
        column: 15,
        span: 9856..9857,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 388,
        column: 16,
        span: 9857..9858,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 388,
        column: 17,
        span: 9858..9859,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 388,
        column: 20,
        span: 9860..9862,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 388,
        column: 22,
        span: 9863..9864,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 388,
        column: 23,
        span: 9864..9865,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 388,
        column: 28,
        span: 9865..9870,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 388,
        column: 29,
        span: 9870..9871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 388,
        column: 30,
        span: 9871..9872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 389,
        column: 7,
        span: 9873..9879,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 8,
        span: 9879..9880,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 389,
        column: 11,
        span: 9880..9883,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 389,
        column: 17,
        span: 9884..9889,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 18,
        span: 9889..9890,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 389,
        column: 26,
        span: 9890..9898,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 389,
        column: 28,
        span: 9899..9900,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 29,
        span: 9900..9901,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 389,
        column: 35,
        span: 9902..9907,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 389,
        column: 37,
        span: 9908..9909,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 389,
        column: 39,
        span: 9910..9911,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 389,
        column: 41,
        span: 9912..9913,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 389,
        column: 42,
        span: 9913..9914,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 389,
        column: 43,
        span: 9914..9915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 389,
        column: 45,
        span: 9916..9917,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 389,
        column: 46,
        span: 9917..9918,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 389,
        column: 49,
        span: 9918..9921,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 389,
        column: 50,
        span: 9921..9922,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 389,
        column: 52,
        span: 9923..9924,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 389,
        column: 55,
        span: 9924..9927,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 389,
        column: 59,
        span: 9928..9931,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 60,
        span: 9931..9932,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 389,
        column: 61,
        span: 9932..9933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 390,
        column: 7,
        span: 9934..9940,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 8,
        span: 9940..9941,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 390,
        column: 11,
        span: 9941..9944,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "pcall",
        ),
        line: 390,
        column: 17,
        span: 9945..9950,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 18,
        span: 9950..9951,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 390,
        column: 26,
        span: 9951..9959,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 390,
        column: 28,
        span: 9960..9961,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 29,
        span: 9961..9962,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 390,
        column: 35,
        span: 9963..9968,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 390,
        column: 37,
        span: 9969..9970,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 390,
        column: 39,
        span: 9971..9972,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 390,
        column: 41,
        span: 9973..9974,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 390,
        column: 42,
        span: 9974..9975,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 390,
        column: 45,
        span: 9975..9978,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 390,
        column: 46,
        span: 9978..9979,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 390,
        column: 48,
        span: 9980..9981,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 390,
        column: 51,
        span: 9981..9984,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 390,
        column: 52,
        span: 9984..9985,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 390,
        column: 56,
        span: 9986..9989,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 57,
        span: 9989..9990,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 390,
        column: 58,
        span: 9990..9991,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 391,
        column: 7,
        span: 9992..9998,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 391,
        column: 8,
        span: 9998..9999,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 391,
        column: 9,
        span: 9999..10000,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 391,
        column: 10,
        span: 10000..10001,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 391,
        column: 13,
        span: 10001..10004,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 391,
        column: 14,
        span: 10004..10005,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 391,
        column: 17,
        span: 10006..10008,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 391,
        column: 21,
        span: 10009..10012,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 391,
        column: 22,
        span: 10012..10013,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 392,
        column: 2,
        span: 10014..10015,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 392,
        column: 4,
        span: 10016..10017,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 392,
        column: 0,
        span: 10018..10021,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 394,
        column: 2,
        span: 10023..10024,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 4,
        span: 10025..10026,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 394,
        column: 6,
        span: 10027..10028,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 8,
        span: 10027..10030,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 9,
        span: 10030..10031,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "9",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 10,
        span: 10030..10032,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 11,
        span: 10032..10033,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "8",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 12,
        span: 10032..10034,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 13,
        span: 10034..10035,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "7",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 14,
        span: 10034..10036,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 15,
        span: 10036..10037,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 16,
        span: 10036..10038,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 17,
        span: 10038..10039,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "5",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 18,
        span: 10038..10040,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 19,
        span: 10040..10041,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "4",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 20,
        span: 10040..10042,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 21,
        span: 10042..10043,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 22,
        span: 10042..10044,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 23,
        span: 10044..10045,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 24,
        span: 10044..10046,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 394,
        column: 25,
        span: 10046..10047,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 394,
        column: 27,
        span: 10048..10049,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 394,
        column: 28,
        span: 10049..10050,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 394,
        column: 29,
        span: 10049..10051,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 394,
        column: 30,
        span: 10051..10052,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 31,
        span: 10052..10053,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 394,
        column: 34,
        span: 10053..10056,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 35,
        span: 10056..10057,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 394,
        column: 37,
        span: 10058..10059,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 394,
        column: 38,
        span: 10059..10060,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 394,
        column: 39,
        span: 10060..10061,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 40,
        span: 10061..10062,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 394,
        column: 45,
        span: 10062..10067,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 46,
        span: 10067..10068,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 394,
        column: 48,
        span: 10069..10070,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 49,
        span: 10070..10071,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 394,
        column: 52,
        span: 10071..10074,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 394,
        column: 53,
        span: 10074..10075,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 394,
        column: 55,
        span: 10076..10077,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 394,
        column: 56,
        span: 10077..10078,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'ab'",
        ),
        line: 394,
        column: 60,
        span: 10078..10082,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 394,
        column: 61,
        span: 10082..10083,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 2,
        span: 10084..10085,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 3,
        span: 10085..10086,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 5,
        span: 10087..10088,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 395,
        column: 6,
        span: 10088..10089,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 395,
        column: 7,
        span: 10089..10090,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 8,
        span: 10090..10091,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 10,
        span: 10092..10093,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 395,
        column: 11,
        span: 10093..10094,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 395,
        column: 12,
        span: 10094..10095,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 395,
        column: 14,
        span: 10096..10097,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 16,
        span: 10098..10099,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 395,
        column: 17,
        span: 10099..10100,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 395,
        column: 19,
        span: 10101..10102,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 395,
        column: 20,
        span: 10102..10103,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 395,
        column: 21,
        span: 10103..10104,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 395,
        column: 22,
        span: 10103..10105,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 395,
        column: 23,
        span: 10105..10106,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 396,
        column: 7,
        span: 10107..10113,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 396,
        column: 8,
        span: 10113..10114,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 396,
        column: 9,
        span: 10114..10115,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 396,
        column: 10,
        span: 10115..10116,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 11,
        span: 10115..10117,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 396,
        column: 12,
        span: 10117..10118,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 396,
        column: 14,
        span: 10118..10120,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 16,
        span: 10119..10122,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 396,
        column: 20,
        span: 10123..10126,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 396,
        column: 22,
        span: 10127..10128,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 396,
        column: 23,
        span: 10128..10129,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 396,
        column: 24,
        span: 10129..10130,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 396,
        column: 25,
        span: 10129..10131,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 396,
        column: 26,
        span: 10131..10132,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 396,
        column: 28,
        span: 10132..10134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 396,
        column: 29,
        span: 10134..10135,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 396,
        column: 30,
        span: 10135..10136,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 396,
        column: 31,
        span: 10136..10137,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 396,
        column: 35,
        span: 10138..10141,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 396,
        column: 37,
        span: 10142..10143,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 396,
        column: 38,
        span: 10143..10144,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 396,
        column: 39,
        span: 10144..10145,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 396,
        column: 40,
        span: 10145..10146,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 396,
        column: 42,
        span: 10146..10148,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 396,
        column: 47,
        span: 10148..10153,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 396,
        column: 51,
        span: 10154..10157,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 396,
        column: 53,
        span: 10158..10159,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 396,
        column: 54,
        span: 10159..10160,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "x",
        ),
        line: 396,
        column: 55,
        span: 10160..10161,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 396,
        column: 57,
        span: 10161..10163,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 396,
        column: 60,
        span: 10163..10166,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 396,
        column: 64,
        span: 10167..10170,
    },
    Token {
        kind: Not,
        lexeme: Symbol(
            "not",
        ),
        line: 396,
        column: 68,
        span: 10171..10174,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 396,
        column: 70,
        span: 10175..10176,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 396,
        column: 71,
        span: 10176..10177,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "y",
        ),
        line: 396,
        column: 72,
        span: 10177..10178,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 396,
        column: 73,
        span: 10178..10179,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 397,
        column: 2,
        span: 10180..10181,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 397,
        column: 3,
        span: 10181..10182,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 4,
        span: 10181..10183,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 397,
        column: 5,
        span: 10183..10184,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 6,
        span: 10184..10185,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 397,
        column: 8,
        span: 10186..10187,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 9,
        span: 10187..10188,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 397,
        column: 10,
        span: 10188..10189,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 11,
        span: 10189..10190,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 397,
        column: 12,
        span: 10190..10191,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 13,
        span: 10190..10192,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 397,
        column: 14,
        span: 10192..10193,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 15,
        span: 10193..10194,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 397,
        column: 17,
        span: 10195..10196,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 18,
        span: 10196..10197,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 397,
        column: 20,
        span: 10198..10199,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 397,
        column: 22,
        span: 10200..10201,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 397,
        column: 24,
        span: 10202..10203,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 397,
        column: 25,
        span: 10203..10204,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'alo'",
        ),
        line: 397,
        column: 30,
        span: 10204..10209,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 397,
        column: 31,
        span: 10209..10210,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 397,
        column: 32,
        span: 10210..10211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 397,
        column: 38,
        span: 10211..10217,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 397,
        column: 39,
        span: 10217..10218,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 40,
        span: 10218..10219,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 43,
        span: 10219..10222,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 44,
        span: 10222..10223,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 397,
        column: 46,
        span: 10224..10225,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 397,
        column: 47,
        span: 10225..10226,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 48,
        span: 10225..10227,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 397,
        column: 49,
        span: 10227..10228,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 50,
        span: 10228..10229,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 397,
        column: 52,
        span: 10230..10231,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 397,
        column: 53,
        span: 10231..10232,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 397,
        column: 54,
        span: 10232..10233,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 397,
        column: 55,
        span: 10233..10234,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 56,
        span: 10234..10235,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "6",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 58,
        span: 10235..10237,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 59,
        span: 10237..10238,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 62,
        span: 10238..10241,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 63,
        span: 10241..10242,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "23",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 66,
        span: 10242..10245,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 67,
        span: 10245..10246,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "f",
        ),
        line: 397,
        column: 69,
        span: 10247..10248,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 397,
        column: 70,
        span: 10248..10249,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 397,
        column: 71,
        span: 10249..10250,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 397,
        column: 72,
        span: 10250..10251,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 397,
        column: 73,
        span: 10251..10252,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 397,
        column: 0,
        span: 10252..10254,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 398,
        column: 2,
        span: 10255..10256,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 398,
        column: 3,
        span: 10256..10257,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 4,
        span: 10256..10258,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 398,
        column: 5,
        span: 10258..10259,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 398,
        column: 6,
        span: 10259..10260,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "alo",
        ),
        line: 398,
        column: 9,
        span: 10260..10263,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 398,
        column: 10,
        span: 10263..10264,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 398,
        column: 11,
        span: 10264..10265,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 398,
        column: 12,
        span: 10265..10266,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 13,
        span: 10265..10267,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 398,
        column: 14,
        span: 10267..10268,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 16,
        span: 10268..10270,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 18,
        span: 10269..10272,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 398,
        column: 22,
        span: 10273..10276,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 398,
        column: 24,
        span: 10277..10278,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 26,
        span: 10278..10280,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 398,
        column: 28,
        span: 10279..10282,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 398,
        column: 32,
        span: 10283..10286,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "c",
        ),
        line: 398,
        column: 34,
        span: 10287..10288,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 398,
        column: 36,
        span: 10288..10290,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 398,
        column: 41,
        span: 10290..10295,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 398,
        column: 42,
        span: 10295..10296,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 404,
        column: 6,
        span: 10397..10402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 404,
        column: 13,
        span: 10403..10409,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 404,
        column: 15,
        span: 10410..10411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 404,
        column: 20,
        span: 10412..10416,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 404,
        column: 21,
        span: 10416..10417,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxinteger",
        ),
        line: 404,
        column: 0,
        span: 10417..10427,
    },
    Token {
        kind: While,
        lexeme: Symbol(
            "while",
        ),
        line: 406,
        column: 6,
        span: 10429..10434,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 406,
        column: 13,
        span: 10435..10441,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 406,
        column: 15,
        span: 10442..10443,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 406,
        column: 19,
        span: 10443..10447,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 406,
        column: 22,
        span: 10448..10450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 406,
        column: 29,
        span: 10451..10457,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 406,
        column: 31,
        span: 10458..10459,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 406,
        column: 35,
        span: 10459..10463,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 406,
        column: 38,
        span: 10464..10466,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 407,
        column: 9,
        span: 10509..10515,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 407,
        column: 11,
        span: 10516..10517,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 407,
        column: 18,
        span: 10518..10524,
    },
    Token {
        kind: FloorDiv,
        lexeme: Symbol(
            "//",
        ),
        line: 407,
        column: 21,
        span: 10525..10527,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 407,
        column: 0,
        span: 10527..10529,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 408,
        column: 0,
        span: 10530..10533,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 410,
        column: 8,
        span: 10535..10542,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 410,
        column: 10,
        span: 10543..10544,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 410,
        column: 17,
        span: 10545..10551,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 410,
        column: 19,
        span: 10552..10553,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "0",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 410,
        column: 23,
        span: 10553..10557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 412,
        column: 7,
        span: 10578..10584,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 8,
        span: 10584..10585,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "math",
        ),
        line: 412,
        column: 12,
        span: 10585..10589,
    },
    Token {
        kind: Dot,
        lexeme: Symbol(
            ".",
        ),
        line: 412,
        column: 13,
        span: 10589..10590,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "type",
        ),
        line: 412,
        column: 17,
        span: 10590..10594,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 412,
        column: 18,
        span: 10594..10595,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 412,
        column: 25,
        span: 10595..10602,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 26,
        span: 10602..10603,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 412,
        column: 29,
        span: 10604..10606,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "\"float\"",
        ),
        line: 412,
        column: 37,
        span: 10607..10614,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 412,
        column: 41,
        span: 10615..10618,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 412,
        column: 49,
        span: 10619..10626,
    },
    Token {
        kind: GreaterThanOrEqual,
        lexeme: Symbol(
            ">=",
        ),
        line: 412,
        column: 52,
        span: 10627..10629,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 412,
        column: 56,
        span: 10629..10633,
    },
    Token {
        kind: Caret,
        lexeme: Symbol(
            "^",
        ),
        line: 412,
        column: 57,
        span: 10633..10634,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 412,
        column: 59,
        span: 10633..10636,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 412,
        column: 60,
        span: 10636..10637,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 2,
        span: 10689..10690,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 415,
        column: 3,
        span: 10690..10691,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 415,
        column: 10,
        span: 10691..10698,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 415,
        column: 11,
        span: 10698..10699,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
        column: 13,
        span: 10700..10701,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 16,
        span: 10701..10704,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 415,
        column: 17,
        span: 10704..10705,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 415,
        column: 19,
        span: 10706..10707,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 415,
        column: 20,
        span: 10707..10708,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 415,
        column: 27,
        span: 10708..10715,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 415,
        column: 29,
        span: 10716..10717,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 415,
        column: 33,
        span: 10717..10721,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 415,
        column: 34,
        span: 10721..10722,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 415,
        column: 36,
        span: 10723..10724,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 415,
        column: 39,
        span: 10724..10727,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 415,
        column: 40,
        span: 10727..10728,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 2,
        span: 10729..10730,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 416,
        column: 3,
        span: 10730..10731,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 416,
        column: 4,
        span: 10731..10732,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 416,
        column: 11,
        span: 10732..10739,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 416,
        column: 12,
        span: 10739..10740,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 416,
        column: 14,
        span: 10741..10742,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
        column: 17,
        span: 10742..10745,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 416,
        column: 18,
        span: 10745..10746,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 416,
        column: 20,
        span: 10747..10748,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 416,
        column: 21,
        span: 10748..10749,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 416,
        column: 22,
        span: 10749..10750,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 416,
        column: 29,
        span: 10750..10757,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 416,
        column: 31,
        span: 10758..10759,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 416,
        column: 35,
        span: 10759..10763,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 416,
        column: 36,
        span: 10763..10764,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 416,
        column: 38,
        span: 10765..10766,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 416,
        column: 41,
        span: 10766..10769,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 416,
        column: 42,
        span: 10769..10770,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 418,
        column: 7,
        span: 10772..10778,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 418,
        column: 8,
        span: 10778..10779,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 418,
        column: 9,
        span: 10779..10780,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 418,
        column: 10,
        span: 10780..10781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 418,
        column: 16,
        span: 10781..10787,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 418,
        column: 17,
        span: 10787..10788,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
        column: 20,
        span: 10789..10791,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 23,
        span: 10791..10794,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 418,
        column: 27,
        span: 10795..10798,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 418,
        column: 29,
        span: 10799..10800,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 418,
        column: 30,
        span: 10800..10801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 418,
        column: 36,
        span: 10801..10807,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 418,
        column: 38,
        span: 10808..10809,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 40,
        span: 10809..10811,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 418,
        column: 41,
        span: 10811..10812,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 418,
        column: 44,
        span: 10813..10815,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 418,
        column: 47,
        span: 10815..10818,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 418,
        column: 0,
        span: 10819..10822,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 419,
        column: 9,
        span: 10830..10831,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 419,
        column: 10,
        span: 10831..10832,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 419,
        column: 11,
        span: 10832..10833,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 419,
        column: 17,
        span: 10833..10839,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 419,
        column: 18,
        span: 10839..10840,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
        column: 21,
        span: 10841..10843,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "12",
                    after_decimal: "",
                },
            ),
        ),
        line: 419,
        column: 24,
        span: 10843..10846,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 419,
        column: 28,
        span: 10847..10850,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 419,
        column: 30,
        span: 10851..10852,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 419,
        column: 31,
        span: 10852..10853,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 419,
        column: 32,
        span: 10853..10854,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 419,
        column: 38,
        span: 10854..10860,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 419,
        column: 40,
        span: 10861..10862,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 419,
        column: 42,
        span: 10862..10864,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 419,
        column: 43,
        span: 10864..10865,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 419,
        column: 46,
        span: 10866..10868,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 419,
        column: 49,
        span: 10868..10871,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 419,
        column: 50,
        span: 10871..10872,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 421,
        column: 2,
        span: 10874..10875,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 421,
        column: 3,
        span: 10875..10876,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 421,
        column: 9,
        span: 10876..10882,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 421,
        column: 10,
        span: 10882..10883,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 421,
        column: 12,
        span: 10884..10885,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 421,
        column: 0,
        span: 10885..10888,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 422,
        column: 2,
        span: 10889..10890,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 422,
        column: 3,
        span: 10890..10891,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 422,
        column: 4,
        span: 10891..10892,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxint",
        ),
        line: 422,
        column: 10,
        span: 10892..10898,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 422,
        column: 11,
        span: 10898..10899,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 422,
        column: 13,
        span: 10900..10901,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "22",
                    after_decimal: "",
                },
            ),
        ),
        line: 422,
        column: 0,
        span: 10901..10904,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 424,
        column: 7,
        span: 10906..10912,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 424,
        column: 8,
        span: 10912..10913,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 9,
        span: 10913..10914,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 424,
        column: 10,
        span: 10914..10915,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 424,
        column: 17,
        span: 10915..10922,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 424,
        column: 18,
        span: 10922..10923,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 21,
        span: 10924..10926,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 24,
        span: 10926..10929,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 424,
        column: 28,
        span: 10930..10933,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 424,
        column: 30,
        span: 10934..10935,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 424,
        column: 31,
        span: 10935..10936,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 424,
        column: 38,
        span: 10936..10943,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 424,
        column: 40,
        span: 10944..10945,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 424,
        column: 44,
        span: 10945..10949,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 424,
        column: 45,
        span: 10949..10950,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 424,
        column: 48,
        span: 10951..10953,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "11",
                    after_decimal: "",
                },
            ),
        ),
        line: 424,
        column: 51,
        span: 10953..10956,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 424,
        column: 0,
        span: 10957..10960,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 425,
        column: 9,
        span: 10968..10969,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 425,
        column: 10,
        span: 10969..10970,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 425,
        column: 11,
        span: 10970..10971,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 425,
        column: 18,
        span: 10971..10978,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 425,
        column: 19,
        span: 10978..10979,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 425,
        column: 22,
        span: 10980..10982,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "22",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 25,
        span: 10982..10985,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 425,
        column: 29,
        span: 10986..10989,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 425,
        column: 31,
        span: 10990..10991,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 425,
        column: 32,
        span: 10991..10992,
    },
    Token {
        kind: Minus,
        lexeme: Symbol(
            "-",
        ),
        line: 425,
        column: 33,
        span: 10992..10993,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "maxintF",
        ),
        line: 425,
        column: 40,
        span: 10993..11000,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 425,
        column: 42,
        span: 11001..11002,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: ".0",
                },
            ),
        ),
        line: 425,
        column: 46,
        span: 11002..11006,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 425,
        column: 47,
        span: 11006..11007,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 425,
        column: 50,
        span: 11008..11010,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "13",
                    after_decimal: "",
                },
            ),
        ),
        line: 425,
        column: 53,
        span: 11010..11013,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 425,
        column: 54,
        span: 11013..11014,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 427,
        column: 2,
        span: 11016..11017,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 427,
        column: 4,
        span: 11018..11019,
    },
    Token {
        kind: Nil,
        lexeme: Symbol(
            "nil",
        ),
        line: 427,
        column: 0,
        span: 11020..11023,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 431,
        column: 0,
        span: 11067..11069,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 432,
        column: 8,
        span: 11072..11077,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 432,
        column: 10,
        span: 11078..11079,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 11,
        span: 11079..11080,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 432,
        column: 12,
        span: 11080..11081,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 13,
        span: 11081..11082,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 432,
        column: 14,
        span: 11082..11083,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 432,
        column: 15,
        span: 11083..11084,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 432,
        column: 0,
        span: 11084..11085,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 433,
        column: 4,
        span: 11088..11089,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 433,
        column: 6,
        span: 11090..11091,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 433,
        column: 8,
        span: 11092..11093,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 433,
        column: 11,
        span: 11093..11096,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 433,
        column: 12,
        span: 11096..11097,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 433,
        column: 16,
        span: 11098..11101,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 433,
        column: 17,
        span: 11101..11102,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 433,
        column: 18,
        span: 11102..11103,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 433,
        column: 20,
        span: 11104..11105,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 433,
        column: 21,
        span: 11105..11106,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 433,
        column: 22,
        span: 11105..11107,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 433,
        column: 23,
        span: 11107..11108,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 433,
        column: 25,
        span: 11109..11110,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 433,
        column: 26,
        span: 11110..11111,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 433,
        column: 27,
        span: 11110..11112,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 433,
        column: 28,
        span: 11112..11113,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 433,
        column: 30,
        span: 11114..11115,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 433,
        column: 31,
        span: 11115..11116,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 433,
        column: 0,
        span: 11116..11117,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 434,
        column: 4,
        span: 11120..11121,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 5,
        span: 11121..11122,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 434,
        column: 7,
        span: 11123..11124,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 434,
        column: 8,
        span: 11124..11125,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 434,
        column: 9,
        span: 11125..11126,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 434,
        column: 10,
        span: 11126..11127,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 11,
        span: 11127..11128,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 434,
        column: 13,
        span: 11129..11130,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 14,
        span: 11130..11131,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 434,
        column: 16,
        span: 11132..11133,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 17,
        span: 11133..11134,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 434,
        column: 19,
        span: 11135..11136,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 434,
        column: 20,
        span: 11136..11137,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 434,
        column: 21,
        span: 11137..11138,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 434,
        column: 22,
        span: 11138..11139,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 23,
        span: 11139..11140,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 434,
        column: 25,
        span: 11141..11142,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 434,
        column: 26,
        span: 11142..11143,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 434,
        column: 27,
        span: 11143..11144,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 434,
        column: 28,
        span: 11144..11145,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 434,
        column: 29,
        span: 11145..11146,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 434,
        column: 30,
        span: 11146..11147,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 434,
        column: 32,
        span: 11148..11149,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 434,
        column: 34,
        span: 11150..11151,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 35,
        span: 11151..11152,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 434,
        column: 37,
        span: 11153..11154,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 38,
        span: 11154..11155,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 434,
        column: 40,
        span: 11156..11157,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 41,
        span: 11157..11158,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 434,
        column: 43,
        span: 11159..11160,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 44,
        span: 11160..11161,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 434,
        column: 46,
        span: 11162..11163,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 434,
        column: 47,
        span: 11163..11164,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 434,
        column: 0,
        span: 11165..11166,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 435,
        column: 9,
        span: 11169..11175,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 435,
        column: 10,
        span: 11175..11176,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 435,
        column: 11,
        span: 11176..11177,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 14,
        span: 11178..11180,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
        column: 16,
        span: 11180..11182,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 435,
        column: 20,
        span: 11183..11186,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 435,
        column: 22,
        span: 11187..11188,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 435,
        column: 23,
        span: 11188..11189,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
        column: 24,
        span: 11188..11190,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 435,
        column: 25,
        span: 11190..11191,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 28,
        span: 11192..11194,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
        column: 30,
        span: 11194..11196,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 435,
        column: 34,
        span: 11197..11200,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 435,
        column: 36,
        span: 11201..11202,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 39,
        span: 11203..11205,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
        column: 41,
        span: 11205..11207,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 435,
        column: 45,
        span: 11208..11211,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 435,
        column: 47,
        span: 11212..11213,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 50,
        span: 11214..11216,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 435,
        column: 52,
        span: 11217..11218,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 435,
        column: 56,
        span: 11219..11222,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 435,
        column: 58,
        span: 11223..11224,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 435,
        column: 59,
        span: 11224..11225,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
        column: 60,
        span: 11224..11226,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 435,
        column: 61,
        span: 11226..11227,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 435,
        column: 64,
        span: 11228..11230,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 435,
        column: 66,
        span: 11230..11232,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 435,
        column: 0,
        span: 11233..11236,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 436,
        column: 11,
        span: 11246..11247,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 436,
        column: 12,
        span: 11247..11248,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 436,
        column: 13,
        span: 11247..11249,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 436,
        column: 14,
        span: 11249..11250,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 436,
        column: 17,
        span: 11251..11253,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 436,
        column: 19,
        span: 11253..11255,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 436,
        column: 20,
        span: 11255..11256,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 437,
        column: 0,
        span: 11257..11260,
    },
    Token {
        kind: Do,
        lexeme: Symbol(
            "do",
        ),
        line: 440,
        column: 0,
        span: 11291..11293,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 441,
        column: 8,
        span: 11296..11301,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 441,
        column: 10,
        span: 11302..11303,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
        column: 11,
        span: 11303..11304,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 441,
        column: 12,
        span: 11304..11305,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
        column: 13,
        span: 11305..11306,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 441,
        column: 14,
        span: 11306..11307,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 441,
        column: 15,
        span: 11307..11308,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 441,
        column: 0,
        span: 11308..11309,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 442,
        column: 4,
        span: 11312..11313,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 6,
        span: 11314..11315,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 442,
        column: 8,
        span: 11316..11317,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'a'",
        ),
        line: 442,
        column: 11,
        span: 11317..11320,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 442,
        column: 12,
        span: 11320..11321,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'b'",
        ),
        line: 442,
        column: 16,
        span: 11322..11325,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 442,
        column: 17,
        span: 11325..11326,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 442,
        column: 18,
        span: 11326..11327,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 442,
        column: 20,
        span: 11328..11329,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 21,
        span: 11329..11330,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
        column: 22,
        span: 11329..11331,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 442,
        column: 23,
        span: 11331..11332,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 442,
        column: 25,
        span: 11333..11334,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 26,
        span: 11334..11335,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 442,
        column: 27,
        span: 11334..11336,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 442,
        column: 28,
        span: 11336..11337,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 442,
        column: 30,
        span: 11338..11339,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 442,
        column: 31,
        span: 11339..11340,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 442,
        column: 0,
        span: 11340..11341,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 443,
        column: 8,
        span: 11344..11349,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 443,
        column: 17,
        span: 11350..11358,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 443,
        column: 21,
        span: 11359..11362,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 443,
        column: 23,
        span: 11363..11364,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 443,
        column: 24,
        span: 11364..11365,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 444,
        column: 6,
        span: 11370..11371,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 7,
        span: 11371..11372,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 444,
        column: 9,
        span: 11373..11374,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 444,
        column: 10,
        span: 11374..11375,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 444,
        column: 11,
        span: 11375..11376,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 444,
        column: 12,
        span: 11376..11377,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 13,
        span: 11377..11378,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 444,
        column: 15,
        span: 11379..11380,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 16,
        span: 11380..11381,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 444,
        column: 18,
        span: 11382..11383,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 19,
        span: 11383..11384,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 444,
        column: 21,
        span: 11385..11386,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 444,
        column: 22,
        span: 11386..11387,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 444,
        column: 23,
        span: 11387..11388,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 444,
        column: 24,
        span: 11388..11389,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 25,
        span: 11389..11390,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 444,
        column: 27,
        span: 11391..11392,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 444,
        column: 28,
        span: 11392..11393,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 444,
        column: 29,
        span: 11393..11394,
    },
    Token {
        kind: Plus,
        lexeme: Symbol(
            "+",
        ),
        line: 444,
        column: 30,
        span: 11394..11395,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 444,
        column: 31,
        span: 11395..11396,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 444,
        column: 32,
        span: 11396..11397,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 444,
        column: 34,
        span: 11398..11399,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 444,
        column: 36,
        span: 11400..11401,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 37,
        span: 11401..11402,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 444,
        column: 39,
        span: 11403..11404,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 40,
        span: 11404..11405,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 444,
        column: 42,
        span: 11406..11407,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 43,
        span: 11407..11408,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 444,
        column: 45,
        span: 11409..11410,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 46,
        span: 11410..11411,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 444,
        column: 48,
        span: 11412..11413,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 444,
        column: 49,
        span: 11413..11414,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 444,
        column: 0,
        span: 11415..11416,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 445,
        column: 0,
        span: 11419..11422,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 446,
        column: 6,
        span: 11425..11428,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 446,
        column: 7,
        span: 11428..11429,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 446,
        column: 8,
        span: 11429..11430,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 447,
        column: 9,
        span: 11433..11439,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 447,
        column: 10,
        span: 11439..11440,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "i",
        ),
        line: 447,
        column: 11,
        span: 11440..11441,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 447,
        column: 14,
        span: 11442..11444,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 447,
        column: 16,
        span: 11444..11446,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 447,
        column: 20,
        span: 11447..11450,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 447,
        column: 22,
        span: 11451..11452,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 447,
        column: 23,
        span: 11452..11453,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 447,
        column: 24,
        span: 11452..11454,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 447,
        column: 25,
        span: 11454..11455,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 447,
        column: 28,
        span: 11456..11458,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 447,
        column: 30,
        span: 11458..11460,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 447,
        column: 34,
        span: 11461..11464,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 447,
        column: 36,
        span: 11465..11466,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 447,
        column: 39,
        span: 11467..11469,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 447,
        column: 41,
        span: 11469..11471,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 447,
        column: 45,
        span: 11472..11475,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "j",
        ),
        line: 447,
        column: 47,
        span: 11476..11477,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 447,
        column: 50,
        span: 11478..11480,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 447,
        column: 52,
        span: 11481..11482,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 447,
        column: 56,
        span: 11483..11486,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 447,
        column: 58,
        span: 11487..11488,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 447,
        column: 59,
        span: 11488..11489,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 447,
        column: 60,
        span: 11488..11490,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 447,
        column: 61,
        span: 11490..11491,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 447,
        column: 64,
        span: 11492..11494,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "2",
                    after_decimal: "",
                },
            ),
        ),
        line: 447,
        column: 66,
        span: 11494..11496,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 447,
        column: 0,
        span: 11497..11500,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 448,
        column: 11,
        span: 11510..11511,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 448,
        column: 12,
        span: 11511..11512,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 448,
        column: 13,
        span: 11511..11513,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 448,
        column: 14,
        span: 11513..11514,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 448,
        column: 17,
        span: 11515..11517,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 448,
        column: 19,
        span: 11517..11519,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 448,
        column: 20,
        span: 11519..11520,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 449,
        column: 8,
        span: 11523..11528,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 449,
        column: 10,
        span: 11529..11530,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 449,
        column: 12,
        span: 11531..11532,
    },
    Token {
        kind: LeftBrace,
        lexeme: Symbol(
            "{",
        ),
        line: 449,
        column: 14,
        span: 11533..11534,
    },
    Token {
        kind: RightBrace,
        lexeme: Symbol(
            "}",
        ),
        line: 449,
        column: 15,
        span: 11534..11535,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 4,
        span: 11538..11539,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 450,
        column: 12,
        span: 11539..11547,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 14,
        span: 11548..11549,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 450,
        column: 15,
        span: 11549..11550,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 16,
        span: 11550..11551,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 450,
        column: 18,
        span: 11552..11553,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 450,
        column: 19,
        span: 11553..11554,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 450,
        column: 20,
        span: 11554..11555,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 450,
        column: 21,
        span: 11555..11556,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
        column: 22,
        span: 11556..11557,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 450,
        column: 24,
        span: 11558..11559,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 450,
        column: 26,
        span: 11560..11561,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 450,
        column: 29,
        span: 11561..11564,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 450,
        column: 30,
        span: 11564..11565,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "20",
                    after_decimal: "",
                },
            ),
        ),
        line: 450,
        column: 33,
        span: 11565..11568,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 450,
        column: 38,
        span: 11570..11573,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 39,
        span: 11573..11574,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 450,
        column: 40,
        span: 11574..11575,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 450,
        column: 41,
        span: 11574..11576,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 450,
        column: 42,
        span: 11576..11577,
    },
    Token {
        kind: Semicolon,
        lexeme: Symbol(
            ";",
        ),
        line: 450,
        column: 43,
        span: 11577..11578,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 451,
        column: 9,
        span: 11581..11587,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 451,
        column: 10,
        span: 11587..11588,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "t",
        ),
        line: 451,
        column: 11,
        span: 11588..11589,
    },
    Token {
        kind: LeftBracket,
        lexeme: Symbol(
            "[",
        ),
        line: 451,
        column: 12,
        span: 11589..11590,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "1",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 13,
        span: 11589..11591,
    },
    Token {
        kind: RightBracket,
        lexeme: Symbol(
            "]",
        ),
        line: 451,
        column: 14,
        span: 11591..11592,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 451,
        column: 17,
        span: 11593..11595,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "10",
                    after_decimal: "",
                },
            ),
        ),
        line: 451,
        column: 20,
        span: 11595..11598,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 451,
        column: 21,
        span: 11598..11599,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 452,
        column: 0,
        span: 11600..11603,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 455,
        column: 6,
        span: 11624..11629,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 455,
        column: 15,
        span: 11630..11638,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 455,
        column: 19,
        span: 11639..11642,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 455,
        column: 21,
        span: 11643..11644,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 455,
        column: 22,
        span: 11644..11645,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 456,
        column: 8,
        span: 11648..11653,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 456,
        column: 0,
        span: 11654..11655,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 457,
        column: 9,
        span: 11658..11664,
    },
    Token {
        kind: Function,
        lexeme: Symbol(
            "function",
        ),
        line: 457,
        column: 18,
        span: 11665..11673,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 457,
        column: 20,
        span: 11674..11675,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 457,
        column: 21,
        span: 11675..11676,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 458,
        column: 10,
        span: 11681..11686,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 458,
        column: 0,
        span: 11687..11688,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 459,
        column: 6,
        span: 11693..11694,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
        column: 7,
        span: 11694..11695,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 459,
        column: 9,
        span: 11696..11697,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 459,
        column: 11,
        span: 11698..11699,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 459,
        column: 13,
        span: 11699..11701,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 459,
        column: 14,
        span: 11701..11702,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 459,
        column: 17,
        span: 11702..11705,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 460,
        column: 11,
        span: 11750..11756,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 460,
        column: 13,
        span: 11757..11758,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 460,
        column: 14,
        span: 11758..11759,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 460,
        column: 0,
        span: 11760..11761,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 461,
        column: 0,
        span: 11764..11767,
    },
    Token {
        kind: End,
        lexeme: Symbol(
            "end",
        ),
        line: 462,
        column: 0,
        span: 11768..11771,
    },
    Token {
        kind: Local,
        lexeme: Symbol(
            "local",
        ),
        line: 464,
        column: 6,
        span: 11773..11778,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 464,
        column: 8,
        span: 11779..11780,
    },
    Token {
        kind: Comma,
        lexeme: Symbol(
            ",",
        ),
        line: 464,
        column: 9,
        span: 11780..11781,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 464,
        column: 11,
        span: 11782..11783,
    },
    Token {
        kind: Equals,
        lexeme: Symbol(
            "=",
        ),
        line: 464,
        column: 13,
        span: 11784..11785,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "foo",
        ),
        line: 464,
        column: 17,
        span: 11786..11789,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 18,
        span: 11789..11790,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 19,
        span: 11790..11791,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 464,
        column: 20,
        span: 11791..11792,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 464,
        column: 21,
        span: 11792..11793,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "assert",
        ),
        line: 465,
        column: 7,
        span: 11794..11800,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 465,
        column: 8,
        span: 11800..11801,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "a",
        ),
        line: 465,
        column: 9,
        span: 11801..11802,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 465,
        column: 12,
        span: 11803..11805,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "3",
                    after_decimal: "",
                },
            ),
        ),
        line: 465,
        column: 14,
        span: 11805..11807,
    },
    Token {
        kind: And,
        lexeme: Symbol(
            "and",
        ),
        line: 465,
        column: 18,
        span: 11808..11811,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "b",
        ),
        line: 465,
        column: 20,
        span: 11812..11813,
    },
    Token {
        kind: DoubleEquals,
        lexeme: Symbol(
            "==",
        ),
        line: 465,
        column: 23,
        span: 11814..11816,
    },
    Token {
        kind: Number,
        lexeme: Number(
            Decimal(
                Decimal {
                    before_decimal: "14",
                    after_decimal: "",
                },
            ),
        ),
        line: 465,
        column: 26,
        span: 11816..11819,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 465,
        column: 27,
        span: 11819..11820,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "print",
        ),
        line: 467,
        column: 6,
        span: 11822..11827,
    },
    Token {
        kind: LeftParen,
        lexeme: Symbol(
            "(",
        ),
        line: 467,
        column: 7,
        span: 11827..11828,
    },
    Token {
        kind: String,
        lexeme: Symbol(
            "'OK'",
        ),
        line: 467,
        column: 11,
        span: 11828..11832,
    },
    Token {
        kind: RightParen,
        lexeme: Symbol(
            ")",
        ),
        line: 467,
        column: 12,
        span: 11832..11833,
    },
    Token {
        kind: Return,
        lexeme: Symbol(
            "return",
        ),
        line: 469,
        column: 7,
        span: 11835..11841,
    },
    Token {
        kind: Identifier,
        lexeme: Symbol(
            "res",
        ),
        line: 469,
        column: 0,
        span: 11842..11845,
    },
]
